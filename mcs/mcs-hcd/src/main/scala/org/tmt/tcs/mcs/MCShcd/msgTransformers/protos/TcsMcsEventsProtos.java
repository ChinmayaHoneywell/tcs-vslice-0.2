// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcs_mcs_events.proto

package org.tmt.tcs.mcs.MCShcd.msgTransformers.protos;

public final class TcsMcsEventsProtos {
    private TcsMcsEventsProtos() {}
    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }
    public interface TcsPositionDemandEventOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.TcsPositionDemandEvent)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required double azimuth = 1;</code>
         *
         * <pre>
         * azimuth position
         * </pre>
         */
        boolean hasAzimuth();
        /**
         * <code>required double azimuth = 1;</code>
         *
         * <pre>
         * azimuth position
         * </pre>
         */
        double getAzimuth();

        /**
         * <code>required double elevation = 2;</code>
         *
         * <pre>
         * elevation position
         * </pre>
         */
        boolean hasElevation();
        /**
         * <code>required double elevation = 2;</code>
         *
         * <pre>
         * elevation position
         * </pre>
         */
        double getElevation();

        /**
         * <code>required int64 time = 3;</code>
         *
         * <pre>
         * time at which event sampled
         * </pre>
         */
        boolean hasTime();
        /**
         * <code>required int64 time = 3;</code>
         *
         * <pre>
         * time at which event sampled
         * </pre>
         */
        long getTime();
    }
    /**
     * Protobuf type {@code eventpoc.TcsPositionDemandEvent}
     */
    public static final class TcsPositionDemandEvent extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.TcsPositionDemandEvent)
            TcsPositionDemandEventOrBuilder {
        // Use TcsPositionDemandEvent.newBuilder() to construct.
        private TcsPositionDemandEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private TcsPositionDemandEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final TcsPositionDemandEvent defaultInstance;
        public static TcsPositionDemandEvent getDefaultInstance() {
            return defaultInstance;
        }

        public TcsPositionDemandEvent getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private TcsPositionDemandEvent(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 9: {
                            bitField0_ |= 0x00000001;
                            azimuth_ = input.readDouble();
                            break;
                        }
                        case 17: {
                            bitField0_ |= 0x00000002;
                            elevation_ = input.readDouble();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            time_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsPositionDemandEvent_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsPositionDemandEvent_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.Builder.class);
        }

        public static com.google.protobuf.Parser<TcsPositionDemandEvent> PARSER =
                new com.google.protobuf.AbstractParser<TcsPositionDemandEvent>() {
                    public TcsPositionDemandEvent parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new TcsPositionDemandEvent(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<TcsPositionDemandEvent> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int AZIMUTH_FIELD_NUMBER = 1;
        private double azimuth_;
        /**
         * <code>required double azimuth = 1;</code>
         *
         * <pre>
         * azimuth position
         * </pre>
         */
        public boolean hasAzimuth() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required double azimuth = 1;</code>
         *
         * <pre>
         * azimuth position
         * </pre>
         */
        public double getAzimuth() {
            return azimuth_;
        }

        public static final int ELEVATION_FIELD_NUMBER = 2;
        private double elevation_;
        /**
         * <code>required double elevation = 2;</code>
         *
         * <pre>
         * elevation position
         * </pre>
         */
        public boolean hasElevation() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required double elevation = 2;</code>
         *
         * <pre>
         * elevation position
         * </pre>
         */
        public double getElevation() {
            return elevation_;
        }

        public static final int TIME_FIELD_NUMBER = 3;
        private long time_;
        /**
         * <code>required int64 time = 3;</code>
         *
         * <pre>
         * time at which event sampled
         * </pre>
         */
        public boolean hasTime() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required int64 time = 3;</code>
         *
         * <pre>
         * time at which event sampled
         * </pre>
         */
        public long getTime() {
            return time_;
        }

        private void initFields() {
            azimuth_ = 0D;
            elevation_ = 0D;
            time_ = 0L;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasAzimuth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElevation()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeDouble(1, azimuth_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeDouble(2, elevation_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt64(3, time_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(1, azimuth_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(2, elevation_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(3, time_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.TcsPositionDemandEvent}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.TcsPositionDemandEvent)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEventOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsPositionDemandEvent_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsPositionDemandEvent_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                azimuth_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000001);
                elevation_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000002);
                time_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsPositionDemandEvent_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.azimuth_ = azimuth_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.elevation_ = elevation_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.time_ = time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent.getDefaultInstance()) return this;
                if (other.hasAzimuth()) {
                    setAzimuth(other.getAzimuth());
                }
                if (other.hasElevation()) {
                    setElevation(other.getElevation());
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasAzimuth()) {

                    return false;
                }
                if (!hasElevation()) {

                    return false;
                }
                if (!hasTime()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsPositionDemandEvent) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private double azimuth_ ;
            /**
             * <code>required double azimuth = 1;</code>
             *
             * <pre>
             * azimuth position
             * </pre>
             */
            public boolean hasAzimuth() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required double azimuth = 1;</code>
             *
             * <pre>
             * azimuth position
             * </pre>
             */
            public double getAzimuth() {
                return azimuth_;
            }
            /**
             * <code>required double azimuth = 1;</code>
             *
             * <pre>
             * azimuth position
             * </pre>
             */
            public Builder setAzimuth(double value) {
                bitField0_ |= 0x00000001;
                azimuth_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azimuth = 1;</code>
             *
             * <pre>
             * azimuth position
             * </pre>
             */
            public Builder clearAzimuth() {
                bitField0_ = (bitField0_ & ~0x00000001);
                azimuth_ = 0D;
                onChanged();
                return this;
            }

            private double elevation_ ;
            /**
             * <code>required double elevation = 2;</code>
             *
             * <pre>
             * elevation position
             * </pre>
             */
            public boolean hasElevation() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required double elevation = 2;</code>
             *
             * <pre>
             * elevation position
             * </pre>
             */
            public double getElevation() {
                return elevation_;
            }
            /**
             * <code>required double elevation = 2;</code>
             *
             * <pre>
             * elevation position
             * </pre>
             */
            public Builder setElevation(double value) {
                bitField0_ |= 0x00000002;
                elevation_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elevation = 2;</code>
             *
             * <pre>
             * elevation position
             * </pre>
             */
            public Builder clearElevation() {
                bitField0_ = (bitField0_ & ~0x00000002);
                elevation_ = 0D;
                onChanged();
                return this;
            }

            private long time_ ;
            /**
             * <code>required int64 time = 3;</code>
             *
             * <pre>
             * time at which event sampled
             * </pre>
             */
            public boolean hasTime() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required int64 time = 3;</code>
             *
             * <pre>
             * time at which event sampled
             * </pre>
             */
            public long getTime() {
                return time_;
            }
            /**
             * <code>required int64 time = 3;</code>
             *
             * <pre>
             * time at which event sampled
             * </pre>
             */
            public Builder setTime(long value) {
                bitField0_ |= 0x00000004;
                time_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 time = 3;</code>
             *
             * <pre>
             * time at which event sampled
             * </pre>
             */
            public Builder clearTime() {
                bitField0_ = (bitField0_ & ~0x00000004);
                time_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.TcsPositionDemandEvent)
        }

        static {
            defaultInstance = new TcsPositionDemandEvent(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.TcsPositionDemandEvent)
    }

    public interface TcsHeartbeatOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.TcsHeartbeat)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required int32 sequence = 1;</code>
         */
        boolean hasSequence();
        /**
         * <code>required int32 sequence = 1;</code>
         */
        int getSequence();
    }
    /**
     * Protobuf type {@code eventpoc.TcsHeartbeat}
     */
    public static final class TcsHeartbeat extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.TcsHeartbeat)
            TcsHeartbeatOrBuilder {
        // Use TcsHeartbeat.newBuilder() to construct.
        private TcsHeartbeat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private TcsHeartbeat(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final TcsHeartbeat defaultInstance;
        public static TcsHeartbeat getDefaultInstance() {
            return defaultInstance;
        }

        public TcsHeartbeat getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private TcsHeartbeat(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            sequence_ = input.readInt32();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsHeartbeat_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsHeartbeat_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.Builder.class);
        }

        public static com.google.protobuf.Parser<TcsHeartbeat> PARSER =
                new com.google.protobuf.AbstractParser<TcsHeartbeat>() {
                    public TcsHeartbeat parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new TcsHeartbeat(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<TcsHeartbeat> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int SEQUENCE_FIELD_NUMBER = 1;
        private int sequence_;
        /**
         * <code>required int32 sequence = 1;</code>
         */
        public boolean hasSequence() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int32 sequence = 1;</code>
         */
        public int getSequence() {
            return sequence_;
        }

        private void initFields() {
            sequence_ = 0;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasSequence()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, sequence_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, sequence_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.TcsHeartbeat}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.TcsHeartbeat)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeatOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsHeartbeat_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsHeartbeat_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                sequence_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_TcsHeartbeat_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.sequence_ = sequence_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat.getDefaultInstance()) return this;
                if (other.hasSequence()) {
                    setSequence(other.getSequence());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSequence()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.TcsHeartbeat) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private int sequence_ ;
            /**
             * <code>required int32 sequence = 1;</code>
             */
            public boolean hasSequence() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required int32 sequence = 1;</code>
             */
            public int getSequence() {
                return sequence_;
            }
            /**
             * <code>required int32 sequence = 1;</code>
             */
            public Builder setSequence(int value) {
                bitField0_ |= 0x00000001;
                sequence_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 sequence = 1;</code>
             */
            public Builder clearSequence() {
                bitField0_ = (bitField0_ & ~0x00000001);
                sequence_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.TcsHeartbeat)
        }

        static {
            defaultInstance = new TcsHeartbeat(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.TcsHeartbeat)
    }

    public interface McsHealthOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.McsHealth)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
         */
        boolean hasHealth();
        /**
         * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health getHealth();

        /**
         * <code>required string reason = 2;</code>
         */
        boolean hasReason();
        /**
         * <code>required string reason = 2;</code>
         */
        java.lang.String getReason();
        /**
         * <code>required string reason = 2;</code>
         */
        com.google.protobuf.ByteString
        getReasonBytes();

        /**
         * <code>required int64 time = 3;</code>
         */
        boolean hasTime();
        /**
         * <code>required int64 time = 3;</code>
         */
        long getTime();
    }
    /**
     * Protobuf type {@code eventpoc.McsHealth}
     */
    public static final class McsHealth extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.McsHealth)
            McsHealthOrBuilder {
        // Use McsHealth.newBuilder() to construct.
        private McsHealth(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private McsHealth(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final McsHealth defaultInstance;
        public static McsHealth getDefaultInstance() {
            return defaultInstance;
        }

        public McsHealth getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private McsHealth(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(1, rawValue);
                            } else {
                                bitField0_ |= 0x00000001;
                                health_ = value;
                            }
                            break;
                        }
                        case 18: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            reason_ = bs;
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            time_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsHealth_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsHealth_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Builder.class);
        }

        public static com.google.protobuf.Parser<McsHealth> PARSER =
                new com.google.protobuf.AbstractParser<McsHealth>() {
                    public McsHealth parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new McsHealth(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<McsHealth> getParserForType() {
            return PARSER;
        }

        /**
         * Protobuf enum {@code eventpoc.McsHealth.Health}
         */
        public enum Health
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>Good = 0;</code>
             */
            Good(0, 0),
            /**
             * <code>Ill = 1;</code>
             */
            Ill(1, 1),
            /**
             * <code>Bad = 2;</code>
             */
            Bad(2, 2),
            /**
             * <code>interlocked = 3;</code>
             */
            interlocked(3, 3),
            /**
             * <code>unknown = 4;</code>
             */
            unknown(4, 4),
            ;

            /**
             * <code>Good = 0;</code>
             */
            public static final int Good_VALUE = 0;
            /**
             * <code>Ill = 1;</code>
             */
            public static final int Ill_VALUE = 1;
            /**
             * <code>Bad = 2;</code>
             */
            public static final int Bad_VALUE = 2;
            /**
             * <code>interlocked = 3;</code>
             */
            public static final int interlocked_VALUE = 3;
            /**
             * <code>unknown = 4;</code>
             */
            public static final int unknown_VALUE = 4;


            public final int getNumber() { return value; }

            public static Health valueOf(int value) {
                switch (value) {
                    case 0: return Good;
                    case 1: return Ill;
                    case 2: return Bad;
                    case 3: return interlocked;
                    case 4: return unknown;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Health>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Health>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Health>() {
                        public Health findValueByNumber(int number) {
                            return Health.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.getDescriptor().getEnumTypes().get(0);
            }

            private static final Health[] VALUES = values();

            public static Health valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Health(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsHealth.Health)
        }

        private int bitField0_;
        public static final int HEALTH_FIELD_NUMBER = 1;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health health_;
        /**
         * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
         */
        public boolean hasHealth() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health getHealth() {
            return health_;
        }

        public static final int REASON_FIELD_NUMBER = 2;
        private java.lang.Object reason_;
        /**
         * <code>required string reason = 2;</code>
         */
        public boolean hasReason() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required string reason = 2;</code>
         */
        public java.lang.String getReason() {
            java.lang.Object ref = reason_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    reason_ = s;
                }
                return s;
            }
        }
        /**
         * <code>required string reason = 2;</code>
         */
        public com.google.protobuf.ByteString
        getReasonBytes() {
            java.lang.Object ref = reason_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                reason_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int TIME_FIELD_NUMBER = 3;
        private long time_;
        /**
         * <code>required int64 time = 3;</code>
         */
        public boolean hasTime() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required int64 time = 3;</code>
         */
        public long getTime() {
            return time_;
        }

        private void initFields() {
            health_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health.Good;
            reason_ = "";
            time_ = 0L;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasHealth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasReason()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeEnum(1, health_.getNumber());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(2, getReasonBytes());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt64(3, time_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(1, health_.getNumber());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(2, getReasonBytes());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(3, time_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.McsHealth}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.McsHealth)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealthOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsHealth_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsHealth_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                health_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health.Good;
                bitField0_ = (bitField0_ & ~0x00000001);
                reason_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                time_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsHealth_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.health_ = health_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.reason_ = reason_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.time_ = time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.getDefaultInstance()) return this;
                if (other.hasHealth()) {
                    setHealth(other.getHealth());
                }
                if (other.hasReason()) {
                    bitField0_ |= 0x00000002;
                    reason_ = other.reason_;
                    onChanged();
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasHealth()) {

                    return false;
                }
                if (!hasReason()) {

                    return false;
                }
                if (!hasTime()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health health_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health.Good;
            /**
             * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
             */
            public boolean hasHealth() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health getHealth() {
                return health_;
            }
            /**
             * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
             */
            public Builder setHealth(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                health_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsHealth.Health health = 1 [default = Good];</code>
             */
            public Builder clearHealth() {
                bitField0_ = (bitField0_ & ~0x00000001);
                health_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsHealth.Health.Good;
                onChanged();
                return this;
            }

            private java.lang.Object reason_ = "";
            /**
             * <code>required string reason = 2;</code>
             */
            public boolean hasReason() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required string reason = 2;</code>
             */
            public java.lang.String getReason() {
                java.lang.Object ref = reason_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        reason_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }
            /**
             * <code>required string reason = 2;</code>
             */
            public com.google.protobuf.ByteString
            getReasonBytes() {
                java.lang.Object ref = reason_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    reason_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <code>required string reason = 2;</code>
             */
            public Builder setReason(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                reason_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required string reason = 2;</code>
             */
            public Builder clearReason() {
                bitField0_ = (bitField0_ & ~0x00000002);
                reason_ = getDefaultInstance().getReason();
                onChanged();
                return this;
            }
            /**
             * <code>required string reason = 2;</code>
             */
            public Builder setReasonBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                reason_ = value;
                onChanged();
                return this;
            }

            private long time_ ;
            /**
             * <code>required int64 time = 3;</code>
             */
            public boolean hasTime() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required int64 time = 3;</code>
             */
            public long getTime() {
                return time_;
            }
            /**
             * <code>required int64 time = 3;</code>
             */
            public Builder setTime(long value) {
                bitField0_ |= 0x00000004;
                time_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 time = 3;</code>
             */
            public Builder clearTime() {
                bitField0_ = (bitField0_ & ~0x00000004);
                time_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.McsHealth)
        }

        static {
            defaultInstance = new McsHealth(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.McsHealth)
    }

    public interface McsAlarmOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.McsAlarm)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required string source = 1;</code>
         */
        boolean hasSource();
        /**
         * <code>required string source = 1;</code>
         */
        java.lang.String getSource();
        /**
         * <code>required string source = 1;</code>
         */
        com.google.protobuf.ByteString
        getSourceBytes();

        /**
         * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
         */
        boolean hasCategory();
        /**
         * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category getCategory();

        /**
         * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
         */
        boolean hasSeverity();
        /**
         * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity getSeverity();

        /**
         * <code>required string reason = 4;</code>
         */
        boolean hasReason();
        /**
         * <code>required string reason = 4;</code>
         */
        java.lang.String getReason();
        /**
         * <code>required string reason = 4;</code>
         */
        com.google.protobuf.ByteString
        getReasonBytes();

        /**
         * <code>required int64 time = 5;</code>
         */
        boolean hasTime();
        /**
         * <code>required int64 time = 5;</code>
         */
        long getTime();
    }
    /**
     * Protobuf type {@code eventpoc.McsAlarm}
     */
    public static final class McsAlarm extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.McsAlarm)
            McsAlarmOrBuilder {
        // Use McsAlarm.newBuilder() to construct.
        private McsAlarm(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private McsAlarm(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final McsAlarm defaultInstance;
        public static McsAlarm getDefaultInstance() {
            return defaultInstance;
        }

        public McsAlarm getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private McsAlarm(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            source_ = bs;
                            break;
                        }
                        case 16: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(2, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                category_ = value;
                            }
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                severity_ = value;
                            }
                            break;
                        }
                        case 34: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000008;
                            reason_ = bs;
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            time_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsAlarm_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsAlarm_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Builder.class);
        }

        public static com.google.protobuf.Parser<McsAlarm> PARSER =
                new com.google.protobuf.AbstractParser<McsAlarm>() {
                    public McsAlarm parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new McsAlarm(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<McsAlarm> getParserForType() {
            return PARSER;
        }

        /**
         * Protobuf enum {@code eventpoc.McsAlarm.Category}
         */
        public enum Category
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>emerg = 0;</code>
             */
            emerg(0, 0),
            /**
             * <code>alert = 1;</code>
             */
            alert(1, 1),
            /**
             * <code>crit = 2;</code>
             */
            crit(2, 2),
            /**
             * <code>err = 3;</code>
             */
            err(3, 3),
            /**
             * <code>warning = 4;</code>
             */
            warning(4, 4),
            /**
             * <code>notice = 5;</code>
             */
            notice(5, 5),
            ;

            /**
             * <code>emerg = 0;</code>
             */
            public static final int emerg_VALUE = 0;
            /**
             * <code>alert = 1;</code>
             */
            public static final int alert_VALUE = 1;
            /**
             * <code>crit = 2;</code>
             */
            public static final int crit_VALUE = 2;
            /**
             * <code>err = 3;</code>
             */
            public static final int err_VALUE = 3;
            /**
             * <code>warning = 4;</code>
             */
            public static final int warning_VALUE = 4;
            /**
             * <code>notice = 5;</code>
             */
            public static final int notice_VALUE = 5;


            public final int getNumber() { return value; }

            public static Category valueOf(int value) {
                switch (value) {
                    case 0: return emerg;
                    case 1: return alert;
                    case 2: return crit;
                    case 3: return err;
                    case 4: return warning;
                    case 5: return notice;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Category>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Category>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Category>() {
                        public Category findValueByNumber(int number) {
                            return Category.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.getDescriptor().getEnumTypes().get(0);
            }

            private static final Category[] VALUES = values();

            public static Category valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Category(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsAlarm.Category)
        }

        /**
         * Protobuf enum {@code eventpoc.McsAlarm.Severity}
         */
        public enum Severity
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>major = 0;</code>
             */
            major(0, 0),
            /**
             * <code>minor = 1;</code>
             */
            minor(1, 1),
            /**
             * <code>normal = 2;</code>
             */
            normal(2, 2),
            ;

            /**
             * <code>major = 0;</code>
             */
            public static final int major_VALUE = 0;
            /**
             * <code>minor = 1;</code>
             */
            public static final int minor_VALUE = 1;
            /**
             * <code>normal = 2;</code>
             */
            public static final int normal_VALUE = 2;


            public final int getNumber() { return value; }

            public static Severity valueOf(int value) {
                switch (value) {
                    case 0: return major;
                    case 1: return minor;
                    case 2: return normal;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Severity>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Severity>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Severity>() {
                        public Severity findValueByNumber(int number) {
                            return Severity.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.getDescriptor().getEnumTypes().get(1);
            }

            private static final Severity[] VALUES = values();

            public static Severity valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Severity(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsAlarm.Severity)
        }

        private int bitField0_;
        public static final int SOURCE_FIELD_NUMBER = 1;
        private java.lang.Object source_;
        /**
         * <code>required string source = 1;</code>
         */
        public boolean hasSource() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required string source = 1;</code>
         */
        public java.lang.String getSource() {
            java.lang.Object ref = source_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    source_ = s;
                }
                return s;
            }
        }
        /**
         * <code>required string source = 1;</code>
         */
        public com.google.protobuf.ByteString
        getSourceBytes() {
            java.lang.Object ref = source_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                source_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int CATEGORY_FIELD_NUMBER = 2;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category category_;
        /**
         * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
         */
        public boolean hasCategory() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category getCategory() {
            return category_;
        }

        public static final int SEVERITY_FIELD_NUMBER = 3;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity severity_;
        /**
         * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
         */
        public boolean hasSeverity() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity getSeverity() {
            return severity_;
        }

        public static final int REASON_FIELD_NUMBER = 4;
        private java.lang.Object reason_;
        /**
         * <code>required string reason = 4;</code>
         */
        public boolean hasReason() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required string reason = 4;</code>
         */
        public java.lang.String getReason() {
            java.lang.Object ref = reason_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    reason_ = s;
                }
                return s;
            }
        }
        /**
         * <code>required string reason = 4;</code>
         */
        public com.google.protobuf.ByteString
        getReasonBytes() {
            java.lang.Object ref = reason_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8(
                                (java.lang.String) ref);
                reason_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int TIME_FIELD_NUMBER = 5;
        private long time_;
        /**
         * <code>required int64 time = 5;</code>
         */
        public boolean hasTime() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required int64 time = 5;</code>
         */
        public long getTime() {
            return time_;
        }

        private void initFields() {
            source_ = "";
            category_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category.emerg;
            severity_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity.major;
            reason_ = "";
            time_ = 0L;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasSource()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCategory()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSeverity()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasReason()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getSourceBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, category_.getNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, severity_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeBytes(4, getReasonBytes());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeInt64(5, time_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(1, getSourceBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(2, category_.getNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(3, severity_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(4, getReasonBytes());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(5, time_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.McsAlarm}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.McsAlarm)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarmOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsAlarm_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsAlarm_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                source_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                category_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category.emerg;
                bitField0_ = (bitField0_ & ~0x00000002);
                severity_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity.major;
                bitField0_ = (bitField0_ & ~0x00000004);
                reason_ = "";
                bitField0_ = (bitField0_ & ~0x00000008);
                time_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsAlarm_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.source_ = source_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.category_ = category_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.severity_ = severity_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.reason_ = reason_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.time_ = time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.getDefaultInstance()) return this;
                if (other.hasSource()) {
                    bitField0_ |= 0x00000001;
                    source_ = other.source_;
                    onChanged();
                }
                if (other.hasCategory()) {
                    setCategory(other.getCategory());
                }
                if (other.hasSeverity()) {
                    setSeverity(other.getSeverity());
                }
                if (other.hasReason()) {
                    bitField0_ |= 0x00000008;
                    reason_ = other.reason_;
                    onChanged();
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSource()) {

                    return false;
                }
                if (!hasCategory()) {

                    return false;
                }
                if (!hasSeverity()) {

                    return false;
                }
                if (!hasReason()) {

                    return false;
                }
                if (!hasTime()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private java.lang.Object source_ = "";
            /**
             * <code>required string source = 1;</code>
             */
            public boolean hasSource() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required string source = 1;</code>
             */
            public java.lang.String getSource() {
                java.lang.Object ref = source_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        source_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }
            /**
             * <code>required string source = 1;</code>
             */
            public com.google.protobuf.ByteString
            getSourceBytes() {
                java.lang.Object ref = source_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    source_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <code>required string source = 1;</code>
             */
            public Builder setSource(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                source_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required string source = 1;</code>
             */
            public Builder clearSource() {
                bitField0_ = (bitField0_ & ~0x00000001);
                source_ = getDefaultInstance().getSource();
                onChanged();
                return this;
            }
            /**
             * <code>required string source = 1;</code>
             */
            public Builder setSourceBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                source_ = value;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category category_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category.emerg;
            /**
             * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
             */
            public boolean hasCategory() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category getCategory() {
                return category_;
            }
            /**
             * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
             */
            public Builder setCategory(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                category_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsAlarm.Category category = 2 [default = emerg];</code>
             */
            public Builder clearCategory() {
                bitField0_ = (bitField0_ & ~0x00000002);
                category_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Category.emerg;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity severity_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity.major;
            /**
             * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
             */
            public boolean hasSeverity() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity getSeverity() {
                return severity_;
            }
            /**
             * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
             */
            public Builder setSeverity(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                severity_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsAlarm.Severity severity = 3 [default = major];</code>
             */
            public Builder clearSeverity() {
                bitField0_ = (bitField0_ & ~0x00000004);
                severity_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsAlarm.Severity.major;
                onChanged();
                return this;
            }

            private java.lang.Object reason_ = "";
            /**
             * <code>required string reason = 4;</code>
             */
            public boolean hasReason() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }
            /**
             * <code>required string reason = 4;</code>
             */
            public java.lang.String getReason() {
                java.lang.Object ref = reason_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs =
                            (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        reason_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }
            /**
             * <code>required string reason = 4;</code>
             */
            public com.google.protobuf.ByteString
            getReasonBytes() {
                java.lang.Object ref = reason_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b =
                            com.google.protobuf.ByteString.copyFromUtf8(
                                    (java.lang.String) ref);
                    reason_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }
            /**
             * <code>required string reason = 4;</code>
             */
            public Builder setReason(
                    java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                reason_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required string reason = 4;</code>
             */
            public Builder clearReason() {
                bitField0_ = (bitField0_ & ~0x00000008);
                reason_ = getDefaultInstance().getReason();
                onChanged();
                return this;
            }
            /**
             * <code>required string reason = 4;</code>
             */
            public Builder setReasonBytes(
                    com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                reason_ = value;
                onChanged();
                return this;
            }

            private long time_ ;
            /**
             * <code>required int64 time = 5;</code>
             */
            public boolean hasTime() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }
            /**
             * <code>required int64 time = 5;</code>
             */
            public long getTime() {
                return time_;
            }
            /**
             * <code>required int64 time = 5;</code>
             */
            public Builder setTime(long value) {
                bitField0_ |= 0x00000010;
                time_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 time = 5;</code>
             */
            public Builder clearTime() {
                bitField0_ = (bitField0_ & ~0x00000010);
                time_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.McsAlarm)
        }

        static {
            defaultInstance = new McsAlarm(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.McsAlarm)
    }

    public interface McsDriveStatusOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.McsDriveStatus)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required bool processing = 1;</code>
         */
        boolean hasProcessing();
        /**
         * <code>required bool processing = 1;</code>
         */
        boolean getProcessing();

        /**
         * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
         */
        boolean hasLifecycle();
        /**
         * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle getLifecycle();

        /**
         * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
         */
        boolean hasAzstate();
        /**
         * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate getAzstate();

        /**
         * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
         */
        boolean hasElstate();
        /**
         * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate getElstate();

        /**
         * <code>required bool azMotorTemps = 5;</code>
         */
        boolean hasAzMotorTemps();
        /**
         * <code>required bool azMotorTemps = 5;</code>
         */
        boolean getAzMotorTemps();

        /**
         * <code>required bool elMotorTemps = 6;</code>
         */
        boolean hasElMotorTemps();
        /**
         * <code>required bool elMotorTemps = 6;</code>
         */
        boolean getElMotorTemps();

        /**
         * <code>required bool azAmplTemps = 7;</code>
         */
        boolean hasAzAmplTemps();
        /**
         * <code>required bool azAmplTemps = 7;</code>
         */
        boolean getAzAmplTemps();

        /**
         * <code>required bool elAmplTemps = 8;</code>
         */
        boolean hasElAmplTemps();
        /**
         * <code>required bool elAmplTemps = 8;</code>
         */
        boolean getElAmplTemps();

        /**
         * <code>required bool azLimits = 9;</code>
         */
        boolean hasAzLimits();
        /**
         * <code>required bool azLimits = 9;</code>
         */
        boolean getAzLimits();

        /**
         * <code>required bool elLimits = 10;</code>
         */
        boolean hasElLimits();
        /**
         * <code>required bool elLimits = 10;</code>
         */
        boolean getElLimits();

        /**
         * <code>required bool mcsDiagEnabled = 11;</code>
         */
        boolean hasMcsDiagEnabled();
        /**
         * <code>required bool mcsDiagEnabled = 11;</code>
         */
        boolean getMcsDiagEnabled();

        /**
         * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
         */
        boolean hasServoTestMon();
        /**
         * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon getServoTestMon();

        /**
         * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
         */
        boolean hasLocalEnum();
        /**
         * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local getLocalEnum();

        /**
         * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
         */
        boolean hasControlRight();
        /**
         * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight getControlRight();

        /**
         * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
         */
        boolean hasAzDriveMode();
        /**
         * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode getAzDriveMode();

        /**
         * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
         */
        boolean hasElDriveMode();
        /**
         * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
         */
        org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode getElDriveMode();

        /**
         * <code>required bool azBrakeReleased = 17;</code>
         */
        boolean hasAzBrakeReleased();
        /**
         * <code>required bool azBrakeReleased = 17;</code>
         */
        boolean getAzBrakeReleased();

        /**
         * <code>required bool elBrakeReleased = 18;</code>
         */
        boolean hasElBrakeReleased();
        /**
         * <code>required bool elBrakeReleased = 18;</code>
         */
        boolean getElBrakeReleased();

        /**
         * <code>required bool azWrapBrakeReleased = 19;</code>
         */
        boolean hasAzWrapBrakeReleased();
        /**
         * <code>required bool azWrapBrakeReleased = 19;</code>
         */
        boolean getAzWrapBrakeReleased();

        /**
         * <code>required bool azServoOnOpn = 20;</code>
         */
        boolean hasAzServoOnOpn();
        /**
         * <code>required bool azServoOnOpn = 20;</code>
         */
        boolean getAzServoOnOpn();

        /**
         * <code>required bool azServoOnRdy = 21;</code>
         */
        boolean hasAzServoOnRdy();
        /**
         * <code>required bool azServoOnRdy = 21;</code>
         */
        boolean getAzServoOnRdy();

        /**
         * <code>required bool elServoOnOpn = 22;</code>
         */
        boolean hasElServoOnOpn();
        /**
         * <code>required bool elServoOnOpn = 22;</code>
         */
        boolean getElServoOnOpn();

        /**
         * <code>required bool elServoOnRdy = 23;</code>
         */
        boolean hasElServoOnRdy();
        /**
         * <code>required bool elServoOnRdy = 23;</code>
         */
        boolean getElServoOnRdy();

        /**
         * <code>required bool azLimitRecoveryOpn = 24;</code>
         */
        boolean hasAzLimitRecoveryOpn();
        /**
         * <code>required bool azLimitRecoveryOpn = 24;</code>
         */
        boolean getAzLimitRecoveryOpn();

        /**
         * <code>required bool azLimitRecoveryRdy = 25;</code>
         */
        boolean hasAzLimitRecoveryRdy();
        /**
         * <code>required bool azLimitRecoveryRdy = 25;</code>
         */
        boolean getAzLimitRecoveryRdy();

        /**
         * <code>required bool elLimitRecoveryOpn = 26;</code>
         */
        boolean hasElLimitRecoveryOpn();
        /**
         * <code>required bool elLimitRecoveryOpn = 26;</code>
         */
        boolean getElLimitRecoveryOpn();

        /**
         * <code>required bool elLimitRecoveryRdy = 27;</code>
         */
        boolean hasElLimitRecoveryRdy();
        /**
         * <code>required bool elLimitRecoveryRdy = 27;</code>
         */
        boolean getElLimitRecoveryRdy();

        /**
         * <code>required bool azWrapServoOnOpn = 28;</code>
         */
        boolean hasAzWrapServoOnOpn();
        /**
         * <code>required bool azWrapServoOnOpn = 28;</code>
         */
        boolean getAzWrapServoOnOpn();

        /**
         * <code>required bool wrapServoOnRdy = 29;</code>
         */
        boolean hasWrapServoOnRdy();
        /**
         * <code>required bool wrapServoOnRdy = 29;</code>
         */
        boolean getWrapServoOnRdy();

        /**
         * <code>required bool wrapLimitRecoveryOpn = 30;</code>
         */
        boolean hasWrapLimitRecoveryOpn();
        /**
         * <code>required bool wrapLimitRecoveryOpn = 30;</code>
         */
        boolean getWrapLimitRecoveryOpn();

        /**
         * <code>required bool wrapLimitRecoveryRdy = 31;</code>
         */
        boolean hasWrapLimitRecoveryRdy();
        /**
         * <code>required bool wrapLimitRecoveryRdy = 31;</code>
         */
        boolean getWrapLimitRecoveryRdy();

        /**
         * <code>required bool azOverlap = 32;</code>
         */
        boolean hasAzOverlap();
        /**
         * <code>required bool azOverlap = 32;</code>
         */
        boolean getAzOverlap();

        /**
         * <code>required bool azAbsIncDeviationLimit = 33;</code>
         */
        boolean hasAzAbsIncDeviationLimit();
        /**
         * <code>required bool azAbsIncDeviationLimit = 33;</code>
         */
        boolean getAzAbsIncDeviationLimit();

        /**
         * <code>required bool elAbsIncDeviationLimit = 34;</code>
         */
        boolean hasElAbsIncDeviationLimit();
        /**
         * <code>required bool elAbsIncDeviationLimit = 34;</code>
         */
        boolean getElAbsIncDeviationLimit();

        /**
         * <code>required bool azEncdrUnitInitFin = 35;</code>
         */
        boolean hasAzEncdrUnitInitFin();
        /**
         * <code>required bool azEncdrUnitInitFin = 35;</code>
         */
        boolean getAzEncdrUnitInitFin();

        /**
         * <code>required bool elEncdrUnitInitFin = 36;</code>
         */
        boolean hasElEncdrUnitInitFin();
        /**
         * <code>required bool elEncdrUnitInitFin = 36;</code>
         */
        boolean getElEncdrUnitInitFin();

        /**
         * <code>required bool absEncdrUnitInitFin = 37;</code>
         */
        boolean hasAbsEncdrUnitInitFin();
        /**
         * <code>required bool absEncdrUnitInitFin = 37;</code>
         */
        boolean getAbsEncdrUnitInitFin();

        /**
         * <code>required bool azDatumOpn = 38;</code>
         */
        boolean hasAzDatumOpn();
        /**
         * <code>required bool azDatumOpn = 38;</code>
         */
        boolean getAzDatumOpn();

        /**
         * <code>required bool elDatumOpn = 39;</code>
         */
        boolean hasElDatumOpn();
        /**
         * <code>required bool elDatumOpn = 39;</code>
         */
        boolean getElDatumOpn();

        /**
         * <code>required bool azDatumRun = 40;</code>
         */
        boolean hasAzDatumRun();
        /**
         * <code>required bool azDatumRun = 40;</code>
         */
        boolean getAzDatumRun();

        /**
         * <code>required bool elDatumRun = 41;</code>
         */
        boolean hasElDatumRun();
        /**
         * <code>required bool elDatumRun = 41;</code>
         */
        boolean getElDatumRun();

        /**
         * <code>required bool azDatumRdy = 42;</code>
         */
        boolean hasAzDatumRdy();
        /**
         * <code>required bool azDatumRdy = 42;</code>
         */
        boolean getAzDatumRdy();

        /**
         * <code>required bool elDatumRdy = 43;</code>
         */
        boolean hasElDatumRdy();
        /**
         * <code>required bool elDatumRdy = 43;</code>
         */
        boolean getElDatumRdy();

        /**
         * <code>required bool azEncdrDatumed = 44;</code>
         */
        boolean hasAzEncdrDatumed();
        /**
         * <code>required bool azEncdrDatumed = 44;</code>
         */
        boolean getAzEncdrDatumed();

        /**
         * <code>required bool elEncdrDatumed = 45;</code>
         */
        boolean hasElEncdrDatumed();
        /**
         * <code>required bool elEncdrDatumed = 45;</code>
         */
        boolean getElEncdrDatumed();

        /**
         * <code>required bool azEncdrHeadNotUsed = 46;</code>
         */
        boolean hasAzEncdrHeadNotUsed();
        /**
         * <code>required bool azEncdrHeadNotUsed = 46;</code>
         */
        boolean getAzEncdrHeadNotUsed();

        /**
         * <code>required bool elEncdrHeadNotUsed = 47;</code>
         */
        boolean hasElEncdrHeadNotUsed();
        /**
         * <code>required bool elEncdrHeadNotUsed = 47;</code>
         */
        boolean getElEncdrHeadNotUsed();

        /**
         * <code>required bool azAbsEncdrNotUsed = 48;</code>
         */
        boolean hasAzAbsEncdrNotUsed();
        /**
         * <code>required bool azAbsEncdrNotUsed = 48;</code>
         */
        boolean getAzAbsEncdrNotUsed();

        /**
         * <code>required bool elAbsEncdrNotUsed = 49;</code>
         */
        boolean hasElAbsEncdrNotUsed();
        /**
         * <code>required bool elAbsEncdrNotUsed = 49;</code>
         */
        boolean getElAbsEncdrNotUsed();

        /**
         * <code>required bool azAmplNotUsed = 50;</code>
         */
        boolean hasAzAmplNotUsed();
        /**
         * <code>required bool azAmplNotUsed = 50;</code>
         */
        boolean getAzAmplNotUsed();

        /**
         * <code>required bool elAmplNotUsed = 51;</code>
         */
        boolean hasElAmplNotUsed();
        /**
         * <code>required bool elAmplNotUsed = 51;</code>
         */
        boolean getElAmplNotUsed();

        /**
         * <code>required bool stowPosnOpn = 52;</code>
         */
        boolean hasStowPosnOpn();
        /**
         * <code>required bool stowPosnOpn = 52;</code>
         */
        boolean getStowPosnOpn();

        /**
         * <code>required bool stowPosnRun = 53;</code>
         */
        boolean hasStowPosnRun();
        /**
         * <code>required bool stowPosnRun = 53;</code>
         */
        boolean getStowPosnRun();

        /**
         * <code>required bool stowPosnRdy = 54;</code>
         */
        boolean hasStowPosnRdy();
        /**
         * <code>required bool stowPosnRdy = 54;</code>
         */
        boolean getStowPosnRdy();

        /**
         * <code>required bool stowInsrOpn = 55;</code>
         */
        boolean hasStowInsrOpn();
        /**
         * <code>required bool stowInsrOpn = 55;</code>
         */
        boolean getStowInsrOpn();

        /**
         * <code>required bool stowInsrRun = 56;</code>
         */
        boolean hasStowInsrRun();
        /**
         * <code>required bool stowInsrRun = 56;</code>
         */
        boolean getStowInsrRun();

        /**
         * <code>required bool stowInsrRdy = 57;</code>
         */
        boolean hasStowInsrRdy();
        /**
         * <code>required bool stowInsrRdy = 57;</code>
         */
        boolean getStowInsrRdy();

        /**
         * <code>required bool stowRetrOpn = 58;</code>
         */
        boolean hasStowRetrOpn();
        /**
         * <code>required bool stowRetrOpn = 58;</code>
         */
        boolean getStowRetrOpn();

        /**
         * <code>required bool stowRetrRun = 59;</code>
         */
        boolean hasStowRetrRun();
        /**
         * <code>required bool stowRetrRun = 59;</code>
         */
        boolean getStowRetrRun();

        /**
         * <code>required bool stowRetrRdy = 60;</code>
         */
        boolean hasStowRetrRdy();
        /**
         * <code>required bool stowRetrRdy = 60;</code>
         */
        boolean getStowRetrRdy();

        /**
         * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
         */
        boolean hasAzTapeEncdrDataLeapDet();
        /**
         * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
         */
        boolean getAzTapeEncdrDataLeapDet();

        /**
         * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
         */
        boolean hasElTapeEncdrDataLeapDet();
        /**
         * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
         */
        boolean getElTapeEncdrDataLeapDet();

        /**
         * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
         */
        boolean hasAzAbsEncdrDataLeapDet();
        /**
         * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
         */
        boolean getAzAbsEncdrDataLeapDet();

        /**
         * <code>required int64 time = 64;</code>
         *
         * <pre>
         *required bool azMotorTemps = 64;
         *required bool elMotorTemps = 64;
         * </pre>
         */
        boolean hasTime();
        /**
         * <code>required int64 time = 64;</code>
         *
         * <pre>
         *required bool azMotorTemps = 64;
         *required bool elMotorTemps = 64;
         * </pre>
         */
        long getTime();
    }
    /**
     * Protobuf type {@code eventpoc.McsDriveStatus}
     */
    public static final class McsDriveStatus extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.McsDriveStatus)
            McsDriveStatusOrBuilder {
        // Use McsDriveStatus.newBuilder() to construct.
        private McsDriveStatus(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private McsDriveStatus(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final McsDriveStatus defaultInstance;
        public static McsDriveStatus getDefaultInstance() {
            return defaultInstance;
        }

        public McsDriveStatus getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private McsDriveStatus(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            int mutable_bitField1_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            processing_ = input.readBool();
                            break;
                        }
                        case 16: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(2, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                lifecycle_ = value;
                            }
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                azstate_ = value;
                            }
                            break;
                        }
                        case 32: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(4, rawValue);
                            } else {
                                bitField0_ |= 0x00000008;
                                elstate_ = value;
                            }
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            azMotorTemps_ = input.readBool();
                            break;
                        }
                        case 48: {
                            bitField0_ |= 0x00000020;
                            elMotorTemps_ = input.readBool();
                            break;
                        }
                        case 56: {
                            bitField0_ |= 0x00000040;
                            azAmplTemps_ = input.readBool();
                            break;
                        }
                        case 64: {
                            bitField0_ |= 0x00000080;
                            elAmplTemps_ = input.readBool();
                            break;
                        }
                        case 72: {
                            bitField0_ |= 0x00000100;
                            azLimits_ = input.readBool();
                            break;
                        }
                        case 80: {
                            bitField0_ |= 0x00000200;
                            elLimits_ = input.readBool();
                            break;
                        }
                        case 88: {
                            bitField0_ |= 0x00000400;
                            mcsDiagEnabled_ = input.readBool();
                            break;
                        }
                        case 96: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(12, rawValue);
                            } else {
                                bitField0_ |= 0x00000800;
                                servoTestMon_ = value;
                            }
                            break;
                        }
                        case 104: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(13, rawValue);
                            } else {
                                bitField0_ |= 0x00001000;
                                localEnum_ = value;
                            }
                            break;
                        }
                        case 112: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(14, rawValue);
                            } else {
                                bitField0_ |= 0x00002000;
                                controlRight_ = value;
                            }
                            break;
                        }
                        case 120: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(15, rawValue);
                            } else {
                                bitField0_ |= 0x00004000;
                                azDriveMode_ = value;
                            }
                            break;
                        }
                        case 128: {
                            int rawValue = input.readEnum();
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode value = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(16, rawValue);
                            } else {
                                bitField0_ |= 0x00008000;
                                elDriveMode_ = value;
                            }
                            break;
                        }
                        case 136: {
                            bitField0_ |= 0x00010000;
                            azBrakeReleased_ = input.readBool();
                            break;
                        }
                        case 144: {
                            bitField0_ |= 0x00020000;
                            elBrakeReleased_ = input.readBool();
                            break;
                        }
                        case 152: {
                            bitField0_ |= 0x00040000;
                            azWrapBrakeReleased_ = input.readBool();
                            break;
                        }
                        case 160: {
                            bitField0_ |= 0x00080000;
                            azServoOnOpn_ = input.readBool();
                            break;
                        }
                        case 168: {
                            bitField0_ |= 0x00100000;
                            azServoOnRdy_ = input.readBool();
                            break;
                        }
                        case 176: {
                            bitField0_ |= 0x00200000;
                            elServoOnOpn_ = input.readBool();
                            break;
                        }
                        case 184: {
                            bitField0_ |= 0x00400000;
                            elServoOnRdy_ = input.readBool();
                            break;
                        }
                        case 192: {
                            bitField0_ |= 0x00800000;
                            azLimitRecoveryOpn_ = input.readBool();
                            break;
                        }
                        case 200: {
                            bitField0_ |= 0x01000000;
                            azLimitRecoveryRdy_ = input.readBool();
                            break;
                        }
                        case 208: {
                            bitField0_ |= 0x02000000;
                            elLimitRecoveryOpn_ = input.readBool();
                            break;
                        }
                        case 216: {
                            bitField0_ |= 0x04000000;
                            elLimitRecoveryRdy_ = input.readBool();
                            break;
                        }
                        case 224: {
                            bitField0_ |= 0x08000000;
                            azWrapServoOnOpn_ = input.readBool();
                            break;
                        }
                        case 232: {
                            bitField0_ |= 0x10000000;
                            wrapServoOnRdy_ = input.readBool();
                            break;
                        }
                        case 240: {
                            bitField0_ |= 0x20000000;
                            wrapLimitRecoveryOpn_ = input.readBool();
                            break;
                        }
                        case 248: {
                            bitField0_ |= 0x40000000;
                            wrapLimitRecoveryRdy_ = input.readBool();
                            break;
                        }
                        case 256: {
                            bitField0_ |= 0x80000000;
                            azOverlap_ = input.readBool();
                            break;
                        }
                        case 264: {
                            bitField1_ |= 0x00000001;
                            azAbsIncDeviationLimit_ = input.readBool();
                            break;
                        }
                        case 272: {
                            bitField1_ |= 0x00000002;
                            elAbsIncDeviationLimit_ = input.readBool();
                            break;
                        }
                        case 280: {
                            bitField1_ |= 0x00000004;
                            azEncdrUnitInitFin_ = input.readBool();
                            break;
                        }
                        case 288: {
                            bitField1_ |= 0x00000008;
                            elEncdrUnitInitFin_ = input.readBool();
                            break;
                        }
                        case 296: {
                            bitField1_ |= 0x00000010;
                            absEncdrUnitInitFin_ = input.readBool();
                            break;
                        }
                        case 304: {
                            bitField1_ |= 0x00000020;
                            azDatumOpn_ = input.readBool();
                            break;
                        }
                        case 312: {
                            bitField1_ |= 0x00000040;
                            elDatumOpn_ = input.readBool();
                            break;
                        }
                        case 320: {
                            bitField1_ |= 0x00000080;
                            azDatumRun_ = input.readBool();
                            break;
                        }
                        case 328: {
                            bitField1_ |= 0x00000100;
                            elDatumRun_ = input.readBool();
                            break;
                        }
                        case 336: {
                            bitField1_ |= 0x00000200;
                            azDatumRdy_ = input.readBool();
                            break;
                        }
                        case 344: {
                            bitField1_ |= 0x00000400;
                            elDatumRdy_ = input.readBool();
                            break;
                        }
                        case 352: {
                            bitField1_ |= 0x00000800;
                            azEncdrDatumed_ = input.readBool();
                            break;
                        }
                        case 360: {
                            bitField1_ |= 0x00001000;
                            elEncdrDatumed_ = input.readBool();
                            break;
                        }
                        case 368: {
                            bitField1_ |= 0x00002000;
                            azEncdrHeadNotUsed_ = input.readBool();
                            break;
                        }
                        case 376: {
                            bitField1_ |= 0x00004000;
                            elEncdrHeadNotUsed_ = input.readBool();
                            break;
                        }
                        case 384: {
                            bitField1_ |= 0x00008000;
                            azAbsEncdrNotUsed_ = input.readBool();
                            break;
                        }
                        case 392: {
                            bitField1_ |= 0x00010000;
                            elAbsEncdrNotUsed_ = input.readBool();
                            break;
                        }
                        case 400: {
                            bitField1_ |= 0x00020000;
                            azAmplNotUsed_ = input.readBool();
                            break;
                        }
                        case 408: {
                            bitField1_ |= 0x00040000;
                            elAmplNotUsed_ = input.readBool();
                            break;
                        }
                        case 416: {
                            bitField1_ |= 0x00080000;
                            stowPosnOpn_ = input.readBool();
                            break;
                        }
                        case 424: {
                            bitField1_ |= 0x00100000;
                            stowPosnRun_ = input.readBool();
                            break;
                        }
                        case 432: {
                            bitField1_ |= 0x00200000;
                            stowPosnRdy_ = input.readBool();
                            break;
                        }
                        case 440: {
                            bitField1_ |= 0x00400000;
                            stowInsrOpn_ = input.readBool();
                            break;
                        }
                        case 448: {
                            bitField1_ |= 0x00800000;
                            stowInsrRun_ = input.readBool();
                            break;
                        }
                        case 456: {
                            bitField1_ |= 0x01000000;
                            stowInsrRdy_ = input.readBool();
                            break;
                        }
                        case 464: {
                            bitField1_ |= 0x02000000;
                            stowRetrOpn_ = input.readBool();
                            break;
                        }
                        case 472: {
                            bitField1_ |= 0x04000000;
                            stowRetrRun_ = input.readBool();
                            break;
                        }
                        case 480: {
                            bitField1_ |= 0x08000000;
                            stowRetrRdy_ = input.readBool();
                            break;
                        }
                        case 488: {
                            bitField1_ |= 0x10000000;
                            azTapeEncdrDataLeapDet_ = input.readBool();
                            break;
                        }
                        case 496: {
                            bitField1_ |= 0x20000000;
                            elTapeEncdrDataLeapDet_ = input.readBool();
                            break;
                        }
                        case 504: {
                            bitField1_ |= 0x40000000;
                            azAbsEncdrDataLeapDet_ = input.readBool();
                            break;
                        }
                        case 512: {
                            bitField1_ |= 0x80000000;
                            time_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsDriveStatus_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsDriveStatus_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Builder.class);
        }

        public static com.google.protobuf.Parser<McsDriveStatus> PARSER =
                new com.google.protobuf.AbstractParser<McsDriveStatus>() {
                    public McsDriveStatus parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new McsDriveStatus(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<McsDriveStatus> getParserForType() {
            return PARSER;
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.Lifecycle}
         */
        public enum Lifecycle
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>ready = 0;</code>
             */
            ready(0, 0),
            /**
             * <code>loaded = 1;</code>
             */
            loaded(1, 1),
            /**
             * <code>initialized = 2;</code>
             */
            initialized(2, 2),
            /**
             * <code>running = 3;</code>
             */
            running(3, 3),
            ;

            /**
             * <code>ready = 0;</code>
             */
            public static final int ready_VALUE = 0;
            /**
             * <code>loaded = 1;</code>
             */
            public static final int loaded_VALUE = 1;
            /**
             * <code>initialized = 2;</code>
             */
            public static final int initialized_VALUE = 2;
            /**
             * <code>running = 3;</code>
             */
            public static final int running_VALUE = 3;


            public final int getNumber() { return value; }

            public static Lifecycle valueOf(int value) {
                switch (value) {
                    case 0: return ready;
                    case 1: return loaded;
                    case 2: return initialized;
                    case 3: return running;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Lifecycle>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Lifecycle>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Lifecycle>() {
                        public Lifecycle findValueByNumber(int number) {
                            return Lifecycle.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(0);
            }

            private static final Lifecycle[] VALUES = values();

            public static Lifecycle valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Lifecycle(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.Lifecycle)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.Azstate}
         */
        public enum Azstate
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>az_drive_power_off = 0;</code>
             */
            az_drive_power_off(0, 0),
            /**
             * <code>az_servo_off = 1;</code>
             */
            az_servo_off(1, 1),
            /**
             * <code>az_pointing = 2;</code>
             */
            az_pointing(2, 2),
            /**
             * <code>az_servo_off_datumned = 3;</code>
             */
            az_servo_off_datumned(3, 3),
            /**
             * <code>az_pointing_datumned = 4;</code>
             */
            az_pointing_datumned(4, 4),
            /**
             * <code>az_following = 5;</code>
             */
            az_following(5, 5),
            /**
             * <code>az_faulted = 6;</code>
             */
            az_faulted(6, 6),
            ;

            /**
             * <code>az_drive_power_off = 0;</code>
             */
            public static final int az_drive_power_off_VALUE = 0;
            /**
             * <code>az_servo_off = 1;</code>
             */
            public static final int az_servo_off_VALUE = 1;
            /**
             * <code>az_pointing = 2;</code>
             */
            public static final int az_pointing_VALUE = 2;
            /**
             * <code>az_servo_off_datumned = 3;</code>
             */
            public static final int az_servo_off_datumned_VALUE = 3;
            /**
             * <code>az_pointing_datumned = 4;</code>
             */
            public static final int az_pointing_datumned_VALUE = 4;
            /**
             * <code>az_following = 5;</code>
             */
            public static final int az_following_VALUE = 5;
            /**
             * <code>az_faulted = 6;</code>
             */
            public static final int az_faulted_VALUE = 6;


            public final int getNumber() { return value; }

            public static Azstate valueOf(int value) {
                switch (value) {
                    case 0: return az_drive_power_off;
                    case 1: return az_servo_off;
                    case 2: return az_pointing;
                    case 3: return az_servo_off_datumned;
                    case 4: return az_pointing_datumned;
                    case 5: return az_following;
                    case 6: return az_faulted;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Azstate>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Azstate>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Azstate>() {
                        public Azstate findValueByNumber(int number) {
                            return Azstate.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(1);
            }

            private static final Azstate[] VALUES = values();

            public static Azstate valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Azstate(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.Azstate)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.Elstate}
         */
        public enum Elstate
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>el_drive_power_off = 0;</code>
             */
            el_drive_power_off(0, 0),
            /**
             * <code>el_servo_off = 1;</code>
             */
            el_servo_off(1, 1),
            /**
             * <code>el_pointing = 2;</code>
             */
            el_pointing(2, 2),
            /**
             * <code>el_servo_off_datumned = 3;</code>
             */
            el_servo_off_datumned(3, 3),
            /**
             * <code>el_pointing_datumned = 4;</code>
             */
            el_pointing_datumned(4, 4),
            /**
             * <code>el_following = 5;</code>
             */
            el_following(5, 5),
            /**
             * <code>el_faulted = 6;</code>
             */
            el_faulted(6, 6),
            ;

            /**
             * <code>el_drive_power_off = 0;</code>
             */
            public static final int el_drive_power_off_VALUE = 0;
            /**
             * <code>el_servo_off = 1;</code>
             */
            public static final int el_servo_off_VALUE = 1;
            /**
             * <code>el_pointing = 2;</code>
             */
            public static final int el_pointing_VALUE = 2;
            /**
             * <code>el_servo_off_datumned = 3;</code>
             */
            public static final int el_servo_off_datumned_VALUE = 3;
            /**
             * <code>el_pointing_datumned = 4;</code>
             */
            public static final int el_pointing_datumned_VALUE = 4;
            /**
             * <code>el_following = 5;</code>
             */
            public static final int el_following_VALUE = 5;
            /**
             * <code>el_faulted = 6;</code>
             */
            public static final int el_faulted_VALUE = 6;


            public final int getNumber() { return value; }

            public static Elstate valueOf(int value) {
                switch (value) {
                    case 0: return el_drive_power_off;
                    case 1: return el_servo_off;
                    case 2: return el_pointing;
                    case 3: return el_servo_off_datumned;
                    case 4: return el_pointing_datumned;
                    case 5: return el_following;
                    case 6: return el_faulted;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Elstate>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Elstate>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Elstate>() {
                        public Elstate findValueByNumber(int number) {
                            return Elstate.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(2);
            }

            private static final Elstate[] VALUES = values();

            public static Elstate valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Elstate(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.Elstate)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.ServoTestMon}
         */
        public enum ServoTestMon
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>None = 0;</code>
             */
            None(0, 0),
            /**
             * <code>AzPosn = 1;</code>
             */
            AzPosn(1, 1),
            /**
             * <code>AzMaxVal = 2;</code>
             */
            AzMaxVal(2, 2),
            /**
             * <code>AzMinVal = 3;</code>
             */
            AzMinVal(3, 3),
            /**
             * <code>ElPosn = 4;</code>
             */
            ElPosn(4, 4),
            /**
             * <code>ElMaxVal = 5;</code>
             */
            ElMaxVal(5, 5),
            /**
             * <code>ElMinVal = 6;</code>
             */
            ElMinVal(6, 6),
            ;

            /**
             * <code>None = 0;</code>
             */
            public static final int None_VALUE = 0;
            /**
             * <code>AzPosn = 1;</code>
             */
            public static final int AzPosn_VALUE = 1;
            /**
             * <code>AzMaxVal = 2;</code>
             */
            public static final int AzMaxVal_VALUE = 2;
            /**
             * <code>AzMinVal = 3;</code>
             */
            public static final int AzMinVal_VALUE = 3;
            /**
             * <code>ElPosn = 4;</code>
             */
            public static final int ElPosn_VALUE = 4;
            /**
             * <code>ElMaxVal = 5;</code>
             */
            public static final int ElMaxVal_VALUE = 5;
            /**
             * <code>ElMinVal = 6;</code>
             */
            public static final int ElMinVal_VALUE = 6;


            public final int getNumber() { return value; }

            public static ServoTestMon valueOf(int value) {
                switch (value) {
                    case 0: return None;
                    case 1: return AzPosn;
                    case 2: return AzMaxVal;
                    case 3: return AzMinVal;
                    case 4: return ElPosn;
                    case 5: return ElMaxVal;
                    case 6: return ElMinVal;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<ServoTestMon>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<ServoTestMon>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<ServoTestMon>() {
                        public ServoTestMon findValueByNumber(int number) {
                            return ServoTestMon.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(3);
            }

            private static final ServoTestMon[] VALUES = values();

            public static ServoTestMon valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private ServoTestMon(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.ServoTestMon)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.Local}
         */
        public enum Local
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>local = 0;</code>
             */
            local(0, 0),
            /**
             * <code>remote = 1;</code>
             */
            remote(1, 1),
            ;

            /**
             * <code>local = 0;</code>
             */
            public static final int local_VALUE = 0;
            /**
             * <code>remote = 1;</code>
             */
            public static final int remote_VALUE = 1;


            public final int getNumber() { return value; }

            public static Local valueOf(int value) {
                switch (value) {
                    case 0: return local;
                    case 1: return remote;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Local>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<Local>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<Local>() {
                        public Local findValueByNumber(int number) {
                            return Local.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(4);
            }

            private static final Local[] VALUES = values();

            public static Local valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Local(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.Local)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.ControlRight}
         */
        public enum ControlRight
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>MCU = 0;</code>
             */
            MCU(0, 0),
            /**
             * <code>AZ_Drv1 = 1;</code>
             */
            AZ_Drv1(1, 1),
            /**
             * <code>az_drv2 = 2;</code>
             */
            az_drv2(2, 2),
            /**
             * <code>el_drv1 = 3;</code>
             */
            el_drv1(3, 3),
            /**
             * <code>el_drv2 = 4;</code>
             */
            el_drv2(4, 4),
            /**
             * <code>eui1 = 5;</code>
             */
            eui1(5, 5),
            /**
             * <code>eui2 = 6;</code>
             */
            eui2(6, 6),
            /**
             * <code>eui3 = 7;</code>
             */
            eui3(7, 7),
            /**
             * <code>eui4 = 8;</code>
             */
            eui4(8, 8),
            /**
             * <code>eui5 = 9;</code>
             */
            eui5(9, 9),
            ;

            /**
             * <code>MCU = 0;</code>
             */
            public static final int MCU_VALUE = 0;
            /**
             * <code>AZ_Drv1 = 1;</code>
             */
            public static final int AZ_Drv1_VALUE = 1;
            /**
             * <code>az_drv2 = 2;</code>
             */
            public static final int az_drv2_VALUE = 2;
            /**
             * <code>el_drv1 = 3;</code>
             */
            public static final int el_drv1_VALUE = 3;
            /**
             * <code>el_drv2 = 4;</code>
             */
            public static final int el_drv2_VALUE = 4;
            /**
             * <code>eui1 = 5;</code>
             */
            public static final int eui1_VALUE = 5;
            /**
             * <code>eui2 = 6;</code>
             */
            public static final int eui2_VALUE = 6;
            /**
             * <code>eui3 = 7;</code>
             */
            public static final int eui3_VALUE = 7;
            /**
             * <code>eui4 = 8;</code>
             */
            public static final int eui4_VALUE = 8;
            /**
             * <code>eui5 = 9;</code>
             */
            public static final int eui5_VALUE = 9;


            public final int getNumber() { return value; }

            public static ControlRight valueOf(int value) {
                switch (value) {
                    case 0: return MCU;
                    case 1: return AZ_Drv1;
                    case 2: return az_drv2;
                    case 3: return el_drv1;
                    case 4: return el_drv2;
                    case 5: return eui1;
                    case 6: return eui2;
                    case 7: return eui3;
                    case 8: return eui4;
                    case 9: return eui5;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<ControlRight>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<ControlRight>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<ControlRight>() {
                        public ControlRight findValueByNumber(int number) {
                            return ControlRight.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(5);
            }

            private static final ControlRight[] VALUES = values();

            public static ControlRight valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private ControlRight(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.ControlRight)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.AzDriveMode}
         */
        public enum AzDriveMode
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>az_standby = 0;</code>
             */
            az_standby(0, 0),
            /**
             * <code>az_pointing_mode = 1;</code>
             */
            az_pointing_mode(1, 1),
            /**
             * <code>az_slewing = 2;</code>
             */
            az_slewing(2, 2),
            /**
             * <code>az_following_mode = 3;</code>
             */
            az_following_mode(3, 3),
            ;

            /**
             * <code>az_standby = 0;</code>
             */
            public static final int az_standby_VALUE = 0;
            /**
             * <code>az_pointing_mode = 1;</code>
             */
            public static final int az_pointing_mode_VALUE = 1;
            /**
             * <code>az_slewing = 2;</code>
             */
            public static final int az_slewing_VALUE = 2;
            /**
             * <code>az_following_mode = 3;</code>
             */
            public static final int az_following_mode_VALUE = 3;


            public final int getNumber() { return value; }

            public static AzDriveMode valueOf(int value) {
                switch (value) {
                    case 0: return az_standby;
                    case 1: return az_pointing_mode;
                    case 2: return az_slewing;
                    case 3: return az_following_mode;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<AzDriveMode>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<AzDriveMode>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<AzDriveMode>() {
                        public AzDriveMode findValueByNumber(int number) {
                            return AzDriveMode.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(6);
            }

            private static final AzDriveMode[] VALUES = values();

            public static AzDriveMode valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private AzDriveMode(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.AzDriveMode)
        }

        /**
         * Protobuf enum {@code eventpoc.McsDriveStatus.ElDriveMode}
         */
        public enum ElDriveMode
                implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>el_standby = 0;</code>
             */
            el_standby(0, 0),
            /**
             * <code>el_pointing_mode = 1;</code>
             */
            el_pointing_mode(1, 1),
            /**
             * <code>el_slewing = 2;</code>
             */
            el_slewing(2, 2),
            /**
             * <code>el_following_mode = 3;</code>
             */
            el_following_mode(3, 3),
            ;

            /**
             * <code>el_standby = 0;</code>
             */
            public static final int el_standby_VALUE = 0;
            /**
             * <code>el_pointing_mode = 1;</code>
             */
            public static final int el_pointing_mode_VALUE = 1;
            /**
             * <code>el_slewing = 2;</code>
             */
            public static final int el_slewing_VALUE = 2;
            /**
             * <code>el_following_mode = 3;</code>
             */
            public static final int el_following_mode_VALUE = 3;


            public final int getNumber() { return value; }

            public static ElDriveMode valueOf(int value) {
                switch (value) {
                    case 0: return el_standby;
                    case 1: return el_pointing_mode;
                    case 2: return el_slewing;
                    case 3: return el_following_mode;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<ElDriveMode>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static com.google.protobuf.Internal.EnumLiteMap<ElDriveMode>
                    internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<ElDriveMode>() {
                        public ElDriveMode findValueByNumber(int number) {
                            return ElDriveMode.valueOf(number);
                        }
                    };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }
            public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
                return getDescriptor();
            }
            public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDescriptor().getEnumTypes().get(7);
            }

            private static final ElDriveMode[] VALUES = values();

            public static ElDriveMode valueOf(
                    com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException(
                            "EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private ElDriveMode(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:eventpoc.McsDriveStatus.ElDriveMode)
        }

        private int bitField0_;
        private int bitField1_;
        public static final int PROCESSING_FIELD_NUMBER = 1;
        private boolean processing_;
        /**
         * <code>required bool processing = 1;</code>
         */
        public boolean hasProcessing() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required bool processing = 1;</code>
         */
        public boolean getProcessing() {
            return processing_;
        }

        public static final int LIFECYCLE_FIELD_NUMBER = 2;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle lifecycle_;
        /**
         * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
         */
        public boolean hasLifecycle() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle getLifecycle() {
            return lifecycle_;
        }

        public static final int AZSTATE_FIELD_NUMBER = 3;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate azstate_;
        /**
         * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
         */
        public boolean hasAzstate() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate getAzstate() {
            return azstate_;
        }

        public static final int ELSTATE_FIELD_NUMBER = 4;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate elstate_;
        /**
         * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
         */
        public boolean hasElstate() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate getElstate() {
            return elstate_;
        }

        public static final int AZMOTORTEMPS_FIELD_NUMBER = 5;
        private boolean azMotorTemps_;
        /**
         * <code>required bool azMotorTemps = 5;</code>
         */
        public boolean hasAzMotorTemps() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required bool azMotorTemps = 5;</code>
         */
        public boolean getAzMotorTemps() {
            return azMotorTemps_;
        }

        public static final int ELMOTORTEMPS_FIELD_NUMBER = 6;
        private boolean elMotorTemps_;
        /**
         * <code>required bool elMotorTemps = 6;</code>
         */
        public boolean hasElMotorTemps() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required bool elMotorTemps = 6;</code>
         */
        public boolean getElMotorTemps() {
            return elMotorTemps_;
        }

        public static final int AZAMPLTEMPS_FIELD_NUMBER = 7;
        private boolean azAmplTemps_;
        /**
         * <code>required bool azAmplTemps = 7;</code>
         */
        public boolean hasAzAmplTemps() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required bool azAmplTemps = 7;</code>
         */
        public boolean getAzAmplTemps() {
            return azAmplTemps_;
        }

        public static final int ELAMPLTEMPS_FIELD_NUMBER = 8;
        private boolean elAmplTemps_;
        /**
         * <code>required bool elAmplTemps = 8;</code>
         */
        public boolean hasElAmplTemps() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required bool elAmplTemps = 8;</code>
         */
        public boolean getElAmplTemps() {
            return elAmplTemps_;
        }

        public static final int AZLIMITS_FIELD_NUMBER = 9;
        private boolean azLimits_;
        /**
         * <code>required bool azLimits = 9;</code>
         */
        public boolean hasAzLimits() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>required bool azLimits = 9;</code>
         */
        public boolean getAzLimits() {
            return azLimits_;
        }

        public static final int ELLIMITS_FIELD_NUMBER = 10;
        private boolean elLimits_;
        /**
         * <code>required bool elLimits = 10;</code>
         */
        public boolean hasElLimits() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>required bool elLimits = 10;</code>
         */
        public boolean getElLimits() {
            return elLimits_;
        }

        public static final int MCSDIAGENABLED_FIELD_NUMBER = 11;
        private boolean mcsDiagEnabled_;
        /**
         * <code>required bool mcsDiagEnabled = 11;</code>
         */
        public boolean hasMcsDiagEnabled() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>required bool mcsDiagEnabled = 11;</code>
         */
        public boolean getMcsDiagEnabled() {
            return mcsDiagEnabled_;
        }

        public static final int SERVOTESTMON_FIELD_NUMBER = 12;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon servoTestMon_;
        /**
         * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
         */
        public boolean hasServoTestMon() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon getServoTestMon() {
            return servoTestMon_;
        }

        public static final int LOCAL_ENUM_FIELD_NUMBER = 13;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local localEnum_;
        /**
         * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
         */
        public boolean hasLocalEnum() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local getLocalEnum() {
            return localEnum_;
        }

        public static final int CONTROLRIGHT_FIELD_NUMBER = 14;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight controlRight_;
        /**
         * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
         */
        public boolean hasControlRight() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight getControlRight() {
            return controlRight_;
        }

        public static final int AZDRIVEMODE_FIELD_NUMBER = 15;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode azDriveMode_;
        /**
         * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
         */
        public boolean hasAzDriveMode() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode getAzDriveMode() {
            return azDriveMode_;
        }

        public static final int ELDRIVEMODE_FIELD_NUMBER = 16;
        private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode elDriveMode_;
        /**
         * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
         */
        public boolean hasElDriveMode() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
         */
        public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode getElDriveMode() {
            return elDriveMode_;
        }

        public static final int AZBRAKERELEASED_FIELD_NUMBER = 17;
        private boolean azBrakeReleased_;
        /**
         * <code>required bool azBrakeReleased = 17;</code>
         */
        public boolean hasAzBrakeReleased() {
            return ((bitField0_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>required bool azBrakeReleased = 17;</code>
         */
        public boolean getAzBrakeReleased() {
            return azBrakeReleased_;
        }

        public static final int ELBRAKERELEASED_FIELD_NUMBER = 18;
        private boolean elBrakeReleased_;
        /**
         * <code>required bool elBrakeReleased = 18;</code>
         */
        public boolean hasElBrakeReleased() {
            return ((bitField0_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>required bool elBrakeReleased = 18;</code>
         */
        public boolean getElBrakeReleased() {
            return elBrakeReleased_;
        }

        public static final int AZWRAPBRAKERELEASED_FIELD_NUMBER = 19;
        private boolean azWrapBrakeReleased_;
        /**
         * <code>required bool azWrapBrakeReleased = 19;</code>
         */
        public boolean hasAzWrapBrakeReleased() {
            return ((bitField0_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>required bool azWrapBrakeReleased = 19;</code>
         */
        public boolean getAzWrapBrakeReleased() {
            return azWrapBrakeReleased_;
        }

        public static final int AZSERVOONOPN_FIELD_NUMBER = 20;
        private boolean azServoOnOpn_;
        /**
         * <code>required bool azServoOnOpn = 20;</code>
         */
        public boolean hasAzServoOnOpn() {
            return ((bitField0_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>required bool azServoOnOpn = 20;</code>
         */
        public boolean getAzServoOnOpn() {
            return azServoOnOpn_;
        }

        public static final int AZSERVOONRDY_FIELD_NUMBER = 21;
        private boolean azServoOnRdy_;
        /**
         * <code>required bool azServoOnRdy = 21;</code>
         */
        public boolean hasAzServoOnRdy() {
            return ((bitField0_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>required bool azServoOnRdy = 21;</code>
         */
        public boolean getAzServoOnRdy() {
            return azServoOnRdy_;
        }

        public static final int ELSERVOONOPN_FIELD_NUMBER = 22;
        private boolean elServoOnOpn_;
        /**
         * <code>required bool elServoOnOpn = 22;</code>
         */
        public boolean hasElServoOnOpn() {
            return ((bitField0_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>required bool elServoOnOpn = 22;</code>
         */
        public boolean getElServoOnOpn() {
            return elServoOnOpn_;
        }

        public static final int ELSERVOONRDY_FIELD_NUMBER = 23;
        private boolean elServoOnRdy_;
        /**
         * <code>required bool elServoOnRdy = 23;</code>
         */
        public boolean hasElServoOnRdy() {
            return ((bitField0_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>required bool elServoOnRdy = 23;</code>
         */
        public boolean getElServoOnRdy() {
            return elServoOnRdy_;
        }

        public static final int AZLIMITRECOVERYOPN_FIELD_NUMBER = 24;
        private boolean azLimitRecoveryOpn_;
        /**
         * <code>required bool azLimitRecoveryOpn = 24;</code>
         */
        public boolean hasAzLimitRecoveryOpn() {
            return ((bitField0_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>required bool azLimitRecoveryOpn = 24;</code>
         */
        public boolean getAzLimitRecoveryOpn() {
            return azLimitRecoveryOpn_;
        }

        public static final int AZLIMITRECOVERYRDY_FIELD_NUMBER = 25;
        private boolean azLimitRecoveryRdy_;
        /**
         * <code>required bool azLimitRecoveryRdy = 25;</code>
         */
        public boolean hasAzLimitRecoveryRdy() {
            return ((bitField0_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>required bool azLimitRecoveryRdy = 25;</code>
         */
        public boolean getAzLimitRecoveryRdy() {
            return azLimitRecoveryRdy_;
        }

        public static final int ELLIMITRECOVERYOPN_FIELD_NUMBER = 26;
        private boolean elLimitRecoveryOpn_;
        /**
         * <code>required bool elLimitRecoveryOpn = 26;</code>
         */
        public boolean hasElLimitRecoveryOpn() {
            return ((bitField0_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>required bool elLimitRecoveryOpn = 26;</code>
         */
        public boolean getElLimitRecoveryOpn() {
            return elLimitRecoveryOpn_;
        }

        public static final int ELLIMITRECOVERYRDY_FIELD_NUMBER = 27;
        private boolean elLimitRecoveryRdy_;
        /**
         * <code>required bool elLimitRecoveryRdy = 27;</code>
         */
        public boolean hasElLimitRecoveryRdy() {
            return ((bitField0_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>required bool elLimitRecoveryRdy = 27;</code>
         */
        public boolean getElLimitRecoveryRdy() {
            return elLimitRecoveryRdy_;
        }

        public static final int AZWRAPSERVOONOPN_FIELD_NUMBER = 28;
        private boolean azWrapServoOnOpn_;
        /**
         * <code>required bool azWrapServoOnOpn = 28;</code>
         */
        public boolean hasAzWrapServoOnOpn() {
            return ((bitField0_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>required bool azWrapServoOnOpn = 28;</code>
         */
        public boolean getAzWrapServoOnOpn() {
            return azWrapServoOnOpn_;
        }

        public static final int WRAPSERVOONRDY_FIELD_NUMBER = 29;
        private boolean wrapServoOnRdy_;
        /**
         * <code>required bool wrapServoOnRdy = 29;</code>
         */
        public boolean hasWrapServoOnRdy() {
            return ((bitField0_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>required bool wrapServoOnRdy = 29;</code>
         */
        public boolean getWrapServoOnRdy() {
            return wrapServoOnRdy_;
        }

        public static final int WRAPLIMITRECOVERYOPN_FIELD_NUMBER = 30;
        private boolean wrapLimitRecoveryOpn_;
        /**
         * <code>required bool wrapLimitRecoveryOpn = 30;</code>
         */
        public boolean hasWrapLimitRecoveryOpn() {
            return ((bitField0_ & 0x20000000) == 0x20000000);
        }
        /**
         * <code>required bool wrapLimitRecoveryOpn = 30;</code>
         */
        public boolean getWrapLimitRecoveryOpn() {
            return wrapLimitRecoveryOpn_;
        }

        public static final int WRAPLIMITRECOVERYRDY_FIELD_NUMBER = 31;
        private boolean wrapLimitRecoveryRdy_;
        /**
         * <code>required bool wrapLimitRecoveryRdy = 31;</code>
         */
        public boolean hasWrapLimitRecoveryRdy() {
            return ((bitField0_ & 0x40000000) == 0x40000000);
        }
        /**
         * <code>required bool wrapLimitRecoveryRdy = 31;</code>
         */
        public boolean getWrapLimitRecoveryRdy() {
            return wrapLimitRecoveryRdy_;
        }

        public static final int AZOVERLAP_FIELD_NUMBER = 32;
        private boolean azOverlap_;
        /**
         * <code>required bool azOverlap = 32;</code>
         */
        public boolean hasAzOverlap() {
            return ((bitField0_ & 0x80000000) == 0x80000000);
        }
        /**
         * <code>required bool azOverlap = 32;</code>
         */
        public boolean getAzOverlap() {
            return azOverlap_;
        }

        public static final int AZABSINCDEVIATIONLIMIT_FIELD_NUMBER = 33;
        private boolean azAbsIncDeviationLimit_;
        /**
         * <code>required bool azAbsIncDeviationLimit = 33;</code>
         */
        public boolean hasAzAbsIncDeviationLimit() {
            return ((bitField1_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required bool azAbsIncDeviationLimit = 33;</code>
         */
        public boolean getAzAbsIncDeviationLimit() {
            return azAbsIncDeviationLimit_;
        }

        public static final int ELABSINCDEVIATIONLIMIT_FIELD_NUMBER = 34;
        private boolean elAbsIncDeviationLimit_;
        /**
         * <code>required bool elAbsIncDeviationLimit = 34;</code>
         */
        public boolean hasElAbsIncDeviationLimit() {
            return ((bitField1_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required bool elAbsIncDeviationLimit = 34;</code>
         */
        public boolean getElAbsIncDeviationLimit() {
            return elAbsIncDeviationLimit_;
        }

        public static final int AZENCDRUNITINITFIN_FIELD_NUMBER = 35;
        private boolean azEncdrUnitInitFin_;
        /**
         * <code>required bool azEncdrUnitInitFin = 35;</code>
         */
        public boolean hasAzEncdrUnitInitFin() {
            return ((bitField1_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required bool azEncdrUnitInitFin = 35;</code>
         */
        public boolean getAzEncdrUnitInitFin() {
            return azEncdrUnitInitFin_;
        }

        public static final int ELENCDRUNITINITFIN_FIELD_NUMBER = 36;
        private boolean elEncdrUnitInitFin_;
        /**
         * <code>required bool elEncdrUnitInitFin = 36;</code>
         */
        public boolean hasElEncdrUnitInitFin() {
            return ((bitField1_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required bool elEncdrUnitInitFin = 36;</code>
         */
        public boolean getElEncdrUnitInitFin() {
            return elEncdrUnitInitFin_;
        }

        public static final int ABSENCDRUNITINITFIN_FIELD_NUMBER = 37;
        private boolean absEncdrUnitInitFin_;
        /**
         * <code>required bool absEncdrUnitInitFin = 37;</code>
         */
        public boolean hasAbsEncdrUnitInitFin() {
            return ((bitField1_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required bool absEncdrUnitInitFin = 37;</code>
         */
        public boolean getAbsEncdrUnitInitFin() {
            return absEncdrUnitInitFin_;
        }

        public static final int AZDATUMOPN_FIELD_NUMBER = 38;
        private boolean azDatumOpn_;
        /**
         * <code>required bool azDatumOpn = 38;</code>
         */
        public boolean hasAzDatumOpn() {
            return ((bitField1_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required bool azDatumOpn = 38;</code>
         */
        public boolean getAzDatumOpn() {
            return azDatumOpn_;
        }

        public static final int ELDATUMOPN_FIELD_NUMBER = 39;
        private boolean elDatumOpn_;
        /**
         * <code>required bool elDatumOpn = 39;</code>
         */
        public boolean hasElDatumOpn() {
            return ((bitField1_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required bool elDatumOpn = 39;</code>
         */
        public boolean getElDatumOpn() {
            return elDatumOpn_;
        }

        public static final int AZDATUMRUN_FIELD_NUMBER = 40;
        private boolean azDatumRun_;
        /**
         * <code>required bool azDatumRun = 40;</code>
         */
        public boolean hasAzDatumRun() {
            return ((bitField1_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required bool azDatumRun = 40;</code>
         */
        public boolean getAzDatumRun() {
            return azDatumRun_;
        }

        public static final int ELDATUMRUN_FIELD_NUMBER = 41;
        private boolean elDatumRun_;
        /**
         * <code>required bool elDatumRun = 41;</code>
         */
        public boolean hasElDatumRun() {
            return ((bitField1_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>required bool elDatumRun = 41;</code>
         */
        public boolean getElDatumRun() {
            return elDatumRun_;
        }

        public static final int AZDATUMRDY_FIELD_NUMBER = 42;
        private boolean azDatumRdy_;
        /**
         * <code>required bool azDatumRdy = 42;</code>
         */
        public boolean hasAzDatumRdy() {
            return ((bitField1_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>required bool azDatumRdy = 42;</code>
         */
        public boolean getAzDatumRdy() {
            return azDatumRdy_;
        }

        public static final int ELDATUMRDY_FIELD_NUMBER = 43;
        private boolean elDatumRdy_;
        /**
         * <code>required bool elDatumRdy = 43;</code>
         */
        public boolean hasElDatumRdy() {
            return ((bitField1_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>required bool elDatumRdy = 43;</code>
         */
        public boolean getElDatumRdy() {
            return elDatumRdy_;
        }

        public static final int AZENCDRDATUMED_FIELD_NUMBER = 44;
        private boolean azEncdrDatumed_;
        /**
         * <code>required bool azEncdrDatumed = 44;</code>
         */
        public boolean hasAzEncdrDatumed() {
            return ((bitField1_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>required bool azEncdrDatumed = 44;</code>
         */
        public boolean getAzEncdrDatumed() {
            return azEncdrDatumed_;
        }

        public static final int ELENCDRDATUMED_FIELD_NUMBER = 45;
        private boolean elEncdrDatumed_;
        /**
         * <code>required bool elEncdrDatumed = 45;</code>
         */
        public boolean hasElEncdrDatumed() {
            return ((bitField1_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>required bool elEncdrDatumed = 45;</code>
         */
        public boolean getElEncdrDatumed() {
            return elEncdrDatumed_;
        }

        public static final int AZENCDRHEADNOTUSED_FIELD_NUMBER = 46;
        private boolean azEncdrHeadNotUsed_;
        /**
         * <code>required bool azEncdrHeadNotUsed = 46;</code>
         */
        public boolean hasAzEncdrHeadNotUsed() {
            return ((bitField1_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>required bool azEncdrHeadNotUsed = 46;</code>
         */
        public boolean getAzEncdrHeadNotUsed() {
            return azEncdrHeadNotUsed_;
        }

        public static final int ELENCDRHEADNOTUSED_FIELD_NUMBER = 47;
        private boolean elEncdrHeadNotUsed_;
        /**
         * <code>required bool elEncdrHeadNotUsed = 47;</code>
         */
        public boolean hasElEncdrHeadNotUsed() {
            return ((bitField1_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>required bool elEncdrHeadNotUsed = 47;</code>
         */
        public boolean getElEncdrHeadNotUsed() {
            return elEncdrHeadNotUsed_;
        }

        public static final int AZABSENCDRNOTUSED_FIELD_NUMBER = 48;
        private boolean azAbsEncdrNotUsed_;
        /**
         * <code>required bool azAbsEncdrNotUsed = 48;</code>
         */
        public boolean hasAzAbsEncdrNotUsed() {
            return ((bitField1_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>required bool azAbsEncdrNotUsed = 48;</code>
         */
        public boolean getAzAbsEncdrNotUsed() {
            return azAbsEncdrNotUsed_;
        }

        public static final int ELABSENCDRNOTUSED_FIELD_NUMBER = 49;
        private boolean elAbsEncdrNotUsed_;
        /**
         * <code>required bool elAbsEncdrNotUsed = 49;</code>
         */
        public boolean hasElAbsEncdrNotUsed() {
            return ((bitField1_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>required bool elAbsEncdrNotUsed = 49;</code>
         */
        public boolean getElAbsEncdrNotUsed() {
            return elAbsEncdrNotUsed_;
        }

        public static final int AZAMPLNOTUSED_FIELD_NUMBER = 50;
        private boolean azAmplNotUsed_;
        /**
         * <code>required bool azAmplNotUsed = 50;</code>
         */
        public boolean hasAzAmplNotUsed() {
            return ((bitField1_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>required bool azAmplNotUsed = 50;</code>
         */
        public boolean getAzAmplNotUsed() {
            return azAmplNotUsed_;
        }

        public static final int ELAMPLNOTUSED_FIELD_NUMBER = 51;
        private boolean elAmplNotUsed_;
        /**
         * <code>required bool elAmplNotUsed = 51;</code>
         */
        public boolean hasElAmplNotUsed() {
            return ((bitField1_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>required bool elAmplNotUsed = 51;</code>
         */
        public boolean getElAmplNotUsed() {
            return elAmplNotUsed_;
        }

        public static final int STOWPOSNOPN_FIELD_NUMBER = 52;
        private boolean stowPosnOpn_;
        /**
         * <code>required bool stowPosnOpn = 52;</code>
         */
        public boolean hasStowPosnOpn() {
            return ((bitField1_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>required bool stowPosnOpn = 52;</code>
         */
        public boolean getStowPosnOpn() {
            return stowPosnOpn_;
        }

        public static final int STOWPOSNRUN_FIELD_NUMBER = 53;
        private boolean stowPosnRun_;
        /**
         * <code>required bool stowPosnRun = 53;</code>
         */
        public boolean hasStowPosnRun() {
            return ((bitField1_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>required bool stowPosnRun = 53;</code>
         */
        public boolean getStowPosnRun() {
            return stowPosnRun_;
        }

        public static final int STOWPOSNRDY_FIELD_NUMBER = 54;
        private boolean stowPosnRdy_;
        /**
         * <code>required bool stowPosnRdy = 54;</code>
         */
        public boolean hasStowPosnRdy() {
            return ((bitField1_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>required bool stowPosnRdy = 54;</code>
         */
        public boolean getStowPosnRdy() {
            return stowPosnRdy_;
        }

        public static final int STOWINSROPN_FIELD_NUMBER = 55;
        private boolean stowInsrOpn_;
        /**
         * <code>required bool stowInsrOpn = 55;</code>
         */
        public boolean hasStowInsrOpn() {
            return ((bitField1_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>required bool stowInsrOpn = 55;</code>
         */
        public boolean getStowInsrOpn() {
            return stowInsrOpn_;
        }

        public static final int STOWINSRRUN_FIELD_NUMBER = 56;
        private boolean stowInsrRun_;
        /**
         * <code>required bool stowInsrRun = 56;</code>
         */
        public boolean hasStowInsrRun() {
            return ((bitField1_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>required bool stowInsrRun = 56;</code>
         */
        public boolean getStowInsrRun() {
            return stowInsrRun_;
        }

        public static final int STOWINSRRDY_FIELD_NUMBER = 57;
        private boolean stowInsrRdy_;
        /**
         * <code>required bool stowInsrRdy = 57;</code>
         */
        public boolean hasStowInsrRdy() {
            return ((bitField1_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>required bool stowInsrRdy = 57;</code>
         */
        public boolean getStowInsrRdy() {
            return stowInsrRdy_;
        }

        public static final int STOWRETROPN_FIELD_NUMBER = 58;
        private boolean stowRetrOpn_;
        /**
         * <code>required bool stowRetrOpn = 58;</code>
         */
        public boolean hasStowRetrOpn() {
            return ((bitField1_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>required bool stowRetrOpn = 58;</code>
         */
        public boolean getStowRetrOpn() {
            return stowRetrOpn_;
        }

        public static final int STOWRETRRUN_FIELD_NUMBER = 59;
        private boolean stowRetrRun_;
        /**
         * <code>required bool stowRetrRun = 59;</code>
         */
        public boolean hasStowRetrRun() {
            return ((bitField1_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>required bool stowRetrRun = 59;</code>
         */
        public boolean getStowRetrRun() {
            return stowRetrRun_;
        }

        public static final int STOWRETRRDY_FIELD_NUMBER = 60;
        private boolean stowRetrRdy_;
        /**
         * <code>required bool stowRetrRdy = 60;</code>
         */
        public boolean hasStowRetrRdy() {
            return ((bitField1_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>required bool stowRetrRdy = 60;</code>
         */
        public boolean getStowRetrRdy() {
            return stowRetrRdy_;
        }

        public static final int AZTAPEENCDRDATALEAPDET_FIELD_NUMBER = 61;
        private boolean azTapeEncdrDataLeapDet_;
        /**
         * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
         */
        public boolean hasAzTapeEncdrDataLeapDet() {
            return ((bitField1_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
         */
        public boolean getAzTapeEncdrDataLeapDet() {
            return azTapeEncdrDataLeapDet_;
        }

        public static final int ELTAPEENCDRDATALEAPDET_FIELD_NUMBER = 62;
        private boolean elTapeEncdrDataLeapDet_;
        /**
         * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
         */
        public boolean hasElTapeEncdrDataLeapDet() {
            return ((bitField1_ & 0x20000000) == 0x20000000);
        }
        /**
         * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
         */
        public boolean getElTapeEncdrDataLeapDet() {
            return elTapeEncdrDataLeapDet_;
        }

        public static final int AZABSENCDRDATALEAPDET_FIELD_NUMBER = 63;
        private boolean azAbsEncdrDataLeapDet_;
        /**
         * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
         */
        public boolean hasAzAbsEncdrDataLeapDet() {
            return ((bitField1_ & 0x40000000) == 0x40000000);
        }
        /**
         * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
         */
        public boolean getAzAbsEncdrDataLeapDet() {
            return azAbsEncdrDataLeapDet_;
        }

        public static final int TIME_FIELD_NUMBER = 64;
        private long time_;
        /**
         * <code>required int64 time = 64;</code>
         *
         * <pre>
         *required bool azMotorTemps = 64;
         *required bool elMotorTemps = 64;
         * </pre>
         */
        public boolean hasTime() {
            return ((bitField1_ & 0x80000000) == 0x80000000);
        }
        /**
         * <code>required int64 time = 64;</code>
         *
         * <pre>
         *required bool azMotorTemps = 64;
         *required bool elMotorTemps = 64;
         * </pre>
         */
        public long getTime() {
            return time_;
        }

        private void initFields() {
            processing_ = false;
            lifecycle_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle.ready;
            azstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate.az_drive_power_off;
            elstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate.el_drive_power_off;
            azMotorTemps_ = false;
            elMotorTemps_ = false;
            azAmplTemps_ = false;
            elAmplTemps_ = false;
            azLimits_ = false;
            elLimits_ = false;
            mcsDiagEnabled_ = false;
            servoTestMon_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon.None;
            localEnum_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local.local;
            controlRight_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight.MCU;
            azDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode.az_standby;
            elDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode.el_standby;
            azBrakeReleased_ = false;
            elBrakeReleased_ = false;
            azWrapBrakeReleased_ = false;
            azServoOnOpn_ = false;
            azServoOnRdy_ = false;
            elServoOnOpn_ = false;
            elServoOnRdy_ = false;
            azLimitRecoveryOpn_ = false;
            azLimitRecoveryRdy_ = false;
            elLimitRecoveryOpn_ = false;
            elLimitRecoveryRdy_ = false;
            azWrapServoOnOpn_ = false;
            wrapServoOnRdy_ = false;
            wrapLimitRecoveryOpn_ = false;
            wrapLimitRecoveryRdy_ = false;
            azOverlap_ = false;
            azAbsIncDeviationLimit_ = false;
            elAbsIncDeviationLimit_ = false;
            azEncdrUnitInitFin_ = false;
            elEncdrUnitInitFin_ = false;
            absEncdrUnitInitFin_ = false;
            azDatumOpn_ = false;
            elDatumOpn_ = false;
            azDatumRun_ = false;
            elDatumRun_ = false;
            azDatumRdy_ = false;
            elDatumRdy_ = false;
            azEncdrDatumed_ = false;
            elEncdrDatumed_ = false;
            azEncdrHeadNotUsed_ = false;
            elEncdrHeadNotUsed_ = false;
            azAbsEncdrNotUsed_ = false;
            elAbsEncdrNotUsed_ = false;
            azAmplNotUsed_ = false;
            elAmplNotUsed_ = false;
            stowPosnOpn_ = false;
            stowPosnRun_ = false;
            stowPosnRdy_ = false;
            stowInsrOpn_ = false;
            stowInsrRun_ = false;
            stowInsrRdy_ = false;
            stowRetrOpn_ = false;
            stowRetrRun_ = false;
            stowRetrRdy_ = false;
            azTapeEncdrDataLeapDet_ = false;
            elTapeEncdrDataLeapDet_ = false;
            azAbsEncdrDataLeapDet_ = false;
            time_ = 0L;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasProcessing()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLifecycle()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzstate()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElstate()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzMotorTemps()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElMotorTemps()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzAmplTemps()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElAmplTemps()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzLimits()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElLimits()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMcsDiagEnabled()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasServoTestMon()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasLocalEnum()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasControlRight()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzDriveMode()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElDriveMode()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzBrakeReleased()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElBrakeReleased()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapBrakeReleased()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzServoOnOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzServoOnRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElServoOnOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElServoOnRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzLimitRecoveryOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzLimitRecoveryRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElLimitRecoveryOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElLimitRecoveryRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapServoOnOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasWrapServoOnRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasWrapLimitRecoveryOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasWrapLimitRecoveryRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzOverlap()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzAbsIncDeviationLimit()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElAbsIncDeviationLimit()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzEncdrUnitInitFin()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElEncdrUnitInitFin()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAbsEncdrUnitInitFin()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzDatumOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElDatumOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzDatumRun()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElDatumRun()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzDatumRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElDatumRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzEncdrDatumed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElEncdrDatumed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzEncdrHeadNotUsed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElEncdrHeadNotUsed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzAbsEncdrNotUsed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElAbsEncdrNotUsed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzAmplNotUsed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElAmplNotUsed()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowPosnOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowPosnRun()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowPosnRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowInsrOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowInsrRun()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowInsrRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowRetrOpn()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowRetrRun()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasStowRetrRdy()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzTapeEncdrDataLeapDet()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElTapeEncdrDataLeapDet()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzAbsEncdrDataLeapDet()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBool(1, processing_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, lifecycle_.getNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, azstate_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeEnum(4, elstate_.getNumber());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeBool(5, azMotorTemps_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeBool(6, elMotorTemps_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeBool(7, azAmplTemps_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeBool(8, elAmplTemps_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeBool(9, azLimits_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeBool(10, elLimits_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeBool(11, mcsDiagEnabled_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeEnum(12, servoTestMon_.getNumber());
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeEnum(13, localEnum_.getNumber());
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeEnum(14, controlRight_.getNumber());
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeEnum(15, azDriveMode_.getNumber());
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeEnum(16, elDriveMode_.getNumber());
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                output.writeBool(17, azBrakeReleased_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                output.writeBool(18, elBrakeReleased_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                output.writeBool(19, azWrapBrakeReleased_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                output.writeBool(20, azServoOnOpn_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                output.writeBool(21, azServoOnRdy_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                output.writeBool(22, elServoOnOpn_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                output.writeBool(23, elServoOnRdy_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                output.writeBool(24, azLimitRecoveryOpn_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                output.writeBool(25, azLimitRecoveryRdy_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                output.writeBool(26, elLimitRecoveryOpn_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                output.writeBool(27, elLimitRecoveryRdy_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                output.writeBool(28, azWrapServoOnOpn_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                output.writeBool(29, wrapServoOnRdy_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                output.writeBool(30, wrapLimitRecoveryOpn_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                output.writeBool(31, wrapLimitRecoveryRdy_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                output.writeBool(32, azOverlap_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                output.writeBool(33, azAbsIncDeviationLimit_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                output.writeBool(34, elAbsIncDeviationLimit_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                output.writeBool(35, azEncdrUnitInitFin_);
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                output.writeBool(36, elEncdrUnitInitFin_);
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                output.writeBool(37, absEncdrUnitInitFin_);
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                output.writeBool(38, azDatumOpn_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                output.writeBool(39, elDatumOpn_);
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                output.writeBool(40, azDatumRun_);
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                output.writeBool(41, elDatumRun_);
            }
            if (((bitField1_ & 0x00000200) == 0x00000200)) {
                output.writeBool(42, azDatumRdy_);
            }
            if (((bitField1_ & 0x00000400) == 0x00000400)) {
                output.writeBool(43, elDatumRdy_);
            }
            if (((bitField1_ & 0x00000800) == 0x00000800)) {
                output.writeBool(44, azEncdrDatumed_);
            }
            if (((bitField1_ & 0x00001000) == 0x00001000)) {
                output.writeBool(45, elEncdrDatumed_);
            }
            if (((bitField1_ & 0x00002000) == 0x00002000)) {
                output.writeBool(46, azEncdrHeadNotUsed_);
            }
            if (((bitField1_ & 0x00004000) == 0x00004000)) {
                output.writeBool(47, elEncdrHeadNotUsed_);
            }
            if (((bitField1_ & 0x00008000) == 0x00008000)) {
                output.writeBool(48, azAbsEncdrNotUsed_);
            }
            if (((bitField1_ & 0x00010000) == 0x00010000)) {
                output.writeBool(49, elAbsEncdrNotUsed_);
            }
            if (((bitField1_ & 0x00020000) == 0x00020000)) {
                output.writeBool(50, azAmplNotUsed_);
            }
            if (((bitField1_ & 0x00040000) == 0x00040000)) {
                output.writeBool(51, elAmplNotUsed_);
            }
            if (((bitField1_ & 0x00080000) == 0x00080000)) {
                output.writeBool(52, stowPosnOpn_);
            }
            if (((bitField1_ & 0x00100000) == 0x00100000)) {
                output.writeBool(53, stowPosnRun_);
            }
            if (((bitField1_ & 0x00200000) == 0x00200000)) {
                output.writeBool(54, stowPosnRdy_);
            }
            if (((bitField1_ & 0x00400000) == 0x00400000)) {
                output.writeBool(55, stowInsrOpn_);
            }
            if (((bitField1_ & 0x00800000) == 0x00800000)) {
                output.writeBool(56, stowInsrRun_);
            }
            if (((bitField1_ & 0x01000000) == 0x01000000)) {
                output.writeBool(57, stowInsrRdy_);
            }
            if (((bitField1_ & 0x02000000) == 0x02000000)) {
                output.writeBool(58, stowRetrOpn_);
            }
            if (((bitField1_ & 0x04000000) == 0x04000000)) {
                output.writeBool(59, stowRetrRun_);
            }
            if (((bitField1_ & 0x08000000) == 0x08000000)) {
                output.writeBool(60, stowRetrRdy_);
            }
            if (((bitField1_ & 0x10000000) == 0x10000000)) {
                output.writeBool(61, azTapeEncdrDataLeapDet_);
            }
            if (((bitField1_ & 0x20000000) == 0x20000000)) {
                output.writeBool(62, elTapeEncdrDataLeapDet_);
            }
            if (((bitField1_ & 0x40000000) == 0x40000000)) {
                output.writeBool(63, azAbsEncdrDataLeapDet_);
            }
            if (((bitField1_ & 0x80000000) == 0x80000000)) {
                output.writeInt64(64, time_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(1, processing_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(2, lifecycle_.getNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(3, azstate_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(4, elstate_.getNumber());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(5, azMotorTemps_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(6, elMotorTemps_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(7, azAmplTemps_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(8, elAmplTemps_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(9, azLimits_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(10, elLimits_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(11, mcsDiagEnabled_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(12, servoTestMon_.getNumber());
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(13, localEnum_.getNumber());
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(14, controlRight_.getNumber());
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(15, azDriveMode_.getNumber());
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeEnumSize(16, elDriveMode_.getNumber());
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(17, azBrakeReleased_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(18, elBrakeReleased_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(19, azWrapBrakeReleased_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(20, azServoOnOpn_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(21, azServoOnRdy_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(22, elServoOnOpn_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(23, elServoOnRdy_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(24, azLimitRecoveryOpn_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(25, azLimitRecoveryRdy_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(26, elLimitRecoveryOpn_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(27, elLimitRecoveryRdy_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(28, azWrapServoOnOpn_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(29, wrapServoOnRdy_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(30, wrapLimitRecoveryOpn_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(31, wrapLimitRecoveryRdy_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(32, azOverlap_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(33, azAbsIncDeviationLimit_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(34, elAbsIncDeviationLimit_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(35, azEncdrUnitInitFin_);
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(36, elEncdrUnitInitFin_);
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(37, absEncdrUnitInitFin_);
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(38, azDatumOpn_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(39, elDatumOpn_);
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(40, azDatumRun_);
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(41, elDatumRun_);
            }
            if (((bitField1_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(42, azDatumRdy_);
            }
            if (((bitField1_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(43, elDatumRdy_);
            }
            if (((bitField1_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(44, azEncdrDatumed_);
            }
            if (((bitField1_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(45, elEncdrDatumed_);
            }
            if (((bitField1_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(46, azEncdrHeadNotUsed_);
            }
            if (((bitField1_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(47, elEncdrHeadNotUsed_);
            }
            if (((bitField1_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(48, azAbsEncdrNotUsed_);
            }
            if (((bitField1_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(49, elAbsEncdrNotUsed_);
            }
            if (((bitField1_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(50, azAmplNotUsed_);
            }
            if (((bitField1_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(51, elAmplNotUsed_);
            }
            if (((bitField1_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(52, stowPosnOpn_);
            }
            if (((bitField1_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(53, stowPosnRun_);
            }
            if (((bitField1_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(54, stowPosnRdy_);
            }
            if (((bitField1_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(55, stowInsrOpn_);
            }
            if (((bitField1_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(56, stowInsrRun_);
            }
            if (((bitField1_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(57, stowInsrRdy_);
            }
            if (((bitField1_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(58, stowRetrOpn_);
            }
            if (((bitField1_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(59, stowRetrRun_);
            }
            if (((bitField1_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(60, stowRetrRdy_);
            }
            if (((bitField1_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(61, azTapeEncdrDataLeapDet_);
            }
            if (((bitField1_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(62, elTapeEncdrDataLeapDet_);
            }
            if (((bitField1_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(63, azAbsEncdrDataLeapDet_);
            }
            if (((bitField1_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(64, time_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.McsDriveStatus}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.McsDriveStatus)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatusOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsDriveStatus_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsDriveStatus_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                processing_ = false;
                bitField0_ = (bitField0_ & ~0x00000001);
                lifecycle_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle.ready;
                bitField0_ = (bitField0_ & ~0x00000002);
                azstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate.az_drive_power_off;
                bitField0_ = (bitField0_ & ~0x00000004);
                elstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate.el_drive_power_off;
                bitField0_ = (bitField0_ & ~0x00000008);
                azMotorTemps_ = false;
                bitField0_ = (bitField0_ & ~0x00000010);
                elMotorTemps_ = false;
                bitField0_ = (bitField0_ & ~0x00000020);
                azAmplTemps_ = false;
                bitField0_ = (bitField0_ & ~0x00000040);
                elAmplTemps_ = false;
                bitField0_ = (bitField0_ & ~0x00000080);
                azLimits_ = false;
                bitField0_ = (bitField0_ & ~0x00000100);
                elLimits_ = false;
                bitField0_ = (bitField0_ & ~0x00000200);
                mcsDiagEnabled_ = false;
                bitField0_ = (bitField0_ & ~0x00000400);
                servoTestMon_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon.None;
                bitField0_ = (bitField0_ & ~0x00000800);
                localEnum_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local.local;
                bitField0_ = (bitField0_ & ~0x00001000);
                controlRight_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight.MCU;
                bitField0_ = (bitField0_ & ~0x00002000);
                azDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode.az_standby;
                bitField0_ = (bitField0_ & ~0x00004000);
                elDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode.el_standby;
                bitField0_ = (bitField0_ & ~0x00008000);
                azBrakeReleased_ = false;
                bitField0_ = (bitField0_ & ~0x00010000);
                elBrakeReleased_ = false;
                bitField0_ = (bitField0_ & ~0x00020000);
                azWrapBrakeReleased_ = false;
                bitField0_ = (bitField0_ & ~0x00040000);
                azServoOnOpn_ = false;
                bitField0_ = (bitField0_ & ~0x00080000);
                azServoOnRdy_ = false;
                bitField0_ = (bitField0_ & ~0x00100000);
                elServoOnOpn_ = false;
                bitField0_ = (bitField0_ & ~0x00200000);
                elServoOnRdy_ = false;
                bitField0_ = (bitField0_ & ~0x00400000);
                azLimitRecoveryOpn_ = false;
                bitField0_ = (bitField0_ & ~0x00800000);
                azLimitRecoveryRdy_ = false;
                bitField0_ = (bitField0_ & ~0x01000000);
                elLimitRecoveryOpn_ = false;
                bitField0_ = (bitField0_ & ~0x02000000);
                elLimitRecoveryRdy_ = false;
                bitField0_ = (bitField0_ & ~0x04000000);
                azWrapServoOnOpn_ = false;
                bitField0_ = (bitField0_ & ~0x08000000);
                wrapServoOnRdy_ = false;
                bitField0_ = (bitField0_ & ~0x10000000);
                wrapLimitRecoveryOpn_ = false;
                bitField0_ = (bitField0_ & ~0x20000000);
                wrapLimitRecoveryRdy_ = false;
                bitField0_ = (bitField0_ & ~0x40000000);
                azOverlap_ = false;
                bitField0_ = (bitField0_ & ~0x80000000);
                azAbsIncDeviationLimit_ = false;
                bitField1_ = (bitField1_ & ~0x00000001);
                elAbsIncDeviationLimit_ = false;
                bitField1_ = (bitField1_ & ~0x00000002);
                azEncdrUnitInitFin_ = false;
                bitField1_ = (bitField1_ & ~0x00000004);
                elEncdrUnitInitFin_ = false;
                bitField1_ = (bitField1_ & ~0x00000008);
                absEncdrUnitInitFin_ = false;
                bitField1_ = (bitField1_ & ~0x00000010);
                azDatumOpn_ = false;
                bitField1_ = (bitField1_ & ~0x00000020);
                elDatumOpn_ = false;
                bitField1_ = (bitField1_ & ~0x00000040);
                azDatumRun_ = false;
                bitField1_ = (bitField1_ & ~0x00000080);
                elDatumRun_ = false;
                bitField1_ = (bitField1_ & ~0x00000100);
                azDatumRdy_ = false;
                bitField1_ = (bitField1_ & ~0x00000200);
                elDatumRdy_ = false;
                bitField1_ = (bitField1_ & ~0x00000400);
                azEncdrDatumed_ = false;
                bitField1_ = (bitField1_ & ~0x00000800);
                elEncdrDatumed_ = false;
                bitField1_ = (bitField1_ & ~0x00001000);
                azEncdrHeadNotUsed_ = false;
                bitField1_ = (bitField1_ & ~0x00002000);
                elEncdrHeadNotUsed_ = false;
                bitField1_ = (bitField1_ & ~0x00004000);
                azAbsEncdrNotUsed_ = false;
                bitField1_ = (bitField1_ & ~0x00008000);
                elAbsEncdrNotUsed_ = false;
                bitField1_ = (bitField1_ & ~0x00010000);
                azAmplNotUsed_ = false;
                bitField1_ = (bitField1_ & ~0x00020000);
                elAmplNotUsed_ = false;
                bitField1_ = (bitField1_ & ~0x00040000);
                stowPosnOpn_ = false;
                bitField1_ = (bitField1_ & ~0x00080000);
                stowPosnRun_ = false;
                bitField1_ = (bitField1_ & ~0x00100000);
                stowPosnRdy_ = false;
                bitField1_ = (bitField1_ & ~0x00200000);
                stowInsrOpn_ = false;
                bitField1_ = (bitField1_ & ~0x00400000);
                stowInsrRun_ = false;
                bitField1_ = (bitField1_ & ~0x00800000);
                stowInsrRdy_ = false;
                bitField1_ = (bitField1_ & ~0x01000000);
                stowRetrOpn_ = false;
                bitField1_ = (bitField1_ & ~0x02000000);
                stowRetrRun_ = false;
                bitField1_ = (bitField1_ & ~0x04000000);
                stowRetrRdy_ = false;
                bitField1_ = (bitField1_ & ~0x08000000);
                azTapeEncdrDataLeapDet_ = false;
                bitField1_ = (bitField1_ & ~0x10000000);
                elTapeEncdrDataLeapDet_ = false;
                bitField1_ = (bitField1_ & ~0x20000000);
                azAbsEncdrDataLeapDet_ = false;
                bitField1_ = (bitField1_ & ~0x40000000);
                time_ = 0L;
                bitField1_ = (bitField1_ & ~0x80000000);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsDriveStatus_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus(this);
                int from_bitField0_ = bitField0_;
                int from_bitField1_ = bitField1_;
                int to_bitField0_ = 0;
                int to_bitField1_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.processing_ = processing_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.lifecycle_ = lifecycle_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.azstate_ = azstate_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.elstate_ = elstate_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.azMotorTemps_ = azMotorTemps_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.elMotorTemps_ = elMotorTemps_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.azAmplTemps_ = azAmplTemps_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.elAmplTemps_ = elAmplTemps_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.azLimits_ = azLimits_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.elLimits_ = elLimits_;
                if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
                    to_bitField0_ |= 0x00000400;
                }
                result.mcsDiagEnabled_ = mcsDiagEnabled_;
                if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.servoTestMon_ = servoTestMon_;
                if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.localEnum_ = localEnum_;
                if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
                    to_bitField0_ |= 0x00002000;
                }
                result.controlRight_ = controlRight_;
                if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
                    to_bitField0_ |= 0x00004000;
                }
                result.azDriveMode_ = azDriveMode_;
                if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
                    to_bitField0_ |= 0x00008000;
                }
                result.elDriveMode_ = elDriveMode_;
                if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
                    to_bitField0_ |= 0x00010000;
                }
                result.azBrakeReleased_ = azBrakeReleased_;
                if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
                    to_bitField0_ |= 0x00020000;
                }
                result.elBrakeReleased_ = elBrakeReleased_;
                if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
                    to_bitField0_ |= 0x00040000;
                }
                result.azWrapBrakeReleased_ = azWrapBrakeReleased_;
                if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
                    to_bitField0_ |= 0x00080000;
                }
                result.azServoOnOpn_ = azServoOnOpn_;
                if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
                    to_bitField0_ |= 0x00100000;
                }
                result.azServoOnRdy_ = azServoOnRdy_;
                if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
                    to_bitField0_ |= 0x00200000;
                }
                result.elServoOnOpn_ = elServoOnOpn_;
                if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
                    to_bitField0_ |= 0x00400000;
                }
                result.elServoOnRdy_ = elServoOnRdy_;
                if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
                    to_bitField0_ |= 0x00800000;
                }
                result.azLimitRecoveryOpn_ = azLimitRecoveryOpn_;
                if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
                    to_bitField0_ |= 0x01000000;
                }
                result.azLimitRecoveryRdy_ = azLimitRecoveryRdy_;
                if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
                    to_bitField0_ |= 0x02000000;
                }
                result.elLimitRecoveryOpn_ = elLimitRecoveryOpn_;
                if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
                    to_bitField0_ |= 0x04000000;
                }
                result.elLimitRecoveryRdy_ = elLimitRecoveryRdy_;
                if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
                    to_bitField0_ |= 0x08000000;
                }
                result.azWrapServoOnOpn_ = azWrapServoOnOpn_;
                if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
                    to_bitField0_ |= 0x10000000;
                }
                result.wrapServoOnRdy_ = wrapServoOnRdy_;
                if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
                    to_bitField0_ |= 0x20000000;
                }
                result.wrapLimitRecoveryOpn_ = wrapLimitRecoveryOpn_;
                if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
                    to_bitField0_ |= 0x40000000;
                }
                result.wrapLimitRecoveryRdy_ = wrapLimitRecoveryRdy_;
                if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
                    to_bitField0_ |= 0x80000000;
                }
                result.azOverlap_ = azOverlap_;
                if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
                    to_bitField1_ |= 0x00000001;
                }
                result.azAbsIncDeviationLimit_ = azAbsIncDeviationLimit_;
                if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
                    to_bitField1_ |= 0x00000002;
                }
                result.elAbsIncDeviationLimit_ = elAbsIncDeviationLimit_;
                if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
                    to_bitField1_ |= 0x00000004;
                }
                result.azEncdrUnitInitFin_ = azEncdrUnitInitFin_;
                if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
                    to_bitField1_ |= 0x00000008;
                }
                result.elEncdrUnitInitFin_ = elEncdrUnitInitFin_;
                if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
                    to_bitField1_ |= 0x00000010;
                }
                result.absEncdrUnitInitFin_ = absEncdrUnitInitFin_;
                if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
                    to_bitField1_ |= 0x00000020;
                }
                result.azDatumOpn_ = azDatumOpn_;
                if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
                    to_bitField1_ |= 0x00000040;
                }
                result.elDatumOpn_ = elDatumOpn_;
                if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
                    to_bitField1_ |= 0x00000080;
                }
                result.azDatumRun_ = azDatumRun_;
                if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
                    to_bitField1_ |= 0x00000100;
                }
                result.elDatumRun_ = elDatumRun_;
                if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
                    to_bitField1_ |= 0x00000200;
                }
                result.azDatumRdy_ = azDatumRdy_;
                if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
                    to_bitField1_ |= 0x00000400;
                }
                result.elDatumRdy_ = elDatumRdy_;
                if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
                    to_bitField1_ |= 0x00000800;
                }
                result.azEncdrDatumed_ = azEncdrDatumed_;
                if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
                    to_bitField1_ |= 0x00001000;
                }
                result.elEncdrDatumed_ = elEncdrDatumed_;
                if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
                    to_bitField1_ |= 0x00002000;
                }
                result.azEncdrHeadNotUsed_ = azEncdrHeadNotUsed_;
                if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
                    to_bitField1_ |= 0x00004000;
                }
                result.elEncdrHeadNotUsed_ = elEncdrHeadNotUsed_;
                if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
                    to_bitField1_ |= 0x00008000;
                }
                result.azAbsEncdrNotUsed_ = azAbsEncdrNotUsed_;
                if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
                    to_bitField1_ |= 0x00010000;
                }
                result.elAbsEncdrNotUsed_ = elAbsEncdrNotUsed_;
                if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
                    to_bitField1_ |= 0x00020000;
                }
                result.azAmplNotUsed_ = azAmplNotUsed_;
                if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
                    to_bitField1_ |= 0x00040000;
                }
                result.elAmplNotUsed_ = elAmplNotUsed_;
                if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
                    to_bitField1_ |= 0x00080000;
                }
                result.stowPosnOpn_ = stowPosnOpn_;
                if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
                    to_bitField1_ |= 0x00100000;
                }
                result.stowPosnRun_ = stowPosnRun_;
                if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
                    to_bitField1_ |= 0x00200000;
                }
                result.stowPosnRdy_ = stowPosnRdy_;
                if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
                    to_bitField1_ |= 0x00400000;
                }
                result.stowInsrOpn_ = stowInsrOpn_;
                if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
                    to_bitField1_ |= 0x00800000;
                }
                result.stowInsrRun_ = stowInsrRun_;
                if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
                    to_bitField1_ |= 0x01000000;
                }
                result.stowInsrRdy_ = stowInsrRdy_;
                if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
                    to_bitField1_ |= 0x02000000;
                }
                result.stowRetrOpn_ = stowRetrOpn_;
                if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
                    to_bitField1_ |= 0x04000000;
                }
                result.stowRetrRun_ = stowRetrRun_;
                if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
                    to_bitField1_ |= 0x08000000;
                }
                result.stowRetrRdy_ = stowRetrRdy_;
                if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
                    to_bitField1_ |= 0x10000000;
                }
                result.azTapeEncdrDataLeapDet_ = azTapeEncdrDataLeapDet_;
                if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
                    to_bitField1_ |= 0x20000000;
                }
                result.elTapeEncdrDataLeapDet_ = elTapeEncdrDataLeapDet_;
                if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
                    to_bitField1_ |= 0x40000000;
                }
                result.azAbsEncdrDataLeapDet_ = azAbsEncdrDataLeapDet_;
                if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
                    to_bitField1_ |= 0x80000000;
                }
                result.time_ = time_;
                result.bitField0_ = to_bitField0_;
                result.bitField1_ = to_bitField1_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.getDefaultInstance()) return this;
                if (other.hasProcessing()) {
                    setProcessing(other.getProcessing());
                }
                if (other.hasLifecycle()) {
                    setLifecycle(other.getLifecycle());
                }
                if (other.hasAzstate()) {
                    setAzstate(other.getAzstate());
                }
                if (other.hasElstate()) {
                    setElstate(other.getElstate());
                }
                if (other.hasAzMotorTemps()) {
                    setAzMotorTemps(other.getAzMotorTemps());
                }
                if (other.hasElMotorTemps()) {
                    setElMotorTemps(other.getElMotorTemps());
                }
                if (other.hasAzAmplTemps()) {
                    setAzAmplTemps(other.getAzAmplTemps());
                }
                if (other.hasElAmplTemps()) {
                    setElAmplTemps(other.getElAmplTemps());
                }
                if (other.hasAzLimits()) {
                    setAzLimits(other.getAzLimits());
                }
                if (other.hasElLimits()) {
                    setElLimits(other.getElLimits());
                }
                if (other.hasMcsDiagEnabled()) {
                    setMcsDiagEnabled(other.getMcsDiagEnabled());
                }
                if (other.hasServoTestMon()) {
                    setServoTestMon(other.getServoTestMon());
                }
                if (other.hasLocalEnum()) {
                    setLocalEnum(other.getLocalEnum());
                }
                if (other.hasControlRight()) {
                    setControlRight(other.getControlRight());
                }
                if (other.hasAzDriveMode()) {
                    setAzDriveMode(other.getAzDriveMode());
                }
                if (other.hasElDriveMode()) {
                    setElDriveMode(other.getElDriveMode());
                }
                if (other.hasAzBrakeReleased()) {
                    setAzBrakeReleased(other.getAzBrakeReleased());
                }
                if (other.hasElBrakeReleased()) {
                    setElBrakeReleased(other.getElBrakeReleased());
                }
                if (other.hasAzWrapBrakeReleased()) {
                    setAzWrapBrakeReleased(other.getAzWrapBrakeReleased());
                }
                if (other.hasAzServoOnOpn()) {
                    setAzServoOnOpn(other.getAzServoOnOpn());
                }
                if (other.hasAzServoOnRdy()) {
                    setAzServoOnRdy(other.getAzServoOnRdy());
                }
                if (other.hasElServoOnOpn()) {
                    setElServoOnOpn(other.getElServoOnOpn());
                }
                if (other.hasElServoOnRdy()) {
                    setElServoOnRdy(other.getElServoOnRdy());
                }
                if (other.hasAzLimitRecoveryOpn()) {
                    setAzLimitRecoveryOpn(other.getAzLimitRecoveryOpn());
                }
                if (other.hasAzLimitRecoveryRdy()) {
                    setAzLimitRecoveryRdy(other.getAzLimitRecoveryRdy());
                }
                if (other.hasElLimitRecoveryOpn()) {
                    setElLimitRecoveryOpn(other.getElLimitRecoveryOpn());
                }
                if (other.hasElLimitRecoveryRdy()) {
                    setElLimitRecoveryRdy(other.getElLimitRecoveryRdy());
                }
                if (other.hasAzWrapServoOnOpn()) {
                    setAzWrapServoOnOpn(other.getAzWrapServoOnOpn());
                }
                if (other.hasWrapServoOnRdy()) {
                    setWrapServoOnRdy(other.getWrapServoOnRdy());
                }
                if (other.hasWrapLimitRecoveryOpn()) {
                    setWrapLimitRecoveryOpn(other.getWrapLimitRecoveryOpn());
                }
                if (other.hasWrapLimitRecoveryRdy()) {
                    setWrapLimitRecoveryRdy(other.getWrapLimitRecoveryRdy());
                }
                if (other.hasAzOverlap()) {
                    setAzOverlap(other.getAzOverlap());
                }
                if (other.hasAzAbsIncDeviationLimit()) {
                    setAzAbsIncDeviationLimit(other.getAzAbsIncDeviationLimit());
                }
                if (other.hasElAbsIncDeviationLimit()) {
                    setElAbsIncDeviationLimit(other.getElAbsIncDeviationLimit());
                }
                if (other.hasAzEncdrUnitInitFin()) {
                    setAzEncdrUnitInitFin(other.getAzEncdrUnitInitFin());
                }
                if (other.hasElEncdrUnitInitFin()) {
                    setElEncdrUnitInitFin(other.getElEncdrUnitInitFin());
                }
                if (other.hasAbsEncdrUnitInitFin()) {
                    setAbsEncdrUnitInitFin(other.getAbsEncdrUnitInitFin());
                }
                if (other.hasAzDatumOpn()) {
                    setAzDatumOpn(other.getAzDatumOpn());
                }
                if (other.hasElDatumOpn()) {
                    setElDatumOpn(other.getElDatumOpn());
                }
                if (other.hasAzDatumRun()) {
                    setAzDatumRun(other.getAzDatumRun());
                }
                if (other.hasElDatumRun()) {
                    setElDatumRun(other.getElDatumRun());
                }
                if (other.hasAzDatumRdy()) {
                    setAzDatumRdy(other.getAzDatumRdy());
                }
                if (other.hasElDatumRdy()) {
                    setElDatumRdy(other.getElDatumRdy());
                }
                if (other.hasAzEncdrDatumed()) {
                    setAzEncdrDatumed(other.getAzEncdrDatumed());
                }
                if (other.hasElEncdrDatumed()) {
                    setElEncdrDatumed(other.getElEncdrDatumed());
                }
                if (other.hasAzEncdrHeadNotUsed()) {
                    setAzEncdrHeadNotUsed(other.getAzEncdrHeadNotUsed());
                }
                if (other.hasElEncdrHeadNotUsed()) {
                    setElEncdrHeadNotUsed(other.getElEncdrHeadNotUsed());
                }
                if (other.hasAzAbsEncdrNotUsed()) {
                    setAzAbsEncdrNotUsed(other.getAzAbsEncdrNotUsed());
                }
                if (other.hasElAbsEncdrNotUsed()) {
                    setElAbsEncdrNotUsed(other.getElAbsEncdrNotUsed());
                }
                if (other.hasAzAmplNotUsed()) {
                    setAzAmplNotUsed(other.getAzAmplNotUsed());
                }
                if (other.hasElAmplNotUsed()) {
                    setElAmplNotUsed(other.getElAmplNotUsed());
                }
                if (other.hasStowPosnOpn()) {
                    setStowPosnOpn(other.getStowPosnOpn());
                }
                if (other.hasStowPosnRun()) {
                    setStowPosnRun(other.getStowPosnRun());
                }
                if (other.hasStowPosnRdy()) {
                    setStowPosnRdy(other.getStowPosnRdy());
                }
                if (other.hasStowInsrOpn()) {
                    setStowInsrOpn(other.getStowInsrOpn());
                }
                if (other.hasStowInsrRun()) {
                    setStowInsrRun(other.getStowInsrRun());
                }
                if (other.hasStowInsrRdy()) {
                    setStowInsrRdy(other.getStowInsrRdy());
                }
                if (other.hasStowRetrOpn()) {
                    setStowRetrOpn(other.getStowRetrOpn());
                }
                if (other.hasStowRetrRun()) {
                    setStowRetrRun(other.getStowRetrRun());
                }
                if (other.hasStowRetrRdy()) {
                    setStowRetrRdy(other.getStowRetrRdy());
                }
                if (other.hasAzTapeEncdrDataLeapDet()) {
                    setAzTapeEncdrDataLeapDet(other.getAzTapeEncdrDataLeapDet());
                }
                if (other.hasElTapeEncdrDataLeapDet()) {
                    setElTapeEncdrDataLeapDet(other.getElTapeEncdrDataLeapDet());
                }
                if (other.hasAzAbsEncdrDataLeapDet()) {
                    setAzAbsEncdrDataLeapDet(other.getAzAbsEncdrDataLeapDet());
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasProcessing()) {

                    return false;
                }
                if (!hasLifecycle()) {

                    return false;
                }
                if (!hasAzstate()) {

                    return false;
                }
                if (!hasElstate()) {

                    return false;
                }
                if (!hasAzMotorTemps()) {

                    return false;
                }
                if (!hasElMotorTemps()) {

                    return false;
                }
                if (!hasAzAmplTemps()) {

                    return false;
                }
                if (!hasElAmplTemps()) {

                    return false;
                }
                if (!hasAzLimits()) {

                    return false;
                }
                if (!hasElLimits()) {

                    return false;
                }
                if (!hasMcsDiagEnabled()) {

                    return false;
                }
                if (!hasServoTestMon()) {

                    return false;
                }
                if (!hasLocalEnum()) {

                    return false;
                }
                if (!hasControlRight()) {

                    return false;
                }
                if (!hasAzDriveMode()) {

                    return false;
                }
                if (!hasElDriveMode()) {

                    return false;
                }
                if (!hasAzBrakeReleased()) {

                    return false;
                }
                if (!hasElBrakeReleased()) {

                    return false;
                }
                if (!hasAzWrapBrakeReleased()) {

                    return false;
                }
                if (!hasAzServoOnOpn()) {

                    return false;
                }
                if (!hasAzServoOnRdy()) {

                    return false;
                }
                if (!hasElServoOnOpn()) {

                    return false;
                }
                if (!hasElServoOnRdy()) {

                    return false;
                }
                if (!hasAzLimitRecoveryOpn()) {

                    return false;
                }
                if (!hasAzLimitRecoveryRdy()) {

                    return false;
                }
                if (!hasElLimitRecoveryOpn()) {

                    return false;
                }
                if (!hasElLimitRecoveryRdy()) {

                    return false;
                }
                if (!hasAzWrapServoOnOpn()) {

                    return false;
                }
                if (!hasWrapServoOnRdy()) {

                    return false;
                }
                if (!hasWrapLimitRecoveryOpn()) {

                    return false;
                }
                if (!hasWrapLimitRecoveryRdy()) {

                    return false;
                }
                if (!hasAzOverlap()) {

                    return false;
                }
                if (!hasAzAbsIncDeviationLimit()) {

                    return false;
                }
                if (!hasElAbsIncDeviationLimit()) {

                    return false;
                }
                if (!hasAzEncdrUnitInitFin()) {

                    return false;
                }
                if (!hasElEncdrUnitInitFin()) {

                    return false;
                }
                if (!hasAbsEncdrUnitInitFin()) {

                    return false;
                }
                if (!hasAzDatumOpn()) {

                    return false;
                }
                if (!hasElDatumOpn()) {

                    return false;
                }
                if (!hasAzDatumRun()) {

                    return false;
                }
                if (!hasElDatumRun()) {

                    return false;
                }
                if (!hasAzDatumRdy()) {

                    return false;
                }
                if (!hasElDatumRdy()) {

                    return false;
                }
                if (!hasAzEncdrDatumed()) {

                    return false;
                }
                if (!hasElEncdrDatumed()) {

                    return false;
                }
                if (!hasAzEncdrHeadNotUsed()) {

                    return false;
                }
                if (!hasElEncdrHeadNotUsed()) {

                    return false;
                }
                if (!hasAzAbsEncdrNotUsed()) {

                    return false;
                }
                if (!hasElAbsEncdrNotUsed()) {

                    return false;
                }
                if (!hasAzAmplNotUsed()) {

                    return false;
                }
                if (!hasElAmplNotUsed()) {

                    return false;
                }
                if (!hasStowPosnOpn()) {

                    return false;
                }
                if (!hasStowPosnRun()) {

                    return false;
                }
                if (!hasStowPosnRdy()) {

                    return false;
                }
                if (!hasStowInsrOpn()) {

                    return false;
                }
                if (!hasStowInsrRun()) {

                    return false;
                }
                if (!hasStowInsrRdy()) {

                    return false;
                }
                if (!hasStowRetrOpn()) {

                    return false;
                }
                if (!hasStowRetrRun()) {

                    return false;
                }
                if (!hasStowRetrRdy()) {

                    return false;
                }
                if (!hasAzTapeEncdrDataLeapDet()) {

                    return false;
                }
                if (!hasElTapeEncdrDataLeapDet()) {

                    return false;
                }
                if (!hasAzAbsEncdrDataLeapDet()) {

                    return false;
                }
                if (!hasTime()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;
            private int bitField1_;

            private boolean processing_ ;
            /**
             * <code>required bool processing = 1;</code>
             */
            public boolean hasProcessing() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required bool processing = 1;</code>
             */
            public boolean getProcessing() {
                return processing_;
            }
            /**
             * <code>required bool processing = 1;</code>
             */
            public Builder setProcessing(boolean value) {
                bitField0_ |= 0x00000001;
                processing_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool processing = 1;</code>
             */
            public Builder clearProcessing() {
                bitField0_ = (bitField0_ & ~0x00000001);
                processing_ = false;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle lifecycle_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle.ready;
            /**
             * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
             */
            public boolean hasLifecycle() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle getLifecycle() {
                return lifecycle_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
             */
            public Builder setLifecycle(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                lifecycle_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Lifecycle lifecycle = 2 [default = ready];</code>
             */
            public Builder clearLifecycle() {
                bitField0_ = (bitField0_ & ~0x00000002);
                lifecycle_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Lifecycle.ready;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate azstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate.az_drive_power_off;
            /**
             * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
             */
            public boolean hasAzstate() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate getAzstate() {
                return azstate_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
             */
            public Builder setAzstate(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                azstate_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Azstate azstate = 3 [default = az_drive_power_off];</code>
             */
            public Builder clearAzstate() {
                bitField0_ = (bitField0_ & ~0x00000004);
                azstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Azstate.az_drive_power_off;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate elstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate.el_drive_power_off;
            /**
             * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
             */
            public boolean hasElstate() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate getElstate() {
                return elstate_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
             */
            public Builder setElstate(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000008;
                elstate_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Elstate elstate = 4 [default = el_drive_power_off];</code>
             */
            public Builder clearElstate() {
                bitField0_ = (bitField0_ & ~0x00000008);
                elstate_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Elstate.el_drive_power_off;
                onChanged();
                return this;
            }

            private boolean azMotorTemps_ ;
            /**
             * <code>required bool azMotorTemps = 5;</code>
             */
            public boolean hasAzMotorTemps() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }
            /**
             * <code>required bool azMotorTemps = 5;</code>
             */
            public boolean getAzMotorTemps() {
                return azMotorTemps_;
            }
            /**
             * <code>required bool azMotorTemps = 5;</code>
             */
            public Builder setAzMotorTemps(boolean value) {
                bitField0_ |= 0x00000010;
                azMotorTemps_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azMotorTemps = 5;</code>
             */
            public Builder clearAzMotorTemps() {
                bitField0_ = (bitField0_ & ~0x00000010);
                azMotorTemps_ = false;
                onChanged();
                return this;
            }

            private boolean elMotorTemps_ ;
            /**
             * <code>required bool elMotorTemps = 6;</code>
             */
            public boolean hasElMotorTemps() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }
            /**
             * <code>required bool elMotorTemps = 6;</code>
             */
            public boolean getElMotorTemps() {
                return elMotorTemps_;
            }
            /**
             * <code>required bool elMotorTemps = 6;</code>
             */
            public Builder setElMotorTemps(boolean value) {
                bitField0_ |= 0x00000020;
                elMotorTemps_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elMotorTemps = 6;</code>
             */
            public Builder clearElMotorTemps() {
                bitField0_ = (bitField0_ & ~0x00000020);
                elMotorTemps_ = false;
                onChanged();
                return this;
            }

            private boolean azAmplTemps_ ;
            /**
             * <code>required bool azAmplTemps = 7;</code>
             */
            public boolean hasAzAmplTemps() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }
            /**
             * <code>required bool azAmplTemps = 7;</code>
             */
            public boolean getAzAmplTemps() {
                return azAmplTemps_;
            }
            /**
             * <code>required bool azAmplTemps = 7;</code>
             */
            public Builder setAzAmplTemps(boolean value) {
                bitField0_ |= 0x00000040;
                azAmplTemps_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azAmplTemps = 7;</code>
             */
            public Builder clearAzAmplTemps() {
                bitField0_ = (bitField0_ & ~0x00000040);
                azAmplTemps_ = false;
                onChanged();
                return this;
            }

            private boolean elAmplTemps_ ;
            /**
             * <code>required bool elAmplTemps = 8;</code>
             */
            public boolean hasElAmplTemps() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }
            /**
             * <code>required bool elAmplTemps = 8;</code>
             */
            public boolean getElAmplTemps() {
                return elAmplTemps_;
            }
            /**
             * <code>required bool elAmplTemps = 8;</code>
             */
            public Builder setElAmplTemps(boolean value) {
                bitField0_ |= 0x00000080;
                elAmplTemps_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elAmplTemps = 8;</code>
             */
            public Builder clearElAmplTemps() {
                bitField0_ = (bitField0_ & ~0x00000080);
                elAmplTemps_ = false;
                onChanged();
                return this;
            }

            private boolean azLimits_ ;
            /**
             * <code>required bool azLimits = 9;</code>
             */
            public boolean hasAzLimits() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }
            /**
             * <code>required bool azLimits = 9;</code>
             */
            public boolean getAzLimits() {
                return azLimits_;
            }
            /**
             * <code>required bool azLimits = 9;</code>
             */
            public Builder setAzLimits(boolean value) {
                bitField0_ |= 0x00000100;
                azLimits_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azLimits = 9;</code>
             */
            public Builder clearAzLimits() {
                bitField0_ = (bitField0_ & ~0x00000100);
                azLimits_ = false;
                onChanged();
                return this;
            }

            private boolean elLimits_ ;
            /**
             * <code>required bool elLimits = 10;</code>
             */
            public boolean hasElLimits() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }
            /**
             * <code>required bool elLimits = 10;</code>
             */
            public boolean getElLimits() {
                return elLimits_;
            }
            /**
             * <code>required bool elLimits = 10;</code>
             */
            public Builder setElLimits(boolean value) {
                bitField0_ |= 0x00000200;
                elLimits_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elLimits = 10;</code>
             */
            public Builder clearElLimits() {
                bitField0_ = (bitField0_ & ~0x00000200);
                elLimits_ = false;
                onChanged();
                return this;
            }

            private boolean mcsDiagEnabled_ ;
            /**
             * <code>required bool mcsDiagEnabled = 11;</code>
             */
            public boolean hasMcsDiagEnabled() {
                return ((bitField0_ & 0x00000400) == 0x00000400);
            }
            /**
             * <code>required bool mcsDiagEnabled = 11;</code>
             */
            public boolean getMcsDiagEnabled() {
                return mcsDiagEnabled_;
            }
            /**
             * <code>required bool mcsDiagEnabled = 11;</code>
             */
            public Builder setMcsDiagEnabled(boolean value) {
                bitField0_ |= 0x00000400;
                mcsDiagEnabled_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool mcsDiagEnabled = 11;</code>
             */
            public Builder clearMcsDiagEnabled() {
                bitField0_ = (bitField0_ & ~0x00000400);
                mcsDiagEnabled_ = false;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon servoTestMon_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon.None;
            /**
             * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
             */
            public boolean hasServoTestMon() {
                return ((bitField0_ & 0x00000800) == 0x00000800);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon getServoTestMon() {
                return servoTestMon_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
             */
            public Builder setServoTestMon(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                servoTestMon_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ServoTestMon servoTestMon = 12 [default = None];</code>
             */
            public Builder clearServoTestMon() {
                bitField0_ = (bitField0_ & ~0x00000800);
                servoTestMon_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ServoTestMon.None;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local localEnum_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local.local;
            /**
             * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
             */
            public boolean hasLocalEnum() {
                return ((bitField0_ & 0x00001000) == 0x00001000);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local getLocalEnum() {
                return localEnum_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
             */
            public Builder setLocalEnum(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00001000;
                localEnum_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.Local local_Enum = 13 [default = local];</code>
             */
            public Builder clearLocalEnum() {
                bitField0_ = (bitField0_ & ~0x00001000);
                localEnum_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.Local.local;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight controlRight_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight.MCU;
            /**
             * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
             */
            public boolean hasControlRight() {
                return ((bitField0_ & 0x00002000) == 0x00002000);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight getControlRight() {
                return controlRight_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
             */
            public Builder setControlRight(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00002000;
                controlRight_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ControlRight controlRight = 14 [default = MCU];</code>
             */
            public Builder clearControlRight() {
                bitField0_ = (bitField0_ & ~0x00002000);
                controlRight_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ControlRight.MCU;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode azDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode.az_standby;
            /**
             * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
             */
            public boolean hasAzDriveMode() {
                return ((bitField0_ & 0x00004000) == 0x00004000);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode getAzDriveMode() {
                return azDriveMode_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
             */
            public Builder setAzDriveMode(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00004000;
                azDriveMode_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.AzDriveMode azDriveMode = 15 [default = az_standby];</code>
             */
            public Builder clearAzDriveMode() {
                bitField0_ = (bitField0_ & ~0x00004000);
                azDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.AzDriveMode.az_standby;
                onChanged();
                return this;
            }

            private org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode elDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode.el_standby;
            /**
             * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
             */
            public boolean hasElDriveMode() {
                return ((bitField0_ & 0x00008000) == 0x00008000);
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
             */
            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode getElDriveMode() {
                return elDriveMode_;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
             */
            public Builder setElDriveMode(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00008000;
                elDriveMode_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required .eventpoc.McsDriveStatus.ElDriveMode elDriveMode = 16 [default = el_standby];</code>
             */
            public Builder clearElDriveMode() {
                bitField0_ = (bitField0_ & ~0x00008000);
                elDriveMode_ = org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsDriveStatus.ElDriveMode.el_standby;
                onChanged();
                return this;
            }

            private boolean azBrakeReleased_ ;
            /**
             * <code>required bool azBrakeReleased = 17;</code>
             */
            public boolean hasAzBrakeReleased() {
                return ((bitField0_ & 0x00010000) == 0x00010000);
            }
            /**
             * <code>required bool azBrakeReleased = 17;</code>
             */
            public boolean getAzBrakeReleased() {
                return azBrakeReleased_;
            }
            /**
             * <code>required bool azBrakeReleased = 17;</code>
             */
            public Builder setAzBrakeReleased(boolean value) {
                bitField0_ |= 0x00010000;
                azBrakeReleased_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azBrakeReleased = 17;</code>
             */
            public Builder clearAzBrakeReleased() {
                bitField0_ = (bitField0_ & ~0x00010000);
                azBrakeReleased_ = false;
                onChanged();
                return this;
            }

            private boolean elBrakeReleased_ ;
            /**
             * <code>required bool elBrakeReleased = 18;</code>
             */
            public boolean hasElBrakeReleased() {
                return ((bitField0_ & 0x00020000) == 0x00020000);
            }
            /**
             * <code>required bool elBrakeReleased = 18;</code>
             */
            public boolean getElBrakeReleased() {
                return elBrakeReleased_;
            }
            /**
             * <code>required bool elBrakeReleased = 18;</code>
             */
            public Builder setElBrakeReleased(boolean value) {
                bitField0_ |= 0x00020000;
                elBrakeReleased_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elBrakeReleased = 18;</code>
             */
            public Builder clearElBrakeReleased() {
                bitField0_ = (bitField0_ & ~0x00020000);
                elBrakeReleased_ = false;
                onChanged();
                return this;
            }

            private boolean azWrapBrakeReleased_ ;
            /**
             * <code>required bool azWrapBrakeReleased = 19;</code>
             */
            public boolean hasAzWrapBrakeReleased() {
                return ((bitField0_ & 0x00040000) == 0x00040000);
            }
            /**
             * <code>required bool azWrapBrakeReleased = 19;</code>
             */
            public boolean getAzWrapBrakeReleased() {
                return azWrapBrakeReleased_;
            }
            /**
             * <code>required bool azWrapBrakeReleased = 19;</code>
             */
            public Builder setAzWrapBrakeReleased(boolean value) {
                bitField0_ |= 0x00040000;
                azWrapBrakeReleased_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azWrapBrakeReleased = 19;</code>
             */
            public Builder clearAzWrapBrakeReleased() {
                bitField0_ = (bitField0_ & ~0x00040000);
                azWrapBrakeReleased_ = false;
                onChanged();
                return this;
            }

            private boolean azServoOnOpn_ ;
            /**
             * <code>required bool azServoOnOpn = 20;</code>
             */
            public boolean hasAzServoOnOpn() {
                return ((bitField0_ & 0x00080000) == 0x00080000);
            }
            /**
             * <code>required bool azServoOnOpn = 20;</code>
             */
            public boolean getAzServoOnOpn() {
                return azServoOnOpn_;
            }
            /**
             * <code>required bool azServoOnOpn = 20;</code>
             */
            public Builder setAzServoOnOpn(boolean value) {
                bitField0_ |= 0x00080000;
                azServoOnOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azServoOnOpn = 20;</code>
             */
            public Builder clearAzServoOnOpn() {
                bitField0_ = (bitField0_ & ~0x00080000);
                azServoOnOpn_ = false;
                onChanged();
                return this;
            }

            private boolean azServoOnRdy_ ;
            /**
             * <code>required bool azServoOnRdy = 21;</code>
             */
            public boolean hasAzServoOnRdy() {
                return ((bitField0_ & 0x00100000) == 0x00100000);
            }
            /**
             * <code>required bool azServoOnRdy = 21;</code>
             */
            public boolean getAzServoOnRdy() {
                return azServoOnRdy_;
            }
            /**
             * <code>required bool azServoOnRdy = 21;</code>
             */
            public Builder setAzServoOnRdy(boolean value) {
                bitField0_ |= 0x00100000;
                azServoOnRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azServoOnRdy = 21;</code>
             */
            public Builder clearAzServoOnRdy() {
                bitField0_ = (bitField0_ & ~0x00100000);
                azServoOnRdy_ = false;
                onChanged();
                return this;
            }

            private boolean elServoOnOpn_ ;
            /**
             * <code>required bool elServoOnOpn = 22;</code>
             */
            public boolean hasElServoOnOpn() {
                return ((bitField0_ & 0x00200000) == 0x00200000);
            }
            /**
             * <code>required bool elServoOnOpn = 22;</code>
             */
            public boolean getElServoOnOpn() {
                return elServoOnOpn_;
            }
            /**
             * <code>required bool elServoOnOpn = 22;</code>
             */
            public Builder setElServoOnOpn(boolean value) {
                bitField0_ |= 0x00200000;
                elServoOnOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elServoOnOpn = 22;</code>
             */
            public Builder clearElServoOnOpn() {
                bitField0_ = (bitField0_ & ~0x00200000);
                elServoOnOpn_ = false;
                onChanged();
                return this;
            }

            private boolean elServoOnRdy_ ;
            /**
             * <code>required bool elServoOnRdy = 23;</code>
             */
            public boolean hasElServoOnRdy() {
                return ((bitField0_ & 0x00400000) == 0x00400000);
            }
            /**
             * <code>required bool elServoOnRdy = 23;</code>
             */
            public boolean getElServoOnRdy() {
                return elServoOnRdy_;
            }
            /**
             * <code>required bool elServoOnRdy = 23;</code>
             */
            public Builder setElServoOnRdy(boolean value) {
                bitField0_ |= 0x00400000;
                elServoOnRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elServoOnRdy = 23;</code>
             */
            public Builder clearElServoOnRdy() {
                bitField0_ = (bitField0_ & ~0x00400000);
                elServoOnRdy_ = false;
                onChanged();
                return this;
            }

            private boolean azLimitRecoveryOpn_ ;
            /**
             * <code>required bool azLimitRecoveryOpn = 24;</code>
             */
            public boolean hasAzLimitRecoveryOpn() {
                return ((bitField0_ & 0x00800000) == 0x00800000);
            }
            /**
             * <code>required bool azLimitRecoveryOpn = 24;</code>
             */
            public boolean getAzLimitRecoveryOpn() {
                return azLimitRecoveryOpn_;
            }
            /**
             * <code>required bool azLimitRecoveryOpn = 24;</code>
             */
            public Builder setAzLimitRecoveryOpn(boolean value) {
                bitField0_ |= 0x00800000;
                azLimitRecoveryOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azLimitRecoveryOpn = 24;</code>
             */
            public Builder clearAzLimitRecoveryOpn() {
                bitField0_ = (bitField0_ & ~0x00800000);
                azLimitRecoveryOpn_ = false;
                onChanged();
                return this;
            }

            private boolean azLimitRecoveryRdy_ ;
            /**
             * <code>required bool azLimitRecoveryRdy = 25;</code>
             */
            public boolean hasAzLimitRecoveryRdy() {
                return ((bitField0_ & 0x01000000) == 0x01000000);
            }
            /**
             * <code>required bool azLimitRecoveryRdy = 25;</code>
             */
            public boolean getAzLimitRecoveryRdy() {
                return azLimitRecoveryRdy_;
            }
            /**
             * <code>required bool azLimitRecoveryRdy = 25;</code>
             */
            public Builder setAzLimitRecoveryRdy(boolean value) {
                bitField0_ |= 0x01000000;
                azLimitRecoveryRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azLimitRecoveryRdy = 25;</code>
             */
            public Builder clearAzLimitRecoveryRdy() {
                bitField0_ = (bitField0_ & ~0x01000000);
                azLimitRecoveryRdy_ = false;
                onChanged();
                return this;
            }

            private boolean elLimitRecoveryOpn_ ;
            /**
             * <code>required bool elLimitRecoveryOpn = 26;</code>
             */
            public boolean hasElLimitRecoveryOpn() {
                return ((bitField0_ & 0x02000000) == 0x02000000);
            }
            /**
             * <code>required bool elLimitRecoveryOpn = 26;</code>
             */
            public boolean getElLimitRecoveryOpn() {
                return elLimitRecoveryOpn_;
            }
            /**
             * <code>required bool elLimitRecoveryOpn = 26;</code>
             */
            public Builder setElLimitRecoveryOpn(boolean value) {
                bitField0_ |= 0x02000000;
                elLimitRecoveryOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elLimitRecoveryOpn = 26;</code>
             */
            public Builder clearElLimitRecoveryOpn() {
                bitField0_ = (bitField0_ & ~0x02000000);
                elLimitRecoveryOpn_ = false;
                onChanged();
                return this;
            }

            private boolean elLimitRecoveryRdy_ ;
            /**
             * <code>required bool elLimitRecoveryRdy = 27;</code>
             */
            public boolean hasElLimitRecoveryRdy() {
                return ((bitField0_ & 0x04000000) == 0x04000000);
            }
            /**
             * <code>required bool elLimitRecoveryRdy = 27;</code>
             */
            public boolean getElLimitRecoveryRdy() {
                return elLimitRecoveryRdy_;
            }
            /**
             * <code>required bool elLimitRecoveryRdy = 27;</code>
             */
            public Builder setElLimitRecoveryRdy(boolean value) {
                bitField0_ |= 0x04000000;
                elLimitRecoveryRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elLimitRecoveryRdy = 27;</code>
             */
            public Builder clearElLimitRecoveryRdy() {
                bitField0_ = (bitField0_ & ~0x04000000);
                elLimitRecoveryRdy_ = false;
                onChanged();
                return this;
            }

            private boolean azWrapServoOnOpn_ ;
            /**
             * <code>required bool azWrapServoOnOpn = 28;</code>
             */
            public boolean hasAzWrapServoOnOpn() {
                return ((bitField0_ & 0x08000000) == 0x08000000);
            }
            /**
             * <code>required bool azWrapServoOnOpn = 28;</code>
             */
            public boolean getAzWrapServoOnOpn() {
                return azWrapServoOnOpn_;
            }
            /**
             * <code>required bool azWrapServoOnOpn = 28;</code>
             */
            public Builder setAzWrapServoOnOpn(boolean value) {
                bitField0_ |= 0x08000000;
                azWrapServoOnOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azWrapServoOnOpn = 28;</code>
             */
            public Builder clearAzWrapServoOnOpn() {
                bitField0_ = (bitField0_ & ~0x08000000);
                azWrapServoOnOpn_ = false;
                onChanged();
                return this;
            }

            private boolean wrapServoOnRdy_ ;
            /**
             * <code>required bool wrapServoOnRdy = 29;</code>
             */
            public boolean hasWrapServoOnRdy() {
                return ((bitField0_ & 0x10000000) == 0x10000000);
            }
            /**
             * <code>required bool wrapServoOnRdy = 29;</code>
             */
            public boolean getWrapServoOnRdy() {
                return wrapServoOnRdy_;
            }
            /**
             * <code>required bool wrapServoOnRdy = 29;</code>
             */
            public Builder setWrapServoOnRdy(boolean value) {
                bitField0_ |= 0x10000000;
                wrapServoOnRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool wrapServoOnRdy = 29;</code>
             */
            public Builder clearWrapServoOnRdy() {
                bitField0_ = (bitField0_ & ~0x10000000);
                wrapServoOnRdy_ = false;
                onChanged();
                return this;
            }

            private boolean wrapLimitRecoveryOpn_ ;
            /**
             * <code>required bool wrapLimitRecoveryOpn = 30;</code>
             */
            public boolean hasWrapLimitRecoveryOpn() {
                return ((bitField0_ & 0x20000000) == 0x20000000);
            }
            /**
             * <code>required bool wrapLimitRecoveryOpn = 30;</code>
             */
            public boolean getWrapLimitRecoveryOpn() {
                return wrapLimitRecoveryOpn_;
            }
            /**
             * <code>required bool wrapLimitRecoveryOpn = 30;</code>
             */
            public Builder setWrapLimitRecoveryOpn(boolean value) {
                bitField0_ |= 0x20000000;
                wrapLimitRecoveryOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool wrapLimitRecoveryOpn = 30;</code>
             */
            public Builder clearWrapLimitRecoveryOpn() {
                bitField0_ = (bitField0_ & ~0x20000000);
                wrapLimitRecoveryOpn_ = false;
                onChanged();
                return this;
            }

            private boolean wrapLimitRecoveryRdy_ ;
            /**
             * <code>required bool wrapLimitRecoveryRdy = 31;</code>
             */
            public boolean hasWrapLimitRecoveryRdy() {
                return ((bitField0_ & 0x40000000) == 0x40000000);
            }
            /**
             * <code>required bool wrapLimitRecoveryRdy = 31;</code>
             */
            public boolean getWrapLimitRecoveryRdy() {
                return wrapLimitRecoveryRdy_;
            }
            /**
             * <code>required bool wrapLimitRecoveryRdy = 31;</code>
             */
            public Builder setWrapLimitRecoveryRdy(boolean value) {
                bitField0_ |= 0x40000000;
                wrapLimitRecoveryRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool wrapLimitRecoveryRdy = 31;</code>
             */
            public Builder clearWrapLimitRecoveryRdy() {
                bitField0_ = (bitField0_ & ~0x40000000);
                wrapLimitRecoveryRdy_ = false;
                onChanged();
                return this;
            }

            private boolean azOverlap_ ;
            /**
             * <code>required bool azOverlap = 32;</code>
             */
            public boolean hasAzOverlap() {
                return ((bitField0_ & 0x80000000) == 0x80000000);
            }
            /**
             * <code>required bool azOverlap = 32;</code>
             */
            public boolean getAzOverlap() {
                return azOverlap_;
            }
            /**
             * <code>required bool azOverlap = 32;</code>
             */
            public Builder setAzOverlap(boolean value) {
                bitField0_ |= 0x80000000;
                azOverlap_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azOverlap = 32;</code>
             */
            public Builder clearAzOverlap() {
                bitField0_ = (bitField0_ & ~0x80000000);
                azOverlap_ = false;
                onChanged();
                return this;
            }

            private boolean azAbsIncDeviationLimit_ ;
            /**
             * <code>required bool azAbsIncDeviationLimit = 33;</code>
             */
            public boolean hasAzAbsIncDeviationLimit() {
                return ((bitField1_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required bool azAbsIncDeviationLimit = 33;</code>
             */
            public boolean getAzAbsIncDeviationLimit() {
                return azAbsIncDeviationLimit_;
            }
            /**
             * <code>required bool azAbsIncDeviationLimit = 33;</code>
             */
            public Builder setAzAbsIncDeviationLimit(boolean value) {
                bitField1_ |= 0x00000001;
                azAbsIncDeviationLimit_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azAbsIncDeviationLimit = 33;</code>
             */
            public Builder clearAzAbsIncDeviationLimit() {
                bitField1_ = (bitField1_ & ~0x00000001);
                azAbsIncDeviationLimit_ = false;
                onChanged();
                return this;
            }

            private boolean elAbsIncDeviationLimit_ ;
            /**
             * <code>required bool elAbsIncDeviationLimit = 34;</code>
             */
            public boolean hasElAbsIncDeviationLimit() {
                return ((bitField1_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required bool elAbsIncDeviationLimit = 34;</code>
             */
            public boolean getElAbsIncDeviationLimit() {
                return elAbsIncDeviationLimit_;
            }
            /**
             * <code>required bool elAbsIncDeviationLimit = 34;</code>
             */
            public Builder setElAbsIncDeviationLimit(boolean value) {
                bitField1_ |= 0x00000002;
                elAbsIncDeviationLimit_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elAbsIncDeviationLimit = 34;</code>
             */
            public Builder clearElAbsIncDeviationLimit() {
                bitField1_ = (bitField1_ & ~0x00000002);
                elAbsIncDeviationLimit_ = false;
                onChanged();
                return this;
            }

            private boolean azEncdrUnitInitFin_ ;
            /**
             * <code>required bool azEncdrUnitInitFin = 35;</code>
             */
            public boolean hasAzEncdrUnitInitFin() {
                return ((bitField1_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required bool azEncdrUnitInitFin = 35;</code>
             */
            public boolean getAzEncdrUnitInitFin() {
                return azEncdrUnitInitFin_;
            }
            /**
             * <code>required bool azEncdrUnitInitFin = 35;</code>
             */
            public Builder setAzEncdrUnitInitFin(boolean value) {
                bitField1_ |= 0x00000004;
                azEncdrUnitInitFin_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azEncdrUnitInitFin = 35;</code>
             */
            public Builder clearAzEncdrUnitInitFin() {
                bitField1_ = (bitField1_ & ~0x00000004);
                azEncdrUnitInitFin_ = false;
                onChanged();
                return this;
            }

            private boolean elEncdrUnitInitFin_ ;
            /**
             * <code>required bool elEncdrUnitInitFin = 36;</code>
             */
            public boolean hasElEncdrUnitInitFin() {
                return ((bitField1_ & 0x00000008) == 0x00000008);
            }
            /**
             * <code>required bool elEncdrUnitInitFin = 36;</code>
             */
            public boolean getElEncdrUnitInitFin() {
                return elEncdrUnitInitFin_;
            }
            /**
             * <code>required bool elEncdrUnitInitFin = 36;</code>
             */
            public Builder setElEncdrUnitInitFin(boolean value) {
                bitField1_ |= 0x00000008;
                elEncdrUnitInitFin_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elEncdrUnitInitFin = 36;</code>
             */
            public Builder clearElEncdrUnitInitFin() {
                bitField1_ = (bitField1_ & ~0x00000008);
                elEncdrUnitInitFin_ = false;
                onChanged();
                return this;
            }

            private boolean absEncdrUnitInitFin_ ;
            /**
             * <code>required bool absEncdrUnitInitFin = 37;</code>
             */
            public boolean hasAbsEncdrUnitInitFin() {
                return ((bitField1_ & 0x00000010) == 0x00000010);
            }
            /**
             * <code>required bool absEncdrUnitInitFin = 37;</code>
             */
            public boolean getAbsEncdrUnitInitFin() {
                return absEncdrUnitInitFin_;
            }
            /**
             * <code>required bool absEncdrUnitInitFin = 37;</code>
             */
            public Builder setAbsEncdrUnitInitFin(boolean value) {
                bitField1_ |= 0x00000010;
                absEncdrUnitInitFin_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool absEncdrUnitInitFin = 37;</code>
             */
            public Builder clearAbsEncdrUnitInitFin() {
                bitField1_ = (bitField1_ & ~0x00000010);
                absEncdrUnitInitFin_ = false;
                onChanged();
                return this;
            }

            private boolean azDatumOpn_ ;
            /**
             * <code>required bool azDatumOpn = 38;</code>
             */
            public boolean hasAzDatumOpn() {
                return ((bitField1_ & 0x00000020) == 0x00000020);
            }
            /**
             * <code>required bool azDatumOpn = 38;</code>
             */
            public boolean getAzDatumOpn() {
                return azDatumOpn_;
            }
            /**
             * <code>required bool azDatumOpn = 38;</code>
             */
            public Builder setAzDatumOpn(boolean value) {
                bitField1_ |= 0x00000020;
                azDatumOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azDatumOpn = 38;</code>
             */
            public Builder clearAzDatumOpn() {
                bitField1_ = (bitField1_ & ~0x00000020);
                azDatumOpn_ = false;
                onChanged();
                return this;
            }

            private boolean elDatumOpn_ ;
            /**
             * <code>required bool elDatumOpn = 39;</code>
             */
            public boolean hasElDatumOpn() {
                return ((bitField1_ & 0x00000040) == 0x00000040);
            }
            /**
             * <code>required bool elDatumOpn = 39;</code>
             */
            public boolean getElDatumOpn() {
                return elDatumOpn_;
            }
            /**
             * <code>required bool elDatumOpn = 39;</code>
             */
            public Builder setElDatumOpn(boolean value) {
                bitField1_ |= 0x00000040;
                elDatumOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elDatumOpn = 39;</code>
             */
            public Builder clearElDatumOpn() {
                bitField1_ = (bitField1_ & ~0x00000040);
                elDatumOpn_ = false;
                onChanged();
                return this;
            }

            private boolean azDatumRun_ ;
            /**
             * <code>required bool azDatumRun = 40;</code>
             */
            public boolean hasAzDatumRun() {
                return ((bitField1_ & 0x00000080) == 0x00000080);
            }
            /**
             * <code>required bool azDatumRun = 40;</code>
             */
            public boolean getAzDatumRun() {
                return azDatumRun_;
            }
            /**
             * <code>required bool azDatumRun = 40;</code>
             */
            public Builder setAzDatumRun(boolean value) {
                bitField1_ |= 0x00000080;
                azDatumRun_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azDatumRun = 40;</code>
             */
            public Builder clearAzDatumRun() {
                bitField1_ = (bitField1_ & ~0x00000080);
                azDatumRun_ = false;
                onChanged();
                return this;
            }

            private boolean elDatumRun_ ;
            /**
             * <code>required bool elDatumRun = 41;</code>
             */
            public boolean hasElDatumRun() {
                return ((bitField1_ & 0x00000100) == 0x00000100);
            }
            /**
             * <code>required bool elDatumRun = 41;</code>
             */
            public boolean getElDatumRun() {
                return elDatumRun_;
            }
            /**
             * <code>required bool elDatumRun = 41;</code>
             */
            public Builder setElDatumRun(boolean value) {
                bitField1_ |= 0x00000100;
                elDatumRun_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elDatumRun = 41;</code>
             */
            public Builder clearElDatumRun() {
                bitField1_ = (bitField1_ & ~0x00000100);
                elDatumRun_ = false;
                onChanged();
                return this;
            }

            private boolean azDatumRdy_ ;
            /**
             * <code>required bool azDatumRdy = 42;</code>
             */
            public boolean hasAzDatumRdy() {
                return ((bitField1_ & 0x00000200) == 0x00000200);
            }
            /**
             * <code>required bool azDatumRdy = 42;</code>
             */
            public boolean getAzDatumRdy() {
                return azDatumRdy_;
            }
            /**
             * <code>required bool azDatumRdy = 42;</code>
             */
            public Builder setAzDatumRdy(boolean value) {
                bitField1_ |= 0x00000200;
                azDatumRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azDatumRdy = 42;</code>
             */
            public Builder clearAzDatumRdy() {
                bitField1_ = (bitField1_ & ~0x00000200);
                azDatumRdy_ = false;
                onChanged();
                return this;
            }

            private boolean elDatumRdy_ ;
            /**
             * <code>required bool elDatumRdy = 43;</code>
             */
            public boolean hasElDatumRdy() {
                return ((bitField1_ & 0x00000400) == 0x00000400);
            }
            /**
             * <code>required bool elDatumRdy = 43;</code>
             */
            public boolean getElDatumRdy() {
                return elDatumRdy_;
            }
            /**
             * <code>required bool elDatumRdy = 43;</code>
             */
            public Builder setElDatumRdy(boolean value) {
                bitField1_ |= 0x00000400;
                elDatumRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elDatumRdy = 43;</code>
             */
            public Builder clearElDatumRdy() {
                bitField1_ = (bitField1_ & ~0x00000400);
                elDatumRdy_ = false;
                onChanged();
                return this;
            }

            private boolean azEncdrDatumed_ ;
            /**
             * <code>required bool azEncdrDatumed = 44;</code>
             */
            public boolean hasAzEncdrDatumed() {
                return ((bitField1_ & 0x00000800) == 0x00000800);
            }
            /**
             * <code>required bool azEncdrDatumed = 44;</code>
             */
            public boolean getAzEncdrDatumed() {
                return azEncdrDatumed_;
            }
            /**
             * <code>required bool azEncdrDatumed = 44;</code>
             */
            public Builder setAzEncdrDatumed(boolean value) {
                bitField1_ |= 0x00000800;
                azEncdrDatumed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azEncdrDatumed = 44;</code>
             */
            public Builder clearAzEncdrDatumed() {
                bitField1_ = (bitField1_ & ~0x00000800);
                azEncdrDatumed_ = false;
                onChanged();
                return this;
            }

            private boolean elEncdrDatumed_ ;
            /**
             * <code>required bool elEncdrDatumed = 45;</code>
             */
            public boolean hasElEncdrDatumed() {
                return ((bitField1_ & 0x00001000) == 0x00001000);
            }
            /**
             * <code>required bool elEncdrDatumed = 45;</code>
             */
            public boolean getElEncdrDatumed() {
                return elEncdrDatumed_;
            }
            /**
             * <code>required bool elEncdrDatumed = 45;</code>
             */
            public Builder setElEncdrDatumed(boolean value) {
                bitField1_ |= 0x00001000;
                elEncdrDatumed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elEncdrDatumed = 45;</code>
             */
            public Builder clearElEncdrDatumed() {
                bitField1_ = (bitField1_ & ~0x00001000);
                elEncdrDatumed_ = false;
                onChanged();
                return this;
            }

            private boolean azEncdrHeadNotUsed_ ;
            /**
             * <code>required bool azEncdrHeadNotUsed = 46;</code>
             */
            public boolean hasAzEncdrHeadNotUsed() {
                return ((bitField1_ & 0x00002000) == 0x00002000);
            }
            /**
             * <code>required bool azEncdrHeadNotUsed = 46;</code>
             */
            public boolean getAzEncdrHeadNotUsed() {
                return azEncdrHeadNotUsed_;
            }
            /**
             * <code>required bool azEncdrHeadNotUsed = 46;</code>
             */
            public Builder setAzEncdrHeadNotUsed(boolean value) {
                bitField1_ |= 0x00002000;
                azEncdrHeadNotUsed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azEncdrHeadNotUsed = 46;</code>
             */
            public Builder clearAzEncdrHeadNotUsed() {
                bitField1_ = (bitField1_ & ~0x00002000);
                azEncdrHeadNotUsed_ = false;
                onChanged();
                return this;
            }

            private boolean elEncdrHeadNotUsed_ ;
            /**
             * <code>required bool elEncdrHeadNotUsed = 47;</code>
             */
            public boolean hasElEncdrHeadNotUsed() {
                return ((bitField1_ & 0x00004000) == 0x00004000);
            }
            /**
             * <code>required bool elEncdrHeadNotUsed = 47;</code>
             */
            public boolean getElEncdrHeadNotUsed() {
                return elEncdrHeadNotUsed_;
            }
            /**
             * <code>required bool elEncdrHeadNotUsed = 47;</code>
             */
            public Builder setElEncdrHeadNotUsed(boolean value) {
                bitField1_ |= 0x00004000;
                elEncdrHeadNotUsed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elEncdrHeadNotUsed = 47;</code>
             */
            public Builder clearElEncdrHeadNotUsed() {
                bitField1_ = (bitField1_ & ~0x00004000);
                elEncdrHeadNotUsed_ = false;
                onChanged();
                return this;
            }

            private boolean azAbsEncdrNotUsed_ ;
            /**
             * <code>required bool azAbsEncdrNotUsed = 48;</code>
             */
            public boolean hasAzAbsEncdrNotUsed() {
                return ((bitField1_ & 0x00008000) == 0x00008000);
            }
            /**
             * <code>required bool azAbsEncdrNotUsed = 48;</code>
             */
            public boolean getAzAbsEncdrNotUsed() {
                return azAbsEncdrNotUsed_;
            }
            /**
             * <code>required bool azAbsEncdrNotUsed = 48;</code>
             */
            public Builder setAzAbsEncdrNotUsed(boolean value) {
                bitField1_ |= 0x00008000;
                azAbsEncdrNotUsed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azAbsEncdrNotUsed = 48;</code>
             */
            public Builder clearAzAbsEncdrNotUsed() {
                bitField1_ = (bitField1_ & ~0x00008000);
                azAbsEncdrNotUsed_ = false;
                onChanged();
                return this;
            }

            private boolean elAbsEncdrNotUsed_ ;
            /**
             * <code>required bool elAbsEncdrNotUsed = 49;</code>
             */
            public boolean hasElAbsEncdrNotUsed() {
                return ((bitField1_ & 0x00010000) == 0x00010000);
            }
            /**
             * <code>required bool elAbsEncdrNotUsed = 49;</code>
             */
            public boolean getElAbsEncdrNotUsed() {
                return elAbsEncdrNotUsed_;
            }
            /**
             * <code>required bool elAbsEncdrNotUsed = 49;</code>
             */
            public Builder setElAbsEncdrNotUsed(boolean value) {
                bitField1_ |= 0x00010000;
                elAbsEncdrNotUsed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elAbsEncdrNotUsed = 49;</code>
             */
            public Builder clearElAbsEncdrNotUsed() {
                bitField1_ = (bitField1_ & ~0x00010000);
                elAbsEncdrNotUsed_ = false;
                onChanged();
                return this;
            }

            private boolean azAmplNotUsed_ ;
            /**
             * <code>required bool azAmplNotUsed = 50;</code>
             */
            public boolean hasAzAmplNotUsed() {
                return ((bitField1_ & 0x00020000) == 0x00020000);
            }
            /**
             * <code>required bool azAmplNotUsed = 50;</code>
             */
            public boolean getAzAmplNotUsed() {
                return azAmplNotUsed_;
            }
            /**
             * <code>required bool azAmplNotUsed = 50;</code>
             */
            public Builder setAzAmplNotUsed(boolean value) {
                bitField1_ |= 0x00020000;
                azAmplNotUsed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azAmplNotUsed = 50;</code>
             */
            public Builder clearAzAmplNotUsed() {
                bitField1_ = (bitField1_ & ~0x00020000);
                azAmplNotUsed_ = false;
                onChanged();
                return this;
            }

            private boolean elAmplNotUsed_ ;
            /**
             * <code>required bool elAmplNotUsed = 51;</code>
             */
            public boolean hasElAmplNotUsed() {
                return ((bitField1_ & 0x00040000) == 0x00040000);
            }
            /**
             * <code>required bool elAmplNotUsed = 51;</code>
             */
            public boolean getElAmplNotUsed() {
                return elAmplNotUsed_;
            }
            /**
             * <code>required bool elAmplNotUsed = 51;</code>
             */
            public Builder setElAmplNotUsed(boolean value) {
                bitField1_ |= 0x00040000;
                elAmplNotUsed_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elAmplNotUsed = 51;</code>
             */
            public Builder clearElAmplNotUsed() {
                bitField1_ = (bitField1_ & ~0x00040000);
                elAmplNotUsed_ = false;
                onChanged();
                return this;
            }

            private boolean stowPosnOpn_ ;
            /**
             * <code>required bool stowPosnOpn = 52;</code>
             */
            public boolean hasStowPosnOpn() {
                return ((bitField1_ & 0x00080000) == 0x00080000);
            }
            /**
             * <code>required bool stowPosnOpn = 52;</code>
             */
            public boolean getStowPosnOpn() {
                return stowPosnOpn_;
            }
            /**
             * <code>required bool stowPosnOpn = 52;</code>
             */
            public Builder setStowPosnOpn(boolean value) {
                bitField1_ |= 0x00080000;
                stowPosnOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowPosnOpn = 52;</code>
             */
            public Builder clearStowPosnOpn() {
                bitField1_ = (bitField1_ & ~0x00080000);
                stowPosnOpn_ = false;
                onChanged();
                return this;
            }

            private boolean stowPosnRun_ ;
            /**
             * <code>required bool stowPosnRun = 53;</code>
             */
            public boolean hasStowPosnRun() {
                return ((bitField1_ & 0x00100000) == 0x00100000);
            }
            /**
             * <code>required bool stowPosnRun = 53;</code>
             */
            public boolean getStowPosnRun() {
                return stowPosnRun_;
            }
            /**
             * <code>required bool stowPosnRun = 53;</code>
             */
            public Builder setStowPosnRun(boolean value) {
                bitField1_ |= 0x00100000;
                stowPosnRun_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowPosnRun = 53;</code>
             */
            public Builder clearStowPosnRun() {
                bitField1_ = (bitField1_ & ~0x00100000);
                stowPosnRun_ = false;
                onChanged();
                return this;
            }

            private boolean stowPosnRdy_ ;
            /**
             * <code>required bool stowPosnRdy = 54;</code>
             */
            public boolean hasStowPosnRdy() {
                return ((bitField1_ & 0x00200000) == 0x00200000);
            }
            /**
             * <code>required bool stowPosnRdy = 54;</code>
             */
            public boolean getStowPosnRdy() {
                return stowPosnRdy_;
            }
            /**
             * <code>required bool stowPosnRdy = 54;</code>
             */
            public Builder setStowPosnRdy(boolean value) {
                bitField1_ |= 0x00200000;
                stowPosnRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowPosnRdy = 54;</code>
             */
            public Builder clearStowPosnRdy() {
                bitField1_ = (bitField1_ & ~0x00200000);
                stowPosnRdy_ = false;
                onChanged();
                return this;
            }

            private boolean stowInsrOpn_ ;
            /**
             * <code>required bool stowInsrOpn = 55;</code>
             */
            public boolean hasStowInsrOpn() {
                return ((bitField1_ & 0x00400000) == 0x00400000);
            }
            /**
             * <code>required bool stowInsrOpn = 55;</code>
             */
            public boolean getStowInsrOpn() {
                return stowInsrOpn_;
            }
            /**
             * <code>required bool stowInsrOpn = 55;</code>
             */
            public Builder setStowInsrOpn(boolean value) {
                bitField1_ |= 0x00400000;
                stowInsrOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowInsrOpn = 55;</code>
             */
            public Builder clearStowInsrOpn() {
                bitField1_ = (bitField1_ & ~0x00400000);
                stowInsrOpn_ = false;
                onChanged();
                return this;
            }

            private boolean stowInsrRun_ ;
            /**
             * <code>required bool stowInsrRun = 56;</code>
             */
            public boolean hasStowInsrRun() {
                return ((bitField1_ & 0x00800000) == 0x00800000);
            }
            /**
             * <code>required bool stowInsrRun = 56;</code>
             */
            public boolean getStowInsrRun() {
                return stowInsrRun_;
            }
            /**
             * <code>required bool stowInsrRun = 56;</code>
             */
            public Builder setStowInsrRun(boolean value) {
                bitField1_ |= 0x00800000;
                stowInsrRun_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowInsrRun = 56;</code>
             */
            public Builder clearStowInsrRun() {
                bitField1_ = (bitField1_ & ~0x00800000);
                stowInsrRun_ = false;
                onChanged();
                return this;
            }

            private boolean stowInsrRdy_ ;
            /**
             * <code>required bool stowInsrRdy = 57;</code>
             */
            public boolean hasStowInsrRdy() {
                return ((bitField1_ & 0x01000000) == 0x01000000);
            }
            /**
             * <code>required bool stowInsrRdy = 57;</code>
             */
            public boolean getStowInsrRdy() {
                return stowInsrRdy_;
            }
            /**
             * <code>required bool stowInsrRdy = 57;</code>
             */
            public Builder setStowInsrRdy(boolean value) {
                bitField1_ |= 0x01000000;
                stowInsrRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowInsrRdy = 57;</code>
             */
            public Builder clearStowInsrRdy() {
                bitField1_ = (bitField1_ & ~0x01000000);
                stowInsrRdy_ = false;
                onChanged();
                return this;
            }

            private boolean stowRetrOpn_ ;
            /**
             * <code>required bool stowRetrOpn = 58;</code>
             */
            public boolean hasStowRetrOpn() {
                return ((bitField1_ & 0x02000000) == 0x02000000);
            }
            /**
             * <code>required bool stowRetrOpn = 58;</code>
             */
            public boolean getStowRetrOpn() {
                return stowRetrOpn_;
            }
            /**
             * <code>required bool stowRetrOpn = 58;</code>
             */
            public Builder setStowRetrOpn(boolean value) {
                bitField1_ |= 0x02000000;
                stowRetrOpn_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowRetrOpn = 58;</code>
             */
            public Builder clearStowRetrOpn() {
                bitField1_ = (bitField1_ & ~0x02000000);
                stowRetrOpn_ = false;
                onChanged();
                return this;
            }

            private boolean stowRetrRun_ ;
            /**
             * <code>required bool stowRetrRun = 59;</code>
             */
            public boolean hasStowRetrRun() {
                return ((bitField1_ & 0x04000000) == 0x04000000);
            }
            /**
             * <code>required bool stowRetrRun = 59;</code>
             */
            public boolean getStowRetrRun() {
                return stowRetrRun_;
            }
            /**
             * <code>required bool stowRetrRun = 59;</code>
             */
            public Builder setStowRetrRun(boolean value) {
                bitField1_ |= 0x04000000;
                stowRetrRun_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowRetrRun = 59;</code>
             */
            public Builder clearStowRetrRun() {
                bitField1_ = (bitField1_ & ~0x04000000);
                stowRetrRun_ = false;
                onChanged();
                return this;
            }

            private boolean stowRetrRdy_ ;
            /**
             * <code>required bool stowRetrRdy = 60;</code>
             */
            public boolean hasStowRetrRdy() {
                return ((bitField1_ & 0x08000000) == 0x08000000);
            }
            /**
             * <code>required bool stowRetrRdy = 60;</code>
             */
            public boolean getStowRetrRdy() {
                return stowRetrRdy_;
            }
            /**
             * <code>required bool stowRetrRdy = 60;</code>
             */
            public Builder setStowRetrRdy(boolean value) {
                bitField1_ |= 0x08000000;
                stowRetrRdy_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool stowRetrRdy = 60;</code>
             */
            public Builder clearStowRetrRdy() {
                bitField1_ = (bitField1_ & ~0x08000000);
                stowRetrRdy_ = false;
                onChanged();
                return this;
            }

            private boolean azTapeEncdrDataLeapDet_ ;
            /**
             * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
             */
            public boolean hasAzTapeEncdrDataLeapDet() {
                return ((bitField1_ & 0x10000000) == 0x10000000);
            }
            /**
             * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
             */
            public boolean getAzTapeEncdrDataLeapDet() {
                return azTapeEncdrDataLeapDet_;
            }
            /**
             * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
             */
            public Builder setAzTapeEncdrDataLeapDet(boolean value) {
                bitField1_ |= 0x10000000;
                azTapeEncdrDataLeapDet_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azTapeEncdrDataLeapDet = 61;</code>
             */
            public Builder clearAzTapeEncdrDataLeapDet() {
                bitField1_ = (bitField1_ & ~0x10000000);
                azTapeEncdrDataLeapDet_ = false;
                onChanged();
                return this;
            }

            private boolean elTapeEncdrDataLeapDet_ ;
            /**
             * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
             */
            public boolean hasElTapeEncdrDataLeapDet() {
                return ((bitField1_ & 0x20000000) == 0x20000000);
            }
            /**
             * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
             */
            public boolean getElTapeEncdrDataLeapDet() {
                return elTapeEncdrDataLeapDet_;
            }
            /**
             * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
             */
            public Builder setElTapeEncdrDataLeapDet(boolean value) {
                bitField1_ |= 0x20000000;
                elTapeEncdrDataLeapDet_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elTapeEncdrDataLeapDet = 62;</code>
             */
            public Builder clearElTapeEncdrDataLeapDet() {
                bitField1_ = (bitField1_ & ~0x20000000);
                elTapeEncdrDataLeapDet_ = false;
                onChanged();
                return this;
            }

            private boolean azAbsEncdrDataLeapDet_ ;
            /**
             * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
             */
            public boolean hasAzAbsEncdrDataLeapDet() {
                return ((bitField1_ & 0x40000000) == 0x40000000);
            }
            /**
             * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
             */
            public boolean getAzAbsEncdrDataLeapDet() {
                return azAbsEncdrDataLeapDet_;
            }
            /**
             * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
             */
            public Builder setAzAbsEncdrDataLeapDet(boolean value) {
                bitField1_ |= 0x40000000;
                azAbsEncdrDataLeapDet_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azAbsEncdrDataLeapDet = 63;</code>
             */
            public Builder clearAzAbsEncdrDataLeapDet() {
                bitField1_ = (bitField1_ & ~0x40000000);
                azAbsEncdrDataLeapDet_ = false;
                onChanged();
                return this;
            }

            private long time_ ;
            /**
             * <code>required int64 time = 64;</code>
             *
             * <pre>
             *required bool azMotorTemps = 64;
             *required bool elMotorTemps = 64;
             * </pre>
             */
            public boolean hasTime() {
                return ((bitField1_ & 0x80000000) == 0x80000000);
            }
            /**
             * <code>required int64 time = 64;</code>
             *
             * <pre>
             *required bool azMotorTemps = 64;
             *required bool elMotorTemps = 64;
             * </pre>
             */
            public long getTime() {
                return time_;
            }
            /**
             * <code>required int64 time = 64;</code>
             *
             * <pre>
             *required bool azMotorTemps = 64;
             *required bool elMotorTemps = 64;
             * </pre>
             */
            public Builder setTime(long value) {
                bitField1_ |= 0x80000000;
                time_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 time = 64;</code>
             *
             * <pre>
             *required bool azMotorTemps = 64;
             *required bool elMotorTemps = 64;
             * </pre>
             */
            public Builder clearTime() {
                bitField1_ = (bitField1_ & ~0x80000000);
                time_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.McsDriveStatus)
        }

        static {
            defaultInstance = new McsDriveStatus(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.McsDriveStatus)
    }

    public interface MountControlDiagsOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.MountControlDiags)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required bool mcsInPosition = 1;</code>
         */
        boolean hasMcsInPosition();
        /**
         * <code>required bool mcsInPosition = 1;</code>
         */
        boolean getMcsInPosition();

        /**
         * <code>required bool azInPosition = 2;</code>
         */
        boolean hasAzInPosition();
        /**
         * <code>required bool azInPosition = 2;</code>
         */
        boolean getAzInPosition();

        /**
         * <code>required bool elInPosition = 3;</code>
         */
        boolean hasElInPosition();
        /**
         * <code>required bool elInPosition = 3;</code>
         */
        boolean getElInPosition();

        /**
         * <code>required double azPosition = 4;</code>
         */
        boolean hasAzPosition();
        /**
         * <code>required double azPosition = 4;</code>
         */
        double getAzPosition();

        /**
         * <code>required double elPosition = 5;</code>
         */
        boolean hasElPosition();
        /**
         * <code>required double elPosition = 5;</code>
         */
        double getElPosition();

        /**
         * <code>required double azPosDemand = 6;</code>
         */
        boolean hasAzPosDemand();
        /**
         * <code>required double azPosDemand = 6;</code>
         */
        double getAzPosDemand();

        /**
         * <code>required double elPosDemand = 7;</code>
         */
        boolean hasElPosDemand();
        /**
         * <code>required double elPosDemand = 7;</code>
         */
        double getElPosDemand();

        /**
         * <code>required double azPosError = 8;</code>
         */
        boolean hasAzPosError();
        /**
         * <code>required double azPosError = 8;</code>
         */
        double getAzPosError();

        /**
         * <code>required double elPosError = 9;</code>
         */
        boolean hasElPosError();
        /**
         * <code>required double elPosError = 9;</code>
         */
        double getElPosError();

        /**
         * <code>required double azVelocity = 10;</code>
         */
        boolean hasAzVelocity();
        /**
         * <code>required double azVelocity = 10;</code>
         */
        double getAzVelocity();

        /**
         * <code>required double elVelocity = 11;</code>
         */
        boolean hasElVelocity();
        /**
         * <code>required double elVelocity = 11;</code>
         */
        double getElVelocity();

        /**
         * <code>required double azVelocityDemand = 12;</code>
         */
        boolean hasAzVelocityDemand();
        /**
         * <code>required double azVelocityDemand = 12;</code>
         */
        double getAzVelocityDemand();

        /**
         * <code>required double elVelocityDemand = 13;</code>
         */
        boolean hasElVelocityDemand();
        /**
         * <code>required double elVelocityDemand = 13;</code>
         */
        double getElVelocityDemand();

        /**
         * <code>required double azVelocityError = 14;</code>
         */
        boolean hasAzVelocityError();
        /**
         * <code>required double azVelocityError = 14;</code>
         */
        double getAzVelocityError();

        /**
         * <code>required double elVelocityError = 15;</code>
         */
        boolean hasElVelocityError();
        /**
         * <code>required double elVelocityError = 15;</code>
         */
        double getElVelocityError();

        /**
         * <code>required double azAcceleration = 16;</code>
         */
        boolean hasAzAcceleration();
        /**
         * <code>required double azAcceleration = 16;</code>
         */
        double getAzAcceleration();

        /**
         * <code>required double elAcceleration = 17;</code>
         */
        boolean hasElAcceleration();
        /**
         * <code>required double elAcceleration = 17;</code>
         */
        double getElAcceleration();

        /**
         * <code>required double azTorqueDemand = 18;</code>
         */
        boolean hasAzTorqueDemand();
        /**
         * <code>required double azTorqueDemand = 18;</code>
         */
        double getAzTorqueDemand();

        /**
         * <code>required double elTorqueDemand = 19;</code>
         */
        boolean hasElTorqueDemand();
        /**
         * <code>required double elTorqueDemand = 19;</code>
         */
        double getElTorqueDemand();

        /**
         * <code>required int32 azEncoderPositions = 20;</code>
         */
        boolean hasAzEncoderPositions();
        /**
         * <code>required int32 azEncoderPositions = 20;</code>
         */
        int getAzEncoderPositions();

        /**
         * <code>required int32 elEncoderPositions = 21;</code>
         */
        boolean hasElEncoderPositions();
        /**
         * <code>required int32 elEncoderPositions = 21;</code>
         */
        int getElEncoderPositions();

        /**
         * <code>required float azDriveCurrents = 22;</code>
         */
        boolean hasAzDriveCurrents();
        /**
         * <code>required float azDriveCurrents = 22;</code>
         */
        float getAzDriveCurrents();

        /**
         * <code>required float elDriveCurrents = 23;</code>
         */
        boolean hasElDriveCurrents();
        /**
         * <code>required float elDriveCurrents = 23;</code>
         */
        float getElDriveCurrents();

        /**
         * <code>required double encoderLatchingTime = 24;</code>
         */
        boolean hasEncoderLatchingTime();
        /**
         * <code>required double encoderLatchingTime = 24;</code>
         */
        double getEncoderLatchingTime();

        /**
         * <code>required double azWrapPos = 25;</code>
         */
        boolean hasAzWrapPos();
        /**
         * <code>required double azWrapPos = 25;</code>
         */
        double getAzWrapPos();

        /**
         * <code>required double azWrapPosDemand = 26;</code>
         */
        boolean hasAzWrapPosDemand();
        /**
         * <code>required double azWrapPosDemand = 26;</code>
         */
        double getAzWrapPosDemand();

        /**
         * <code>required double azWrapPosError = 27;</code>
         */
        boolean hasAzWrapPosError();
        /**
         * <code>required double azWrapPosError = 27;</code>
         */
        double getAzWrapPosError();

        /**
         * <code>required double azWrapVelocity = 28;</code>
         */
        boolean hasAzWrapVelocity();
        /**
         * <code>required double azWrapVelocity = 28;</code>
         */
        double getAzWrapVelocity();

        /**
         * <code>required double azWrapVelocityDemand = 29;</code>
         */
        boolean hasAzWrapVelocityDemand();
        /**
         * <code>required double azWrapVelocityDemand = 29;</code>
         */
        double getAzWrapVelocityDemand();

        /**
         * <code>required double azWrapVelocityError = 30;</code>
         */
        boolean hasAzWrapVelocityError();
        /**
         * <code>required double azWrapVelocityError = 30;</code>
         */
        double getAzWrapVelocityError();

        /**
         * <code>required double azWrapAcceleration = 31;</code>
         */
        boolean hasAzWrapAcceleration();
        /**
         * <code>required double azWrapAcceleration = 31;</code>
         */
        double getAzWrapAcceleration();

        /**
         * <code>required double azWrapTorqueDemand = 32;</code>
         */
        boolean hasAzWrapTorqueDemand();
        /**
         * <code>required double azWrapTorqueDemand = 32;</code>
         */
        double getAzWrapTorqueDemand();

        /**
         * <code>required float azWrapDriveCurrents = 33;</code>
         */
        boolean hasAzWrapDriveCurrents();
        /**
         * <code>required float azWrapDriveCurrents = 33;</code>
         */
        float getAzWrapDriveCurrents();

        /**
         * <code>required double azPosXp = 34;</code>
         */
        boolean hasAzPosXp();
        /**
         * <code>required double azPosXp = 34;</code>
         */
        double getAzPosXp();

        /**
         * <code>required double azPosXm = 35;</code>
         */
        boolean hasAzPosXm();
        /**
         * <code>required double azPosXm = 35;</code>
         */
        double getAzPosXm();

        /**
         * <code>required double elPosXp = 36;</code>
         */
        boolean hasElPosXp();
        /**
         * <code>required double elPosXp = 36;</code>
         */
        double getElPosXp();

        /**
         * <code>required double elPosXm = 37;</code>
         */
        boolean hasElPosXm();
        /**
         * <code>required double elPosXm = 37;</code>
         */
        double getElPosXm();

        /**
         * <code>required double azPosByHead = 38;</code>
         */
        boolean hasAzPosByHead();
        /**
         * <code>required double azPosByHead = 38;</code>
         */
        double getAzPosByHead();

        /**
         * <code>required double elPosByHead = 39;</code>
         */
        boolean hasElPosByHead();
        /**
         * <code>required double elPosByHead = 39;</code>
         */
        double getElPosByHead();

        /**
         * <code>required int32 azNumOfStoredDemand = 40;</code>
         */
        boolean hasAzNumOfStoredDemand();
        /**
         * <code>required int32 azNumOfStoredDemand = 40;</code>
         */
        int getAzNumOfStoredDemand();

        /**
         * <code>required int32 elNumOfStoredDemand = 41;</code>
         */
        boolean hasElNumOfStoredDemand();
        /**
         * <code>required int32 elNumOfStoredDemand = 41;</code>
         */
        int getElNumOfStoredDemand();

        /**
         * <code>required int32 eibTriggerCounter = 42;</code>
         */
        boolean hasEibTriggerCounter();
        /**
         * <code>required int32 eibTriggerCounter = 42;</code>
         */
        int getEibTriggerCounter();

        /**
         * <code>required int32 eibStatusWord = 43;</code>
         */
        boolean hasEibStatusWord();
        /**
         * <code>required int32 eibStatusWord = 43;</code>
         */
        int getEibStatusWord();

        /**
         * <code>required int32 eibTimestamp = 44;</code>
         */
        boolean hasEibTimestamp();
        /**
         * <code>required int32 eibTimestamp = 44;</code>
         */
        int getEibTimestamp();

        /**
         * <code>required int64 eibReferencePosition1 = 45;</code>
         */
        boolean hasEibReferencePosition1();
        /**
         * <code>required int64 eibReferencePosition1 = 45;</code>
         */
        long getEibReferencePosition1();

        /**
         * <code>required int64 eibDCReferencePosition = 46;</code>
         */
        boolean hasEibDCReferencePosition();
        /**
         * <code>required int64 eibDCReferencePosition = 46;</code>
         */
        long getEibDCReferencePosition();

        /**
         * <code>required double azPosByAbs = 47;</code>
         */
        boolean hasAzPosByAbs();
        /**
         * <code>required double azPosByAbs = 47;</code>
         */
        double getAzPosByAbs();

        /**
         * <code>required double elPosByAbs = 48;</code>
         */
        boolean hasElPosByAbs();
        /**
         * <code>required double elPosByAbs = 48;</code>
         */
        double getElPosByAbs();

        /**
         * <code>required double azPosErrA = 49;</code>
         */
        boolean hasAzPosErrA();
        /**
         * <code>required double azPosErrA = 49;</code>
         */
        double getAzPosErrA();

        /**
         * <code>required double azPosErrB = 50;</code>
         */
        boolean hasAzPosErrB();
        /**
         * <code>required double azPosErrB = 50;</code>
         */
        double getAzPosErrB();

        /**
         * <code>required double elPosErrA = 51;</code>
         */
        boolean hasElPosErrA();
        /**
         * <code>required double elPosErrA = 51;</code>
         */
        double getElPosErrA();

        /**
         * <code>required double elPosErrB = 52;</code>
         */
        boolean hasElPosErrB();
        /**
         * <code>required double elPosErrB = 52;</code>
         */
        double getElPosErrB();

        /**
         * <code>required double azPosTestInput = 53;</code>
         */
        boolean hasAzPosTestInput();
        /**
         * <code>required double azPosTestInput = 53;</code>
         */
        double getAzPosTestInput();

        /**
         * <code>required double elPosTestInput = 54;</code>
         */
        boolean hasElPosTestInput();
        /**
         * <code>required double elPosTestInput = 54;</code>
         */
        double getElPosTestInput();

        /**
         * <code>required double azMaxVelTestInput = 55;</code>
         */
        boolean hasAzMaxVelTestInput();
        /**
         * <code>required double azMaxVelTestInput = 55;</code>
         */
        double getAzMaxVelTestInput();

        /**
         * <code>required double elMaxVelTestInput = 56;</code>
         */
        boolean hasElMaxVelTestInput();
        /**
         * <code>required double elMaxVelTestInput = 56;</code>
         */
        double getElMaxVelTestInput();

        /**
         * <code>required double azMinVelTestInput = 57;</code>
         */
        boolean hasAzMinVelTestInput();
        /**
         * <code>required double azMinVelTestInput = 57;</code>
         */
        double getAzMinVelTestInput();

        /**
         * <code>required double elMinVelTestInput = 58;</code>
         */
        boolean hasElMinVelTestInput();
        /**
         * <code>required double elMinVelTestInput = 58;</code>
         */
        double getElMinVelTestInput();

        /**
         * <code>required double azTrqTestInput = 59;</code>
         */
        boolean hasAzTrqTestInput();
        /**
         * <code>required double azTrqTestInput = 59;</code>
         */
        double getAzTrqTestInput();

        /**
         * <code>required double elTrqTestInput = 60;</code>
         */
        boolean hasElTrqTestInput();
        /**
         * <code>required double elTrqTestInput = 60;</code>
         */
        double getElTrqTestInput();

        /**
         * <code>required int64 time = 61;</code>
         */
        boolean hasTime();
        /**
         * <code>required int64 time = 61;</code>
         */
        long getTime();
    }
    /**
     * Protobuf type {@code eventpoc.MountControlDiags}
     */
    public static final class MountControlDiags extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.MountControlDiags)
            MountControlDiagsOrBuilder {
        // Use MountControlDiags.newBuilder() to construct.
        private MountControlDiags(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private MountControlDiags(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final MountControlDiags defaultInstance;
        public static MountControlDiags getDefaultInstance() {
            return defaultInstance;
        }

        public MountControlDiags getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private MountControlDiags(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            int mutable_bitField1_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            mcsInPosition_ = input.readBool();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            azInPosition_ = input.readBool();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            elInPosition_ = input.readBool();
                            break;
                        }
                        case 33: {
                            bitField0_ |= 0x00000008;
                            azPosition_ = input.readDouble();
                            break;
                        }
                        case 41: {
                            bitField0_ |= 0x00000010;
                            elPosition_ = input.readDouble();
                            break;
                        }
                        case 49: {
                            bitField0_ |= 0x00000020;
                            azPosDemand_ = input.readDouble();
                            break;
                        }
                        case 57: {
                            bitField0_ |= 0x00000040;
                            elPosDemand_ = input.readDouble();
                            break;
                        }
                        case 65: {
                            bitField0_ |= 0x00000080;
                            azPosError_ = input.readDouble();
                            break;
                        }
                        case 73: {
                            bitField0_ |= 0x00000100;
                            elPosError_ = input.readDouble();
                            break;
                        }
                        case 81: {
                            bitField0_ |= 0x00000200;
                            azVelocity_ = input.readDouble();
                            break;
                        }
                        case 89: {
                            bitField0_ |= 0x00000400;
                            elVelocity_ = input.readDouble();
                            break;
                        }
                        case 97: {
                            bitField0_ |= 0x00000800;
                            azVelocityDemand_ = input.readDouble();
                            break;
                        }
                        case 105: {
                            bitField0_ |= 0x00001000;
                            elVelocityDemand_ = input.readDouble();
                            break;
                        }
                        case 113: {
                            bitField0_ |= 0x00002000;
                            azVelocityError_ = input.readDouble();
                            break;
                        }
                        case 121: {
                            bitField0_ |= 0x00004000;
                            elVelocityError_ = input.readDouble();
                            break;
                        }
                        case 129: {
                            bitField0_ |= 0x00008000;
                            azAcceleration_ = input.readDouble();
                            break;
                        }
                        case 137: {
                            bitField0_ |= 0x00010000;
                            elAcceleration_ = input.readDouble();
                            break;
                        }
                        case 145: {
                            bitField0_ |= 0x00020000;
                            azTorqueDemand_ = input.readDouble();
                            break;
                        }
                        case 153: {
                            bitField0_ |= 0x00040000;
                            elTorqueDemand_ = input.readDouble();
                            break;
                        }
                        case 160: {
                            bitField0_ |= 0x00080000;
                            azEncoderPositions_ = input.readInt32();
                            break;
                        }
                        case 168: {
                            bitField0_ |= 0x00100000;
                            elEncoderPositions_ = input.readInt32();
                            break;
                        }
                        case 181: {
                            bitField0_ |= 0x00200000;
                            azDriveCurrents_ = input.readFloat();
                            break;
                        }
                        case 189: {
                            bitField0_ |= 0x00400000;
                            elDriveCurrents_ = input.readFloat();
                            break;
                        }
                        case 193: {
                            bitField0_ |= 0x00800000;
                            encoderLatchingTime_ = input.readDouble();
                            break;
                        }
                        case 201: {
                            bitField0_ |= 0x01000000;
                            azWrapPos_ = input.readDouble();
                            break;
                        }
                        case 209: {
                            bitField0_ |= 0x02000000;
                            azWrapPosDemand_ = input.readDouble();
                            break;
                        }
                        case 217: {
                            bitField0_ |= 0x04000000;
                            azWrapPosError_ = input.readDouble();
                            break;
                        }
                        case 225: {
                            bitField0_ |= 0x08000000;
                            azWrapVelocity_ = input.readDouble();
                            break;
                        }
                        case 233: {
                            bitField0_ |= 0x10000000;
                            azWrapVelocityDemand_ = input.readDouble();
                            break;
                        }
                        case 241: {
                            bitField0_ |= 0x20000000;
                            azWrapVelocityError_ = input.readDouble();
                            break;
                        }
                        case 249: {
                            bitField0_ |= 0x40000000;
                            azWrapAcceleration_ = input.readDouble();
                            break;
                        }
                        case 257: {
                            bitField0_ |= 0x80000000;
                            azWrapTorqueDemand_ = input.readDouble();
                            break;
                        }
                        case 269: {
                            bitField1_ |= 0x00000001;
                            azWrapDriveCurrents_ = input.readFloat();
                            break;
                        }
                        case 273: {
                            bitField1_ |= 0x00000002;
                            azPosXp_ = input.readDouble();
                            break;
                        }
                        case 281: {
                            bitField1_ |= 0x00000004;
                            azPosXm_ = input.readDouble();
                            break;
                        }
                        case 289: {
                            bitField1_ |= 0x00000008;
                            elPosXp_ = input.readDouble();
                            break;
                        }
                        case 297: {
                            bitField1_ |= 0x00000010;
                            elPosXm_ = input.readDouble();
                            break;
                        }
                        case 305: {
                            bitField1_ |= 0x00000020;
                            azPosByHead_ = input.readDouble();
                            break;
                        }
                        case 313: {
                            bitField1_ |= 0x00000040;
                            elPosByHead_ = input.readDouble();
                            break;
                        }
                        case 320: {
                            bitField1_ |= 0x00000080;
                            azNumOfStoredDemand_ = input.readInt32();
                            break;
                        }
                        case 328: {
                            bitField1_ |= 0x00000100;
                            elNumOfStoredDemand_ = input.readInt32();
                            break;
                        }
                        case 336: {
                            bitField1_ |= 0x00000200;
                            eibTriggerCounter_ = input.readInt32();
                            break;
                        }
                        case 344: {
                            bitField1_ |= 0x00000400;
                            eibStatusWord_ = input.readInt32();
                            break;
                        }
                        case 352: {
                            bitField1_ |= 0x00000800;
                            eibTimestamp_ = input.readInt32();
                            break;
                        }
                        case 360: {
                            bitField1_ |= 0x00001000;
                            eibReferencePosition1_ = input.readInt64();
                            break;
                        }
                        case 368: {
                            bitField1_ |= 0x00002000;
                            eibDCReferencePosition_ = input.readInt64();
                            break;
                        }
                        case 377: {
                            bitField1_ |= 0x00004000;
                            azPosByAbs_ = input.readDouble();
                            break;
                        }
                        case 385: {
                            bitField1_ |= 0x00008000;
                            elPosByAbs_ = input.readDouble();
                            break;
                        }
                        case 393: {
                            bitField1_ |= 0x00010000;
                            azPosErrA_ = input.readDouble();
                            break;
                        }
                        case 401: {
                            bitField1_ |= 0x00020000;
                            azPosErrB_ = input.readDouble();
                            break;
                        }
                        case 409: {
                            bitField1_ |= 0x00040000;
                            elPosErrA_ = input.readDouble();
                            break;
                        }
                        case 417: {
                            bitField1_ |= 0x00080000;
                            elPosErrB_ = input.readDouble();
                            break;
                        }
                        case 425: {
                            bitField1_ |= 0x00100000;
                            azPosTestInput_ = input.readDouble();
                            break;
                        }
                        case 433: {
                            bitField1_ |= 0x00200000;
                            elPosTestInput_ = input.readDouble();
                            break;
                        }
                        case 441: {
                            bitField1_ |= 0x00400000;
                            azMaxVelTestInput_ = input.readDouble();
                            break;
                        }
                        case 449: {
                            bitField1_ |= 0x00800000;
                            elMaxVelTestInput_ = input.readDouble();
                            break;
                        }
                        case 457: {
                            bitField1_ |= 0x01000000;
                            azMinVelTestInput_ = input.readDouble();
                            break;
                        }
                        case 465: {
                            bitField1_ |= 0x02000000;
                            elMinVelTestInput_ = input.readDouble();
                            break;
                        }
                        case 473: {
                            bitField1_ |= 0x04000000;
                            azTrqTestInput_ = input.readDouble();
                            break;
                        }
                        case 481: {
                            bitField1_ |= 0x08000000;
                            elTrqTestInput_ = input.readDouble();
                            break;
                        }
                        case 488: {
                            bitField1_ |= 0x10000000;
                            time_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_MountControlDiags_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_MountControlDiags_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.Builder.class);
        }

        public static com.google.protobuf.Parser<MountControlDiags> PARSER =
                new com.google.protobuf.AbstractParser<MountControlDiags>() {
                    public MountControlDiags parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new MountControlDiags(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<MountControlDiags> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        private int bitField1_;
        public static final int MCSINPOSITION_FIELD_NUMBER = 1;
        private boolean mcsInPosition_;
        /**
         * <code>required bool mcsInPosition = 1;</code>
         */
        public boolean hasMcsInPosition() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required bool mcsInPosition = 1;</code>
         */
        public boolean getMcsInPosition() {
            return mcsInPosition_;
        }

        public static final int AZINPOSITION_FIELD_NUMBER = 2;
        private boolean azInPosition_;
        /**
         * <code>required bool azInPosition = 2;</code>
         */
        public boolean hasAzInPosition() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required bool azInPosition = 2;</code>
         */
        public boolean getAzInPosition() {
            return azInPosition_;
        }

        public static final int ELINPOSITION_FIELD_NUMBER = 3;
        private boolean elInPosition_;
        /**
         * <code>required bool elInPosition = 3;</code>
         */
        public boolean hasElInPosition() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required bool elInPosition = 3;</code>
         */
        public boolean getElInPosition() {
            return elInPosition_;
        }

        public static final int AZPOSITION_FIELD_NUMBER = 4;
        private double azPosition_;
        /**
         * <code>required double azPosition = 4;</code>
         */
        public boolean hasAzPosition() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required double azPosition = 4;</code>
         */
        public double getAzPosition() {
            return azPosition_;
        }

        public static final int ELPOSITION_FIELD_NUMBER = 5;
        private double elPosition_;
        /**
         * <code>required double elPosition = 5;</code>
         */
        public boolean hasElPosition() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required double elPosition = 5;</code>
         */
        public double getElPosition() {
            return elPosition_;
        }

        public static final int AZPOSDEMAND_FIELD_NUMBER = 6;
        private double azPosDemand_;
        /**
         * <code>required double azPosDemand = 6;</code>
         */
        public boolean hasAzPosDemand() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required double azPosDemand = 6;</code>
         */
        public double getAzPosDemand() {
            return azPosDemand_;
        }

        public static final int ELPOSDEMAND_FIELD_NUMBER = 7;
        private double elPosDemand_;
        /**
         * <code>required double elPosDemand = 7;</code>
         */
        public boolean hasElPosDemand() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required double elPosDemand = 7;</code>
         */
        public double getElPosDemand() {
            return elPosDemand_;
        }

        public static final int AZPOSERROR_FIELD_NUMBER = 8;
        private double azPosError_;
        /**
         * <code>required double azPosError = 8;</code>
         */
        public boolean hasAzPosError() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required double azPosError = 8;</code>
         */
        public double getAzPosError() {
            return azPosError_;
        }

        public static final int ELPOSERROR_FIELD_NUMBER = 9;
        private double elPosError_;
        /**
         * <code>required double elPosError = 9;</code>
         */
        public boolean hasElPosError() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>required double elPosError = 9;</code>
         */
        public double getElPosError() {
            return elPosError_;
        }

        public static final int AZVELOCITY_FIELD_NUMBER = 10;
        private double azVelocity_;
        /**
         * <code>required double azVelocity = 10;</code>
         */
        public boolean hasAzVelocity() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>required double azVelocity = 10;</code>
         */
        public double getAzVelocity() {
            return azVelocity_;
        }

        public static final int ELVELOCITY_FIELD_NUMBER = 11;
        private double elVelocity_;
        /**
         * <code>required double elVelocity = 11;</code>
         */
        public boolean hasElVelocity() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>required double elVelocity = 11;</code>
         */
        public double getElVelocity() {
            return elVelocity_;
        }

        public static final int AZVELOCITYDEMAND_FIELD_NUMBER = 12;
        private double azVelocityDemand_;
        /**
         * <code>required double azVelocityDemand = 12;</code>
         */
        public boolean hasAzVelocityDemand() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>required double azVelocityDemand = 12;</code>
         */
        public double getAzVelocityDemand() {
            return azVelocityDemand_;
        }

        public static final int ELVELOCITYDEMAND_FIELD_NUMBER = 13;
        private double elVelocityDemand_;
        /**
         * <code>required double elVelocityDemand = 13;</code>
         */
        public boolean hasElVelocityDemand() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>required double elVelocityDemand = 13;</code>
         */
        public double getElVelocityDemand() {
            return elVelocityDemand_;
        }

        public static final int AZVELOCITYERROR_FIELD_NUMBER = 14;
        private double azVelocityError_;
        /**
         * <code>required double azVelocityError = 14;</code>
         */
        public boolean hasAzVelocityError() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>required double azVelocityError = 14;</code>
         */
        public double getAzVelocityError() {
            return azVelocityError_;
        }

        public static final int ELVELOCITYERROR_FIELD_NUMBER = 15;
        private double elVelocityError_;
        /**
         * <code>required double elVelocityError = 15;</code>
         */
        public boolean hasElVelocityError() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>required double elVelocityError = 15;</code>
         */
        public double getElVelocityError() {
            return elVelocityError_;
        }

        public static final int AZACCELERATION_FIELD_NUMBER = 16;
        private double azAcceleration_;
        /**
         * <code>required double azAcceleration = 16;</code>
         */
        public boolean hasAzAcceleration() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>required double azAcceleration = 16;</code>
         */
        public double getAzAcceleration() {
            return azAcceleration_;
        }

        public static final int ELACCELERATION_FIELD_NUMBER = 17;
        private double elAcceleration_;
        /**
         * <code>required double elAcceleration = 17;</code>
         */
        public boolean hasElAcceleration() {
            return ((bitField0_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>required double elAcceleration = 17;</code>
         */
        public double getElAcceleration() {
            return elAcceleration_;
        }

        public static final int AZTORQUEDEMAND_FIELD_NUMBER = 18;
        private double azTorqueDemand_;
        /**
         * <code>required double azTorqueDemand = 18;</code>
         */
        public boolean hasAzTorqueDemand() {
            return ((bitField0_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>required double azTorqueDemand = 18;</code>
         */
        public double getAzTorqueDemand() {
            return azTorqueDemand_;
        }

        public static final int ELTORQUEDEMAND_FIELD_NUMBER = 19;
        private double elTorqueDemand_;
        /**
         * <code>required double elTorqueDemand = 19;</code>
         */
        public boolean hasElTorqueDemand() {
            return ((bitField0_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>required double elTorqueDemand = 19;</code>
         */
        public double getElTorqueDemand() {
            return elTorqueDemand_;
        }

        public static final int AZENCODERPOSITIONS_FIELD_NUMBER = 20;
        private int azEncoderPositions_;
        /**
         * <code>required int32 azEncoderPositions = 20;</code>
         */
        public boolean hasAzEncoderPositions() {
            return ((bitField0_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>required int32 azEncoderPositions = 20;</code>
         */
        public int getAzEncoderPositions() {
            return azEncoderPositions_;
        }

        public static final int ELENCODERPOSITIONS_FIELD_NUMBER = 21;
        private int elEncoderPositions_;
        /**
         * <code>required int32 elEncoderPositions = 21;</code>
         */
        public boolean hasElEncoderPositions() {
            return ((bitField0_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>required int32 elEncoderPositions = 21;</code>
         */
        public int getElEncoderPositions() {
            return elEncoderPositions_;
        }

        public static final int AZDRIVECURRENTS_FIELD_NUMBER = 22;
        private float azDriveCurrents_;
        /**
         * <code>required float azDriveCurrents = 22;</code>
         */
        public boolean hasAzDriveCurrents() {
            return ((bitField0_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>required float azDriveCurrents = 22;</code>
         */
        public float getAzDriveCurrents() {
            return azDriveCurrents_;
        }

        public static final int ELDRIVECURRENTS_FIELD_NUMBER = 23;
        private float elDriveCurrents_;
        /**
         * <code>required float elDriveCurrents = 23;</code>
         */
        public boolean hasElDriveCurrents() {
            return ((bitField0_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>required float elDriveCurrents = 23;</code>
         */
        public float getElDriveCurrents() {
            return elDriveCurrents_;
        }

        public static final int ENCODERLATCHINGTIME_FIELD_NUMBER = 24;
        private double encoderLatchingTime_;
        /**
         * <code>required double encoderLatchingTime = 24;</code>
         */
        public boolean hasEncoderLatchingTime() {
            return ((bitField0_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>required double encoderLatchingTime = 24;</code>
         */
        public double getEncoderLatchingTime() {
            return encoderLatchingTime_;
        }

        public static final int AZWRAPPOS_FIELD_NUMBER = 25;
        private double azWrapPos_;
        /**
         * <code>required double azWrapPos = 25;</code>
         */
        public boolean hasAzWrapPos() {
            return ((bitField0_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>required double azWrapPos = 25;</code>
         */
        public double getAzWrapPos() {
            return azWrapPos_;
        }

        public static final int AZWRAPPOSDEMAND_FIELD_NUMBER = 26;
        private double azWrapPosDemand_;
        /**
         * <code>required double azWrapPosDemand = 26;</code>
         */
        public boolean hasAzWrapPosDemand() {
            return ((bitField0_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>required double azWrapPosDemand = 26;</code>
         */
        public double getAzWrapPosDemand() {
            return azWrapPosDemand_;
        }

        public static final int AZWRAPPOSERROR_FIELD_NUMBER = 27;
        private double azWrapPosError_;
        /**
         * <code>required double azWrapPosError = 27;</code>
         */
        public boolean hasAzWrapPosError() {
            return ((bitField0_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>required double azWrapPosError = 27;</code>
         */
        public double getAzWrapPosError() {
            return azWrapPosError_;
        }

        public static final int AZWRAPVELOCITY_FIELD_NUMBER = 28;
        private double azWrapVelocity_;
        /**
         * <code>required double azWrapVelocity = 28;</code>
         */
        public boolean hasAzWrapVelocity() {
            return ((bitField0_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>required double azWrapVelocity = 28;</code>
         */
        public double getAzWrapVelocity() {
            return azWrapVelocity_;
        }

        public static final int AZWRAPVELOCITYDEMAND_FIELD_NUMBER = 29;
        private double azWrapVelocityDemand_;
        /**
         * <code>required double azWrapVelocityDemand = 29;</code>
         */
        public boolean hasAzWrapVelocityDemand() {
            return ((bitField0_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>required double azWrapVelocityDemand = 29;</code>
         */
        public double getAzWrapVelocityDemand() {
            return azWrapVelocityDemand_;
        }

        public static final int AZWRAPVELOCITYERROR_FIELD_NUMBER = 30;
        private double azWrapVelocityError_;
        /**
         * <code>required double azWrapVelocityError = 30;</code>
         */
        public boolean hasAzWrapVelocityError() {
            return ((bitField0_ & 0x20000000) == 0x20000000);
        }
        /**
         * <code>required double azWrapVelocityError = 30;</code>
         */
        public double getAzWrapVelocityError() {
            return azWrapVelocityError_;
        }

        public static final int AZWRAPACCELERATION_FIELD_NUMBER = 31;
        private double azWrapAcceleration_;
        /**
         * <code>required double azWrapAcceleration = 31;</code>
         */
        public boolean hasAzWrapAcceleration() {
            return ((bitField0_ & 0x40000000) == 0x40000000);
        }
        /**
         * <code>required double azWrapAcceleration = 31;</code>
         */
        public double getAzWrapAcceleration() {
            return azWrapAcceleration_;
        }

        public static final int AZWRAPTORQUEDEMAND_FIELD_NUMBER = 32;
        private double azWrapTorqueDemand_;
        /**
         * <code>required double azWrapTorqueDemand = 32;</code>
         */
        public boolean hasAzWrapTorqueDemand() {
            return ((bitField0_ & 0x80000000) == 0x80000000);
        }
        /**
         * <code>required double azWrapTorqueDemand = 32;</code>
         */
        public double getAzWrapTorqueDemand() {
            return azWrapTorqueDemand_;
        }

        public static final int AZWRAPDRIVECURRENTS_FIELD_NUMBER = 33;
        private float azWrapDriveCurrents_;
        /**
         * <code>required float azWrapDriveCurrents = 33;</code>
         */
        public boolean hasAzWrapDriveCurrents() {
            return ((bitField1_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required float azWrapDriveCurrents = 33;</code>
         */
        public float getAzWrapDriveCurrents() {
            return azWrapDriveCurrents_;
        }

        public static final int AZPOSXP_FIELD_NUMBER = 34;
        private double azPosXp_;
        /**
         * <code>required double azPosXp = 34;</code>
         */
        public boolean hasAzPosXp() {
            return ((bitField1_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required double azPosXp = 34;</code>
         */
        public double getAzPosXp() {
            return azPosXp_;
        }

        public static final int AZPOSXM_FIELD_NUMBER = 35;
        private double azPosXm_;
        /**
         * <code>required double azPosXm = 35;</code>
         */
        public boolean hasAzPosXm() {
            return ((bitField1_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required double azPosXm = 35;</code>
         */
        public double getAzPosXm() {
            return azPosXm_;
        }

        public static final int ELPOSXP_FIELD_NUMBER = 36;
        private double elPosXp_;
        /**
         * <code>required double elPosXp = 36;</code>
         */
        public boolean hasElPosXp() {
            return ((bitField1_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required double elPosXp = 36;</code>
         */
        public double getElPosXp() {
            return elPosXp_;
        }

        public static final int ELPOSXM_FIELD_NUMBER = 37;
        private double elPosXm_;
        /**
         * <code>required double elPosXm = 37;</code>
         */
        public boolean hasElPosXm() {
            return ((bitField1_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required double elPosXm = 37;</code>
         */
        public double getElPosXm() {
            return elPosXm_;
        }

        public static final int AZPOSBYHEAD_FIELD_NUMBER = 38;
        private double azPosByHead_;
        /**
         * <code>required double azPosByHead = 38;</code>
         */
        public boolean hasAzPosByHead() {
            return ((bitField1_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required double azPosByHead = 38;</code>
         */
        public double getAzPosByHead() {
            return azPosByHead_;
        }

        public static final int ELPOSBYHEAD_FIELD_NUMBER = 39;
        private double elPosByHead_;
        /**
         * <code>required double elPosByHead = 39;</code>
         */
        public boolean hasElPosByHead() {
            return ((bitField1_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required double elPosByHead = 39;</code>
         */
        public double getElPosByHead() {
            return elPosByHead_;
        }

        public static final int AZNUMOFSTOREDDEMAND_FIELD_NUMBER = 40;
        private int azNumOfStoredDemand_;
        /**
         * <code>required int32 azNumOfStoredDemand = 40;</code>
         */
        public boolean hasAzNumOfStoredDemand() {
            return ((bitField1_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required int32 azNumOfStoredDemand = 40;</code>
         */
        public int getAzNumOfStoredDemand() {
            return azNumOfStoredDemand_;
        }

        public static final int ELNUMOFSTOREDDEMAND_FIELD_NUMBER = 41;
        private int elNumOfStoredDemand_;
        /**
         * <code>required int32 elNumOfStoredDemand = 41;</code>
         */
        public boolean hasElNumOfStoredDemand() {
            return ((bitField1_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>required int32 elNumOfStoredDemand = 41;</code>
         */
        public int getElNumOfStoredDemand() {
            return elNumOfStoredDemand_;
        }

        public static final int EIBTRIGGERCOUNTER_FIELD_NUMBER = 42;
        private int eibTriggerCounter_;
        /**
         * <code>required int32 eibTriggerCounter = 42;</code>
         */
        public boolean hasEibTriggerCounter() {
            return ((bitField1_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>required int32 eibTriggerCounter = 42;</code>
         */
        public int getEibTriggerCounter() {
            return eibTriggerCounter_;
        }

        public static final int EIBSTATUSWORD_FIELD_NUMBER = 43;
        private int eibStatusWord_;
        /**
         * <code>required int32 eibStatusWord = 43;</code>
         */
        public boolean hasEibStatusWord() {
            return ((bitField1_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>required int32 eibStatusWord = 43;</code>
         */
        public int getEibStatusWord() {
            return eibStatusWord_;
        }

        public static final int EIBTIMESTAMP_FIELD_NUMBER = 44;
        private int eibTimestamp_;
        /**
         * <code>required int32 eibTimestamp = 44;</code>
         */
        public boolean hasEibTimestamp() {
            return ((bitField1_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>required int32 eibTimestamp = 44;</code>
         */
        public int getEibTimestamp() {
            return eibTimestamp_;
        }

        public static final int EIBREFERENCEPOSITION1_FIELD_NUMBER = 45;
        private long eibReferencePosition1_;
        /**
         * <code>required int64 eibReferencePosition1 = 45;</code>
         */
        public boolean hasEibReferencePosition1() {
            return ((bitField1_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>required int64 eibReferencePosition1 = 45;</code>
         */
        public long getEibReferencePosition1() {
            return eibReferencePosition1_;
        }

        public static final int EIBDCREFERENCEPOSITION_FIELD_NUMBER = 46;
        private long eibDCReferencePosition_;
        /**
         * <code>required int64 eibDCReferencePosition = 46;</code>
         */
        public boolean hasEibDCReferencePosition() {
            return ((bitField1_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>required int64 eibDCReferencePosition = 46;</code>
         */
        public long getEibDCReferencePosition() {
            return eibDCReferencePosition_;
        }

        public static final int AZPOSBYABS_FIELD_NUMBER = 47;
        private double azPosByAbs_;
        /**
         * <code>required double azPosByAbs = 47;</code>
         */
        public boolean hasAzPosByAbs() {
            return ((bitField1_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>required double azPosByAbs = 47;</code>
         */
        public double getAzPosByAbs() {
            return azPosByAbs_;
        }

        public static final int ELPOSBYABS_FIELD_NUMBER = 48;
        private double elPosByAbs_;
        /**
         * <code>required double elPosByAbs = 48;</code>
         */
        public boolean hasElPosByAbs() {
            return ((bitField1_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>required double elPosByAbs = 48;</code>
         */
        public double getElPosByAbs() {
            return elPosByAbs_;
        }

        public static final int AZPOSERRA_FIELD_NUMBER = 49;
        private double azPosErrA_;
        /**
         * <code>required double azPosErrA = 49;</code>
         */
        public boolean hasAzPosErrA() {
            return ((bitField1_ & 0x00010000) == 0x00010000);
        }
        /**
         * <code>required double azPosErrA = 49;</code>
         */
        public double getAzPosErrA() {
            return azPosErrA_;
        }

        public static final int AZPOSERRB_FIELD_NUMBER = 50;
        private double azPosErrB_;
        /**
         * <code>required double azPosErrB = 50;</code>
         */
        public boolean hasAzPosErrB() {
            return ((bitField1_ & 0x00020000) == 0x00020000);
        }
        /**
         * <code>required double azPosErrB = 50;</code>
         */
        public double getAzPosErrB() {
            return azPosErrB_;
        }

        public static final int ELPOSERRA_FIELD_NUMBER = 51;
        private double elPosErrA_;
        /**
         * <code>required double elPosErrA = 51;</code>
         */
        public boolean hasElPosErrA() {
            return ((bitField1_ & 0x00040000) == 0x00040000);
        }
        /**
         * <code>required double elPosErrA = 51;</code>
         */
        public double getElPosErrA() {
            return elPosErrA_;
        }

        public static final int ELPOSERRB_FIELD_NUMBER = 52;
        private double elPosErrB_;
        /**
         * <code>required double elPosErrB = 52;</code>
         */
        public boolean hasElPosErrB() {
            return ((bitField1_ & 0x00080000) == 0x00080000);
        }
        /**
         * <code>required double elPosErrB = 52;</code>
         */
        public double getElPosErrB() {
            return elPosErrB_;
        }

        public static final int AZPOSTESTINPUT_FIELD_NUMBER = 53;
        private double azPosTestInput_;
        /**
         * <code>required double azPosTestInput = 53;</code>
         */
        public boolean hasAzPosTestInput() {
            return ((bitField1_ & 0x00100000) == 0x00100000);
        }
        /**
         * <code>required double azPosTestInput = 53;</code>
         */
        public double getAzPosTestInput() {
            return azPosTestInput_;
        }

        public static final int ELPOSTESTINPUT_FIELD_NUMBER = 54;
        private double elPosTestInput_;
        /**
         * <code>required double elPosTestInput = 54;</code>
         */
        public boolean hasElPosTestInput() {
            return ((bitField1_ & 0x00200000) == 0x00200000);
        }
        /**
         * <code>required double elPosTestInput = 54;</code>
         */
        public double getElPosTestInput() {
            return elPosTestInput_;
        }

        public static final int AZMAXVELTESTINPUT_FIELD_NUMBER = 55;
        private double azMaxVelTestInput_;
        /**
         * <code>required double azMaxVelTestInput = 55;</code>
         */
        public boolean hasAzMaxVelTestInput() {
            return ((bitField1_ & 0x00400000) == 0x00400000);
        }
        /**
         * <code>required double azMaxVelTestInput = 55;</code>
         */
        public double getAzMaxVelTestInput() {
            return azMaxVelTestInput_;
        }

        public static final int ELMAXVELTESTINPUT_FIELD_NUMBER = 56;
        private double elMaxVelTestInput_;
        /**
         * <code>required double elMaxVelTestInput = 56;</code>
         */
        public boolean hasElMaxVelTestInput() {
            return ((bitField1_ & 0x00800000) == 0x00800000);
        }
        /**
         * <code>required double elMaxVelTestInput = 56;</code>
         */
        public double getElMaxVelTestInput() {
            return elMaxVelTestInput_;
        }

        public static final int AZMINVELTESTINPUT_FIELD_NUMBER = 57;
        private double azMinVelTestInput_;
        /**
         * <code>required double azMinVelTestInput = 57;</code>
         */
        public boolean hasAzMinVelTestInput() {
            return ((bitField1_ & 0x01000000) == 0x01000000);
        }
        /**
         * <code>required double azMinVelTestInput = 57;</code>
         */
        public double getAzMinVelTestInput() {
            return azMinVelTestInput_;
        }

        public static final int ELMINVELTESTINPUT_FIELD_NUMBER = 58;
        private double elMinVelTestInput_;
        /**
         * <code>required double elMinVelTestInput = 58;</code>
         */
        public boolean hasElMinVelTestInput() {
            return ((bitField1_ & 0x02000000) == 0x02000000);
        }
        /**
         * <code>required double elMinVelTestInput = 58;</code>
         */
        public double getElMinVelTestInput() {
            return elMinVelTestInput_;
        }

        public static final int AZTRQTESTINPUT_FIELD_NUMBER = 59;
        private double azTrqTestInput_;
        /**
         * <code>required double azTrqTestInput = 59;</code>
         */
        public boolean hasAzTrqTestInput() {
            return ((bitField1_ & 0x04000000) == 0x04000000);
        }
        /**
         * <code>required double azTrqTestInput = 59;</code>
         */
        public double getAzTrqTestInput() {
            return azTrqTestInput_;
        }

        public static final int ELTRQTESTINPUT_FIELD_NUMBER = 60;
        private double elTrqTestInput_;
        /**
         * <code>required double elTrqTestInput = 60;</code>
         */
        public boolean hasElTrqTestInput() {
            return ((bitField1_ & 0x08000000) == 0x08000000);
        }
        /**
         * <code>required double elTrqTestInput = 60;</code>
         */
        public double getElTrqTestInput() {
            return elTrqTestInput_;
        }

        public static final int TIME_FIELD_NUMBER = 61;
        private long time_;
        /**
         * <code>required int64 time = 61;</code>
         */
        public boolean hasTime() {
            return ((bitField1_ & 0x10000000) == 0x10000000);
        }
        /**
         * <code>required int64 time = 61;</code>
         */
        public long getTime() {
            return time_;
        }

        private void initFields() {
            mcsInPosition_ = false;
            azInPosition_ = false;
            elInPosition_ = false;
            azPosition_ = 0D;
            elPosition_ = 0D;
            azPosDemand_ = 0D;
            elPosDemand_ = 0D;
            azPosError_ = 0D;
            elPosError_ = 0D;
            azVelocity_ = 0D;
            elVelocity_ = 0D;
            azVelocityDemand_ = 0D;
            elVelocityDemand_ = 0D;
            azVelocityError_ = 0D;
            elVelocityError_ = 0D;
            azAcceleration_ = 0D;
            elAcceleration_ = 0D;
            azTorqueDemand_ = 0D;
            elTorqueDemand_ = 0D;
            azEncoderPositions_ = 0;
            elEncoderPositions_ = 0;
            azDriveCurrents_ = 0F;
            elDriveCurrents_ = 0F;
            encoderLatchingTime_ = 0D;
            azWrapPos_ = 0D;
            azWrapPosDemand_ = 0D;
            azWrapPosError_ = 0D;
            azWrapVelocity_ = 0D;
            azWrapVelocityDemand_ = 0D;
            azWrapVelocityError_ = 0D;
            azWrapAcceleration_ = 0D;
            azWrapTorqueDemand_ = 0D;
            azWrapDriveCurrents_ = 0F;
            azPosXp_ = 0D;
            azPosXm_ = 0D;
            elPosXp_ = 0D;
            elPosXm_ = 0D;
            azPosByHead_ = 0D;
            elPosByHead_ = 0D;
            azNumOfStoredDemand_ = 0;
            elNumOfStoredDemand_ = 0;
            eibTriggerCounter_ = 0;
            eibStatusWord_ = 0;
            eibTimestamp_ = 0;
            eibReferencePosition1_ = 0L;
            eibDCReferencePosition_ = 0L;
            azPosByAbs_ = 0D;
            elPosByAbs_ = 0D;
            azPosErrA_ = 0D;
            azPosErrB_ = 0D;
            elPosErrA_ = 0D;
            elPosErrB_ = 0D;
            azPosTestInput_ = 0D;
            elPosTestInput_ = 0D;
            azMaxVelTestInput_ = 0D;
            elMaxVelTestInput_ = 0D;
            azMinVelTestInput_ = 0D;
            elMinVelTestInput_ = 0D;
            azTrqTestInput_ = 0D;
            elTrqTestInput_ = 0D;
            time_ = 0L;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasMcsInPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzInPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElInPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzVelocity()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElVelocity()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzVelocityDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElVelocityDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzVelocityError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElVelocityError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzAcceleration()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElAcceleration()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzTorqueDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElTorqueDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzEncoderPositions()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElEncoderPositions()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzDriveCurrents()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElDriveCurrents()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEncoderLatchingTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapPos()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapPosDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapPosError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapVelocity()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapVelocityDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapVelocityError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapAcceleration()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapTorqueDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapDriveCurrents()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosXp()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosXm()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosXp()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosXm()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosByHead()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosByHead()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzNumOfStoredDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElNumOfStoredDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEibTriggerCounter()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEibStatusWord()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEibTimestamp()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEibReferencePosition1()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEibDCReferencePosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosByAbs()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosByAbs()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosErrA()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosErrB()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosErrA()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosErrB()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzMaxVelTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElMaxVelTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzMinVelTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElMinVelTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzTrqTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElTrqTestInput()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBool(1, mcsInPosition_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBool(2, azInPosition_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeBool(3, elInPosition_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeDouble(4, azPosition_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeDouble(5, elPosition_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeDouble(6, azPosDemand_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeDouble(7, elPosDemand_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeDouble(8, azPosError_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeDouble(9, elPosError_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeDouble(10, azVelocity_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeDouble(11, elVelocity_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeDouble(12, azVelocityDemand_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeDouble(13, elVelocityDemand_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeDouble(14, azVelocityError_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeDouble(15, elVelocityError_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeDouble(16, azAcceleration_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                output.writeDouble(17, elAcceleration_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                output.writeDouble(18, azTorqueDemand_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                output.writeDouble(19, elTorqueDemand_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                output.writeInt32(20, azEncoderPositions_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                output.writeInt32(21, elEncoderPositions_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                output.writeFloat(22, azDriveCurrents_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                output.writeFloat(23, elDriveCurrents_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                output.writeDouble(24, encoderLatchingTime_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                output.writeDouble(25, azWrapPos_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                output.writeDouble(26, azWrapPosDemand_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                output.writeDouble(27, azWrapPosError_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                output.writeDouble(28, azWrapVelocity_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                output.writeDouble(29, azWrapVelocityDemand_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                output.writeDouble(30, azWrapVelocityError_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                output.writeDouble(31, azWrapAcceleration_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                output.writeDouble(32, azWrapTorqueDemand_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                output.writeFloat(33, azWrapDriveCurrents_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                output.writeDouble(34, azPosXp_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                output.writeDouble(35, azPosXm_);
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                output.writeDouble(36, elPosXp_);
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                output.writeDouble(37, elPosXm_);
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                output.writeDouble(38, azPosByHead_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                output.writeDouble(39, elPosByHead_);
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                output.writeInt32(40, azNumOfStoredDemand_);
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                output.writeInt32(41, elNumOfStoredDemand_);
            }
            if (((bitField1_ & 0x00000200) == 0x00000200)) {
                output.writeInt32(42, eibTriggerCounter_);
            }
            if (((bitField1_ & 0x00000400) == 0x00000400)) {
                output.writeInt32(43, eibStatusWord_);
            }
            if (((bitField1_ & 0x00000800) == 0x00000800)) {
                output.writeInt32(44, eibTimestamp_);
            }
            if (((bitField1_ & 0x00001000) == 0x00001000)) {
                output.writeInt64(45, eibReferencePosition1_);
            }
            if (((bitField1_ & 0x00002000) == 0x00002000)) {
                output.writeInt64(46, eibDCReferencePosition_);
            }
            if (((bitField1_ & 0x00004000) == 0x00004000)) {
                output.writeDouble(47, azPosByAbs_);
            }
            if (((bitField1_ & 0x00008000) == 0x00008000)) {
                output.writeDouble(48, elPosByAbs_);
            }
            if (((bitField1_ & 0x00010000) == 0x00010000)) {
                output.writeDouble(49, azPosErrA_);
            }
            if (((bitField1_ & 0x00020000) == 0x00020000)) {
                output.writeDouble(50, azPosErrB_);
            }
            if (((bitField1_ & 0x00040000) == 0x00040000)) {
                output.writeDouble(51, elPosErrA_);
            }
            if (((bitField1_ & 0x00080000) == 0x00080000)) {
                output.writeDouble(52, elPosErrB_);
            }
            if (((bitField1_ & 0x00100000) == 0x00100000)) {
                output.writeDouble(53, azPosTestInput_);
            }
            if (((bitField1_ & 0x00200000) == 0x00200000)) {
                output.writeDouble(54, elPosTestInput_);
            }
            if (((bitField1_ & 0x00400000) == 0x00400000)) {
                output.writeDouble(55, azMaxVelTestInput_);
            }
            if (((bitField1_ & 0x00800000) == 0x00800000)) {
                output.writeDouble(56, elMaxVelTestInput_);
            }
            if (((bitField1_ & 0x01000000) == 0x01000000)) {
                output.writeDouble(57, azMinVelTestInput_);
            }
            if (((bitField1_ & 0x02000000) == 0x02000000)) {
                output.writeDouble(58, elMinVelTestInput_);
            }
            if (((bitField1_ & 0x04000000) == 0x04000000)) {
                output.writeDouble(59, azTrqTestInput_);
            }
            if (((bitField1_ & 0x08000000) == 0x08000000)) {
                output.writeDouble(60, elTrqTestInput_);
            }
            if (((bitField1_ & 0x10000000) == 0x10000000)) {
                output.writeInt64(61, time_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(1, mcsInPosition_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(2, azInPosition_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(3, elInPosition_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(4, azPosition_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(5, elPosition_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(6, azPosDemand_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(7, elPosDemand_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(8, azPosError_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(9, elPosError_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(10, azVelocity_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(11, elVelocity_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(12, azVelocityDemand_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(13, elVelocityDemand_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(14, azVelocityError_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(15, elVelocityError_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(16, azAcceleration_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(17, elAcceleration_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(18, azTorqueDemand_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(19, elTorqueDemand_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(20, azEncoderPositions_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(21, elEncoderPositions_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(22, azDriveCurrents_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(23, elDriveCurrents_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(24, encoderLatchingTime_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(25, azWrapPos_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(26, azWrapPosDemand_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(27, azWrapPosError_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(28, azWrapVelocity_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(29, azWrapVelocityDemand_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(30, azWrapVelocityError_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(31, azWrapAcceleration_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(32, azWrapTorqueDemand_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(33, azWrapDriveCurrents_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(34, azPosXp_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(35, azPosXm_);
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(36, elPosXp_);
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(37, elPosXm_);
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(38, azPosByHead_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(39, elPosByHead_);
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(40, azNumOfStoredDemand_);
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(41, elNumOfStoredDemand_);
            }
            if (((bitField1_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(42, eibTriggerCounter_);
            }
            if (((bitField1_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(43, eibStatusWord_);
            }
            if (((bitField1_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(44, eibTimestamp_);
            }
            if (((bitField1_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(45, eibReferencePosition1_);
            }
            if (((bitField1_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(46, eibDCReferencePosition_);
            }
            if (((bitField1_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(47, azPosByAbs_);
            }
            if (((bitField1_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(48, elPosByAbs_);
            }
            if (((bitField1_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(49, azPosErrA_);
            }
            if (((bitField1_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(50, azPosErrB_);
            }
            if (((bitField1_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(51, elPosErrA_);
            }
            if (((bitField1_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(52, elPosErrB_);
            }
            if (((bitField1_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(53, azPosTestInput_);
            }
            if (((bitField1_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(54, elPosTestInput_);
            }
            if (((bitField1_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(55, azMaxVelTestInput_);
            }
            if (((bitField1_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(56, elMaxVelTestInput_);
            }
            if (((bitField1_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(57, azMinVelTestInput_);
            }
            if (((bitField1_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(58, elMinVelTestInput_);
            }
            if (((bitField1_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(59, azTrqTestInput_);
            }
            if (((bitField1_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(60, elTrqTestInput_);
            }
            if (((bitField1_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(61, time_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.MountControlDiags}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.MountControlDiags)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiagsOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_MountControlDiags_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_MountControlDiags_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                mcsInPosition_ = false;
                bitField0_ = (bitField0_ & ~0x00000001);
                azInPosition_ = false;
                bitField0_ = (bitField0_ & ~0x00000002);
                elInPosition_ = false;
                bitField0_ = (bitField0_ & ~0x00000004);
                azPosition_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000008);
                elPosition_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000010);
                azPosDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000020);
                elPosDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000040);
                azPosError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000080);
                elPosError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000100);
                azVelocity_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000200);
                elVelocity_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000400);
                azVelocityDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000800);
                elVelocityDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00001000);
                azVelocityError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00002000);
                elVelocityError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00004000);
                azAcceleration_ = 0D;
                bitField0_ = (bitField0_ & ~0x00008000);
                elAcceleration_ = 0D;
                bitField0_ = (bitField0_ & ~0x00010000);
                azTorqueDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00020000);
                elTorqueDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00040000);
                azEncoderPositions_ = 0;
                bitField0_ = (bitField0_ & ~0x00080000);
                elEncoderPositions_ = 0;
                bitField0_ = (bitField0_ & ~0x00100000);
                azDriveCurrents_ = 0F;
                bitField0_ = (bitField0_ & ~0x00200000);
                elDriveCurrents_ = 0F;
                bitField0_ = (bitField0_ & ~0x00400000);
                encoderLatchingTime_ = 0D;
                bitField0_ = (bitField0_ & ~0x00800000);
                azWrapPos_ = 0D;
                bitField0_ = (bitField0_ & ~0x01000000);
                azWrapPosDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x02000000);
                azWrapPosError_ = 0D;
                bitField0_ = (bitField0_ & ~0x04000000);
                azWrapVelocity_ = 0D;
                bitField0_ = (bitField0_ & ~0x08000000);
                azWrapVelocityDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x10000000);
                azWrapVelocityError_ = 0D;
                bitField0_ = (bitField0_ & ~0x20000000);
                azWrapAcceleration_ = 0D;
                bitField0_ = (bitField0_ & ~0x40000000);
                azWrapTorqueDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x80000000);
                azWrapDriveCurrents_ = 0F;
                bitField1_ = (bitField1_ & ~0x00000001);
                azPosXp_ = 0D;
                bitField1_ = (bitField1_ & ~0x00000002);
                azPosXm_ = 0D;
                bitField1_ = (bitField1_ & ~0x00000004);
                elPosXp_ = 0D;
                bitField1_ = (bitField1_ & ~0x00000008);
                elPosXm_ = 0D;
                bitField1_ = (bitField1_ & ~0x00000010);
                azPosByHead_ = 0D;
                bitField1_ = (bitField1_ & ~0x00000020);
                elPosByHead_ = 0D;
                bitField1_ = (bitField1_ & ~0x00000040);
                azNumOfStoredDemand_ = 0;
                bitField1_ = (bitField1_ & ~0x00000080);
                elNumOfStoredDemand_ = 0;
                bitField1_ = (bitField1_ & ~0x00000100);
                eibTriggerCounter_ = 0;
                bitField1_ = (bitField1_ & ~0x00000200);
                eibStatusWord_ = 0;
                bitField1_ = (bitField1_ & ~0x00000400);
                eibTimestamp_ = 0;
                bitField1_ = (bitField1_ & ~0x00000800);
                eibReferencePosition1_ = 0L;
                bitField1_ = (bitField1_ & ~0x00001000);
                eibDCReferencePosition_ = 0L;
                bitField1_ = (bitField1_ & ~0x00002000);
                azPosByAbs_ = 0D;
                bitField1_ = (bitField1_ & ~0x00004000);
                elPosByAbs_ = 0D;
                bitField1_ = (bitField1_ & ~0x00008000);
                azPosErrA_ = 0D;
                bitField1_ = (bitField1_ & ~0x00010000);
                azPosErrB_ = 0D;
                bitField1_ = (bitField1_ & ~0x00020000);
                elPosErrA_ = 0D;
                bitField1_ = (bitField1_ & ~0x00040000);
                elPosErrB_ = 0D;
                bitField1_ = (bitField1_ & ~0x00080000);
                azPosTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x00100000);
                elPosTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x00200000);
                azMaxVelTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x00400000);
                elMaxVelTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x00800000);
                azMinVelTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x01000000);
                elMinVelTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x02000000);
                azTrqTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x04000000);
                elTrqTestInput_ = 0D;
                bitField1_ = (bitField1_ & ~0x08000000);
                time_ = 0L;
                bitField1_ = (bitField1_ & ~0x10000000);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_MountControlDiags_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags(this);
                int from_bitField0_ = bitField0_;
                int from_bitField1_ = bitField1_;
                int to_bitField0_ = 0;
                int to_bitField1_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.mcsInPosition_ = mcsInPosition_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.azInPosition_ = azInPosition_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.elInPosition_ = elInPosition_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.azPosition_ = azPosition_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.elPosition_ = elPosition_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.azPosDemand_ = azPosDemand_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.elPosDemand_ = elPosDemand_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.azPosError_ = azPosError_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.elPosError_ = elPosError_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.azVelocity_ = azVelocity_;
                if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
                    to_bitField0_ |= 0x00000400;
                }
                result.elVelocity_ = elVelocity_;
                if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.azVelocityDemand_ = azVelocityDemand_;
                if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.elVelocityDemand_ = elVelocityDemand_;
                if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
                    to_bitField0_ |= 0x00002000;
                }
                result.azVelocityError_ = azVelocityError_;
                if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
                    to_bitField0_ |= 0x00004000;
                }
                result.elVelocityError_ = elVelocityError_;
                if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
                    to_bitField0_ |= 0x00008000;
                }
                result.azAcceleration_ = azAcceleration_;
                if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
                    to_bitField0_ |= 0x00010000;
                }
                result.elAcceleration_ = elAcceleration_;
                if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
                    to_bitField0_ |= 0x00020000;
                }
                result.azTorqueDemand_ = azTorqueDemand_;
                if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
                    to_bitField0_ |= 0x00040000;
                }
                result.elTorqueDemand_ = elTorqueDemand_;
                if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
                    to_bitField0_ |= 0x00080000;
                }
                result.azEncoderPositions_ = azEncoderPositions_;
                if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
                    to_bitField0_ |= 0x00100000;
                }
                result.elEncoderPositions_ = elEncoderPositions_;
                if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
                    to_bitField0_ |= 0x00200000;
                }
                result.azDriveCurrents_ = azDriveCurrents_;
                if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
                    to_bitField0_ |= 0x00400000;
                }
                result.elDriveCurrents_ = elDriveCurrents_;
                if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
                    to_bitField0_ |= 0x00800000;
                }
                result.encoderLatchingTime_ = encoderLatchingTime_;
                if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
                    to_bitField0_ |= 0x01000000;
                }
                result.azWrapPos_ = azWrapPos_;
                if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
                    to_bitField0_ |= 0x02000000;
                }
                result.azWrapPosDemand_ = azWrapPosDemand_;
                if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
                    to_bitField0_ |= 0x04000000;
                }
                result.azWrapPosError_ = azWrapPosError_;
                if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
                    to_bitField0_ |= 0x08000000;
                }
                result.azWrapVelocity_ = azWrapVelocity_;
                if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
                    to_bitField0_ |= 0x10000000;
                }
                result.azWrapVelocityDemand_ = azWrapVelocityDemand_;
                if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
                    to_bitField0_ |= 0x20000000;
                }
                result.azWrapVelocityError_ = azWrapVelocityError_;
                if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
                    to_bitField0_ |= 0x40000000;
                }
                result.azWrapAcceleration_ = azWrapAcceleration_;
                if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
                    to_bitField0_ |= 0x80000000;
                }
                result.azWrapTorqueDemand_ = azWrapTorqueDemand_;
                if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
                    to_bitField1_ |= 0x00000001;
                }
                result.azWrapDriveCurrents_ = azWrapDriveCurrents_;
                if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
                    to_bitField1_ |= 0x00000002;
                }
                result.azPosXp_ = azPosXp_;
                if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
                    to_bitField1_ |= 0x00000004;
                }
                result.azPosXm_ = azPosXm_;
                if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
                    to_bitField1_ |= 0x00000008;
                }
                result.elPosXp_ = elPosXp_;
                if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
                    to_bitField1_ |= 0x00000010;
                }
                result.elPosXm_ = elPosXm_;
                if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
                    to_bitField1_ |= 0x00000020;
                }
                result.azPosByHead_ = azPosByHead_;
                if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
                    to_bitField1_ |= 0x00000040;
                }
                result.elPosByHead_ = elPosByHead_;
                if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
                    to_bitField1_ |= 0x00000080;
                }
                result.azNumOfStoredDemand_ = azNumOfStoredDemand_;
                if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
                    to_bitField1_ |= 0x00000100;
                }
                result.elNumOfStoredDemand_ = elNumOfStoredDemand_;
                if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
                    to_bitField1_ |= 0x00000200;
                }
                result.eibTriggerCounter_ = eibTriggerCounter_;
                if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
                    to_bitField1_ |= 0x00000400;
                }
                result.eibStatusWord_ = eibStatusWord_;
                if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
                    to_bitField1_ |= 0x00000800;
                }
                result.eibTimestamp_ = eibTimestamp_;
                if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
                    to_bitField1_ |= 0x00001000;
                }
                result.eibReferencePosition1_ = eibReferencePosition1_;
                if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
                    to_bitField1_ |= 0x00002000;
                }
                result.eibDCReferencePosition_ = eibDCReferencePosition_;
                if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
                    to_bitField1_ |= 0x00004000;
                }
                result.azPosByAbs_ = azPosByAbs_;
                if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
                    to_bitField1_ |= 0x00008000;
                }
                result.elPosByAbs_ = elPosByAbs_;
                if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
                    to_bitField1_ |= 0x00010000;
                }
                result.azPosErrA_ = azPosErrA_;
                if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
                    to_bitField1_ |= 0x00020000;
                }
                result.azPosErrB_ = azPosErrB_;
                if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
                    to_bitField1_ |= 0x00040000;
                }
                result.elPosErrA_ = elPosErrA_;
                if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
                    to_bitField1_ |= 0x00080000;
                }
                result.elPosErrB_ = elPosErrB_;
                if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
                    to_bitField1_ |= 0x00100000;
                }
                result.azPosTestInput_ = azPosTestInput_;
                if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
                    to_bitField1_ |= 0x00200000;
                }
                result.elPosTestInput_ = elPosTestInput_;
                if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
                    to_bitField1_ |= 0x00400000;
                }
                result.azMaxVelTestInput_ = azMaxVelTestInput_;
                if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
                    to_bitField1_ |= 0x00800000;
                }
                result.elMaxVelTestInput_ = elMaxVelTestInput_;
                if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
                    to_bitField1_ |= 0x01000000;
                }
                result.azMinVelTestInput_ = azMinVelTestInput_;
                if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
                    to_bitField1_ |= 0x02000000;
                }
                result.elMinVelTestInput_ = elMinVelTestInput_;
                if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
                    to_bitField1_ |= 0x04000000;
                }
                result.azTrqTestInput_ = azTrqTestInput_;
                if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
                    to_bitField1_ |= 0x08000000;
                }
                result.elTrqTestInput_ = elTrqTestInput_;
                if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
                    to_bitField1_ |= 0x10000000;
                }
                result.time_ = time_;
                result.bitField0_ = to_bitField0_;
                result.bitField1_ = to_bitField1_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags.getDefaultInstance()) return this;
                if (other.hasMcsInPosition()) {
                    setMcsInPosition(other.getMcsInPosition());
                }
                if (other.hasAzInPosition()) {
                    setAzInPosition(other.getAzInPosition());
                }
                if (other.hasElInPosition()) {
                    setElInPosition(other.getElInPosition());
                }
                if (other.hasAzPosition()) {
                    setAzPosition(other.getAzPosition());
                }
                if (other.hasElPosition()) {
                    setElPosition(other.getElPosition());
                }
                if (other.hasAzPosDemand()) {
                    setAzPosDemand(other.getAzPosDemand());
                }
                if (other.hasElPosDemand()) {
                    setElPosDemand(other.getElPosDemand());
                }
                if (other.hasAzPosError()) {
                    setAzPosError(other.getAzPosError());
                }
                if (other.hasElPosError()) {
                    setElPosError(other.getElPosError());
                }
                if (other.hasAzVelocity()) {
                    setAzVelocity(other.getAzVelocity());
                }
                if (other.hasElVelocity()) {
                    setElVelocity(other.getElVelocity());
                }
                if (other.hasAzVelocityDemand()) {
                    setAzVelocityDemand(other.getAzVelocityDemand());
                }
                if (other.hasElVelocityDemand()) {
                    setElVelocityDemand(other.getElVelocityDemand());
                }
                if (other.hasAzVelocityError()) {
                    setAzVelocityError(other.getAzVelocityError());
                }
                if (other.hasElVelocityError()) {
                    setElVelocityError(other.getElVelocityError());
                }
                if (other.hasAzAcceleration()) {
                    setAzAcceleration(other.getAzAcceleration());
                }
                if (other.hasElAcceleration()) {
                    setElAcceleration(other.getElAcceleration());
                }
                if (other.hasAzTorqueDemand()) {
                    setAzTorqueDemand(other.getAzTorqueDemand());
                }
                if (other.hasElTorqueDemand()) {
                    setElTorqueDemand(other.getElTorqueDemand());
                }
                if (other.hasAzEncoderPositions()) {
                    setAzEncoderPositions(other.getAzEncoderPositions());
                }
                if (other.hasElEncoderPositions()) {
                    setElEncoderPositions(other.getElEncoderPositions());
                }
                if (other.hasAzDriveCurrents()) {
                    setAzDriveCurrents(other.getAzDriveCurrents());
                }
                if (other.hasElDriveCurrents()) {
                    setElDriveCurrents(other.getElDriveCurrents());
                }
                if (other.hasEncoderLatchingTime()) {
                    setEncoderLatchingTime(other.getEncoderLatchingTime());
                }
                if (other.hasAzWrapPos()) {
                    setAzWrapPos(other.getAzWrapPos());
                }
                if (other.hasAzWrapPosDemand()) {
                    setAzWrapPosDemand(other.getAzWrapPosDemand());
                }
                if (other.hasAzWrapPosError()) {
                    setAzWrapPosError(other.getAzWrapPosError());
                }
                if (other.hasAzWrapVelocity()) {
                    setAzWrapVelocity(other.getAzWrapVelocity());
                }
                if (other.hasAzWrapVelocityDemand()) {
                    setAzWrapVelocityDemand(other.getAzWrapVelocityDemand());
                }
                if (other.hasAzWrapVelocityError()) {
                    setAzWrapVelocityError(other.getAzWrapVelocityError());
                }
                if (other.hasAzWrapAcceleration()) {
                    setAzWrapAcceleration(other.getAzWrapAcceleration());
                }
                if (other.hasAzWrapTorqueDemand()) {
                    setAzWrapTorqueDemand(other.getAzWrapTorqueDemand());
                }
                if (other.hasAzWrapDriveCurrents()) {
                    setAzWrapDriveCurrents(other.getAzWrapDriveCurrents());
                }
                if (other.hasAzPosXp()) {
                    setAzPosXp(other.getAzPosXp());
                }
                if (other.hasAzPosXm()) {
                    setAzPosXm(other.getAzPosXm());
                }
                if (other.hasElPosXp()) {
                    setElPosXp(other.getElPosXp());
                }
                if (other.hasElPosXm()) {
                    setElPosXm(other.getElPosXm());
                }
                if (other.hasAzPosByHead()) {
                    setAzPosByHead(other.getAzPosByHead());
                }
                if (other.hasElPosByHead()) {
                    setElPosByHead(other.getElPosByHead());
                }
                if (other.hasAzNumOfStoredDemand()) {
                    setAzNumOfStoredDemand(other.getAzNumOfStoredDemand());
                }
                if (other.hasElNumOfStoredDemand()) {
                    setElNumOfStoredDemand(other.getElNumOfStoredDemand());
                }
                if (other.hasEibTriggerCounter()) {
                    setEibTriggerCounter(other.getEibTriggerCounter());
                }
                if (other.hasEibStatusWord()) {
                    setEibStatusWord(other.getEibStatusWord());
                }
                if (other.hasEibTimestamp()) {
                    setEibTimestamp(other.getEibTimestamp());
                }
                if (other.hasEibReferencePosition1()) {
                    setEibReferencePosition1(other.getEibReferencePosition1());
                }
                if (other.hasEibDCReferencePosition()) {
                    setEibDCReferencePosition(other.getEibDCReferencePosition());
                }
                if (other.hasAzPosByAbs()) {
                    setAzPosByAbs(other.getAzPosByAbs());
                }
                if (other.hasElPosByAbs()) {
                    setElPosByAbs(other.getElPosByAbs());
                }
                if (other.hasAzPosErrA()) {
                    setAzPosErrA(other.getAzPosErrA());
                }
                if (other.hasAzPosErrB()) {
                    setAzPosErrB(other.getAzPosErrB());
                }
                if (other.hasElPosErrA()) {
                    setElPosErrA(other.getElPosErrA());
                }
                if (other.hasElPosErrB()) {
                    setElPosErrB(other.getElPosErrB());
                }
                if (other.hasAzPosTestInput()) {
                    setAzPosTestInput(other.getAzPosTestInput());
                }
                if (other.hasElPosTestInput()) {
                    setElPosTestInput(other.getElPosTestInput());
                }
                if (other.hasAzMaxVelTestInput()) {
                    setAzMaxVelTestInput(other.getAzMaxVelTestInput());
                }
                if (other.hasElMaxVelTestInput()) {
                    setElMaxVelTestInput(other.getElMaxVelTestInput());
                }
                if (other.hasAzMinVelTestInput()) {
                    setAzMinVelTestInput(other.getAzMinVelTestInput());
                }
                if (other.hasElMinVelTestInput()) {
                    setElMinVelTestInput(other.getElMinVelTestInput());
                }
                if (other.hasAzTrqTestInput()) {
                    setAzTrqTestInput(other.getAzTrqTestInput());
                }
                if (other.hasElTrqTestInput()) {
                    setElTrqTestInput(other.getElTrqTestInput());
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMcsInPosition()) {

                    return false;
                }
                if (!hasAzInPosition()) {

                    return false;
                }
                if (!hasElInPosition()) {

                    return false;
                }
                if (!hasAzPosition()) {

                    return false;
                }
                if (!hasElPosition()) {

                    return false;
                }
                if (!hasAzPosDemand()) {

                    return false;
                }
                if (!hasElPosDemand()) {

                    return false;
                }
                if (!hasAzPosError()) {

                    return false;
                }
                if (!hasElPosError()) {

                    return false;
                }
                if (!hasAzVelocity()) {

                    return false;
                }
                if (!hasElVelocity()) {

                    return false;
                }
                if (!hasAzVelocityDemand()) {

                    return false;
                }
                if (!hasElVelocityDemand()) {

                    return false;
                }
                if (!hasAzVelocityError()) {

                    return false;
                }
                if (!hasElVelocityError()) {

                    return false;
                }
                if (!hasAzAcceleration()) {

                    return false;
                }
                if (!hasElAcceleration()) {

                    return false;
                }
                if (!hasAzTorqueDemand()) {

                    return false;
                }
                if (!hasElTorqueDemand()) {

                    return false;
                }
                if (!hasAzEncoderPositions()) {

                    return false;
                }
                if (!hasElEncoderPositions()) {

                    return false;
                }
                if (!hasAzDriveCurrents()) {

                    return false;
                }
                if (!hasElDriveCurrents()) {

                    return false;
                }
                if (!hasEncoderLatchingTime()) {

                    return false;
                }
                if (!hasAzWrapPos()) {

                    return false;
                }
                if (!hasAzWrapPosDemand()) {

                    return false;
                }
                if (!hasAzWrapPosError()) {

                    return false;
                }
                if (!hasAzWrapVelocity()) {

                    return false;
                }
                if (!hasAzWrapVelocityDemand()) {

                    return false;
                }
                if (!hasAzWrapVelocityError()) {

                    return false;
                }
                if (!hasAzWrapAcceleration()) {

                    return false;
                }
                if (!hasAzWrapTorqueDemand()) {

                    return false;
                }
                if (!hasAzWrapDriveCurrents()) {

                    return false;
                }
                if (!hasAzPosXp()) {

                    return false;
                }
                if (!hasAzPosXm()) {

                    return false;
                }
                if (!hasElPosXp()) {

                    return false;
                }
                if (!hasElPosXm()) {

                    return false;
                }
                if (!hasAzPosByHead()) {

                    return false;
                }
                if (!hasElPosByHead()) {

                    return false;
                }
                if (!hasAzNumOfStoredDemand()) {

                    return false;
                }
                if (!hasElNumOfStoredDemand()) {

                    return false;
                }
                if (!hasEibTriggerCounter()) {

                    return false;
                }
                if (!hasEibStatusWord()) {

                    return false;
                }
                if (!hasEibTimestamp()) {

                    return false;
                }
                if (!hasEibReferencePosition1()) {

                    return false;
                }
                if (!hasEibDCReferencePosition()) {

                    return false;
                }
                if (!hasAzPosByAbs()) {

                    return false;
                }
                if (!hasElPosByAbs()) {

                    return false;
                }
                if (!hasAzPosErrA()) {

                    return false;
                }
                if (!hasAzPosErrB()) {

                    return false;
                }
                if (!hasElPosErrA()) {

                    return false;
                }
                if (!hasElPosErrB()) {

                    return false;
                }
                if (!hasAzPosTestInput()) {

                    return false;
                }
                if (!hasElPosTestInput()) {

                    return false;
                }
                if (!hasAzMaxVelTestInput()) {

                    return false;
                }
                if (!hasElMaxVelTestInput()) {

                    return false;
                }
                if (!hasAzMinVelTestInput()) {

                    return false;
                }
                if (!hasElMinVelTestInput()) {

                    return false;
                }
                if (!hasAzTrqTestInput()) {

                    return false;
                }
                if (!hasElTrqTestInput()) {

                    return false;
                }
                if (!hasTime()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.MountControlDiags) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;
            private int bitField1_;

            private boolean mcsInPosition_ ;
            /**
             * <code>required bool mcsInPosition = 1;</code>
             */
            public boolean hasMcsInPosition() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required bool mcsInPosition = 1;</code>
             */
            public boolean getMcsInPosition() {
                return mcsInPosition_;
            }
            /**
             * <code>required bool mcsInPosition = 1;</code>
             */
            public Builder setMcsInPosition(boolean value) {
                bitField0_ |= 0x00000001;
                mcsInPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool mcsInPosition = 1;</code>
             */
            public Builder clearMcsInPosition() {
                bitField0_ = (bitField0_ & ~0x00000001);
                mcsInPosition_ = false;
                onChanged();
                return this;
            }

            private boolean azInPosition_ ;
            /**
             * <code>required bool azInPosition = 2;</code>
             */
            public boolean hasAzInPosition() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required bool azInPosition = 2;</code>
             */
            public boolean getAzInPosition() {
                return azInPosition_;
            }
            /**
             * <code>required bool azInPosition = 2;</code>
             */
            public Builder setAzInPosition(boolean value) {
                bitField0_ |= 0x00000002;
                azInPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azInPosition = 2;</code>
             */
            public Builder clearAzInPosition() {
                bitField0_ = (bitField0_ & ~0x00000002);
                azInPosition_ = false;
                onChanged();
                return this;
            }

            private boolean elInPosition_ ;
            /**
             * <code>required bool elInPosition = 3;</code>
             */
            public boolean hasElInPosition() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required bool elInPosition = 3;</code>
             */
            public boolean getElInPosition() {
                return elInPosition_;
            }
            /**
             * <code>required bool elInPosition = 3;</code>
             */
            public Builder setElInPosition(boolean value) {
                bitField0_ |= 0x00000004;
                elInPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elInPosition = 3;</code>
             */
            public Builder clearElInPosition() {
                bitField0_ = (bitField0_ & ~0x00000004);
                elInPosition_ = false;
                onChanged();
                return this;
            }

            private double azPosition_ ;
            /**
             * <code>required double azPosition = 4;</code>
             */
            public boolean hasAzPosition() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }
            /**
             * <code>required double azPosition = 4;</code>
             */
            public double getAzPosition() {
                return azPosition_;
            }
            /**
             * <code>required double azPosition = 4;</code>
             */
            public Builder setAzPosition(double value) {
                bitField0_ |= 0x00000008;
                azPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosition = 4;</code>
             */
            public Builder clearAzPosition() {
                bitField0_ = (bitField0_ & ~0x00000008);
                azPosition_ = 0D;
                onChanged();
                return this;
            }

            private double elPosition_ ;
            /**
             * <code>required double elPosition = 5;</code>
             */
            public boolean hasElPosition() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }
            /**
             * <code>required double elPosition = 5;</code>
             */
            public double getElPosition() {
                return elPosition_;
            }
            /**
             * <code>required double elPosition = 5;</code>
             */
            public Builder setElPosition(double value) {
                bitField0_ |= 0x00000010;
                elPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosition = 5;</code>
             */
            public Builder clearElPosition() {
                bitField0_ = (bitField0_ & ~0x00000010);
                elPosition_ = 0D;
                onChanged();
                return this;
            }

            private double azPosDemand_ ;
            /**
             * <code>required double azPosDemand = 6;</code>
             */
            public boolean hasAzPosDemand() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }
            /**
             * <code>required double azPosDemand = 6;</code>
             */
            public double getAzPosDemand() {
                return azPosDemand_;
            }
            /**
             * <code>required double azPosDemand = 6;</code>
             */
            public Builder setAzPosDemand(double value) {
                bitField0_ |= 0x00000020;
                azPosDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosDemand = 6;</code>
             */
            public Builder clearAzPosDemand() {
                bitField0_ = (bitField0_ & ~0x00000020);
                azPosDemand_ = 0D;
                onChanged();
                return this;
            }

            private double elPosDemand_ ;
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public boolean hasElPosDemand() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public double getElPosDemand() {
                return elPosDemand_;
            }
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public Builder setElPosDemand(double value) {
                bitField0_ |= 0x00000040;
                elPosDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public Builder clearElPosDemand() {
                bitField0_ = (bitField0_ & ~0x00000040);
                elPosDemand_ = 0D;
                onChanged();
                return this;
            }

            private double azPosError_ ;
            /**
             * <code>required double azPosError = 8;</code>
             */
            public boolean hasAzPosError() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }
            /**
             * <code>required double azPosError = 8;</code>
             */
            public double getAzPosError() {
                return azPosError_;
            }
            /**
             * <code>required double azPosError = 8;</code>
             */
            public Builder setAzPosError(double value) {
                bitField0_ |= 0x00000080;
                azPosError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosError = 8;</code>
             */
            public Builder clearAzPosError() {
                bitField0_ = (bitField0_ & ~0x00000080);
                azPosError_ = 0D;
                onChanged();
                return this;
            }

            private double elPosError_ ;
            /**
             * <code>required double elPosError = 9;</code>
             */
            public boolean hasElPosError() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }
            /**
             * <code>required double elPosError = 9;</code>
             */
            public double getElPosError() {
                return elPosError_;
            }
            /**
             * <code>required double elPosError = 9;</code>
             */
            public Builder setElPosError(double value) {
                bitField0_ |= 0x00000100;
                elPosError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosError = 9;</code>
             */
            public Builder clearElPosError() {
                bitField0_ = (bitField0_ & ~0x00000100);
                elPosError_ = 0D;
                onChanged();
                return this;
            }

            private double azVelocity_ ;
            /**
             * <code>required double azVelocity = 10;</code>
             */
            public boolean hasAzVelocity() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }
            /**
             * <code>required double azVelocity = 10;</code>
             */
            public double getAzVelocity() {
                return azVelocity_;
            }
            /**
             * <code>required double azVelocity = 10;</code>
             */
            public Builder setAzVelocity(double value) {
                bitField0_ |= 0x00000200;
                azVelocity_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azVelocity = 10;</code>
             */
            public Builder clearAzVelocity() {
                bitField0_ = (bitField0_ & ~0x00000200);
                azVelocity_ = 0D;
                onChanged();
                return this;
            }

            private double elVelocity_ ;
            /**
             * <code>required double elVelocity = 11;</code>
             */
            public boolean hasElVelocity() {
                return ((bitField0_ & 0x00000400) == 0x00000400);
            }
            /**
             * <code>required double elVelocity = 11;</code>
             */
            public double getElVelocity() {
                return elVelocity_;
            }
            /**
             * <code>required double elVelocity = 11;</code>
             */
            public Builder setElVelocity(double value) {
                bitField0_ |= 0x00000400;
                elVelocity_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elVelocity = 11;</code>
             */
            public Builder clearElVelocity() {
                bitField0_ = (bitField0_ & ~0x00000400);
                elVelocity_ = 0D;
                onChanged();
                return this;
            }

            private double azVelocityDemand_ ;
            /**
             * <code>required double azVelocityDemand = 12;</code>
             */
            public boolean hasAzVelocityDemand() {
                return ((bitField0_ & 0x00000800) == 0x00000800);
            }
            /**
             * <code>required double azVelocityDemand = 12;</code>
             */
            public double getAzVelocityDemand() {
                return azVelocityDemand_;
            }
            /**
             * <code>required double azVelocityDemand = 12;</code>
             */
            public Builder setAzVelocityDemand(double value) {
                bitField0_ |= 0x00000800;
                azVelocityDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azVelocityDemand = 12;</code>
             */
            public Builder clearAzVelocityDemand() {
                bitField0_ = (bitField0_ & ~0x00000800);
                azVelocityDemand_ = 0D;
                onChanged();
                return this;
            }

            private double elVelocityDemand_ ;
            /**
             * <code>required double elVelocityDemand = 13;</code>
             */
            public boolean hasElVelocityDemand() {
                return ((bitField0_ & 0x00001000) == 0x00001000);
            }
            /**
             * <code>required double elVelocityDemand = 13;</code>
             */
            public double getElVelocityDemand() {
                return elVelocityDemand_;
            }
            /**
             * <code>required double elVelocityDemand = 13;</code>
             */
            public Builder setElVelocityDemand(double value) {
                bitField0_ |= 0x00001000;
                elVelocityDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elVelocityDemand = 13;</code>
             */
            public Builder clearElVelocityDemand() {
                bitField0_ = (bitField0_ & ~0x00001000);
                elVelocityDemand_ = 0D;
                onChanged();
                return this;
            }

            private double azVelocityError_ ;
            /**
             * <code>required double azVelocityError = 14;</code>
             */
            public boolean hasAzVelocityError() {
                return ((bitField0_ & 0x00002000) == 0x00002000);
            }
            /**
             * <code>required double azVelocityError = 14;</code>
             */
            public double getAzVelocityError() {
                return azVelocityError_;
            }
            /**
             * <code>required double azVelocityError = 14;</code>
             */
            public Builder setAzVelocityError(double value) {
                bitField0_ |= 0x00002000;
                azVelocityError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azVelocityError = 14;</code>
             */
            public Builder clearAzVelocityError() {
                bitField0_ = (bitField0_ & ~0x00002000);
                azVelocityError_ = 0D;
                onChanged();
                return this;
            }

            private double elVelocityError_ ;
            /**
             * <code>required double elVelocityError = 15;</code>
             */
            public boolean hasElVelocityError() {
                return ((bitField0_ & 0x00004000) == 0x00004000);
            }
            /**
             * <code>required double elVelocityError = 15;</code>
             */
            public double getElVelocityError() {
                return elVelocityError_;
            }
            /**
             * <code>required double elVelocityError = 15;</code>
             */
            public Builder setElVelocityError(double value) {
                bitField0_ |= 0x00004000;
                elVelocityError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elVelocityError = 15;</code>
             */
            public Builder clearElVelocityError() {
                bitField0_ = (bitField0_ & ~0x00004000);
                elVelocityError_ = 0D;
                onChanged();
                return this;
            }

            private double azAcceleration_ ;
            /**
             * <code>required double azAcceleration = 16;</code>
             */
            public boolean hasAzAcceleration() {
                return ((bitField0_ & 0x00008000) == 0x00008000);
            }
            /**
             * <code>required double azAcceleration = 16;</code>
             */
            public double getAzAcceleration() {
                return azAcceleration_;
            }
            /**
             * <code>required double azAcceleration = 16;</code>
             */
            public Builder setAzAcceleration(double value) {
                bitField0_ |= 0x00008000;
                azAcceleration_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azAcceleration = 16;</code>
             */
            public Builder clearAzAcceleration() {
                bitField0_ = (bitField0_ & ~0x00008000);
                azAcceleration_ = 0D;
                onChanged();
                return this;
            }

            private double elAcceleration_ ;
            /**
             * <code>required double elAcceleration = 17;</code>
             */
            public boolean hasElAcceleration() {
                return ((bitField0_ & 0x00010000) == 0x00010000);
            }
            /**
             * <code>required double elAcceleration = 17;</code>
             */
            public double getElAcceleration() {
                return elAcceleration_;
            }
            /**
             * <code>required double elAcceleration = 17;</code>
             */
            public Builder setElAcceleration(double value) {
                bitField0_ |= 0x00010000;
                elAcceleration_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elAcceleration = 17;</code>
             */
            public Builder clearElAcceleration() {
                bitField0_ = (bitField0_ & ~0x00010000);
                elAcceleration_ = 0D;
                onChanged();
                return this;
            }

            private double azTorqueDemand_ ;
            /**
             * <code>required double azTorqueDemand = 18;</code>
             */
            public boolean hasAzTorqueDemand() {
                return ((bitField0_ & 0x00020000) == 0x00020000);
            }
            /**
             * <code>required double azTorqueDemand = 18;</code>
             */
            public double getAzTorqueDemand() {
                return azTorqueDemand_;
            }
            /**
             * <code>required double azTorqueDemand = 18;</code>
             */
            public Builder setAzTorqueDemand(double value) {
                bitField0_ |= 0x00020000;
                azTorqueDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azTorqueDemand = 18;</code>
             */
            public Builder clearAzTorqueDemand() {
                bitField0_ = (bitField0_ & ~0x00020000);
                azTorqueDemand_ = 0D;
                onChanged();
                return this;
            }

            private double elTorqueDemand_ ;
            /**
             * <code>required double elTorqueDemand = 19;</code>
             */
            public boolean hasElTorqueDemand() {
                return ((bitField0_ & 0x00040000) == 0x00040000);
            }
            /**
             * <code>required double elTorqueDemand = 19;</code>
             */
            public double getElTorqueDemand() {
                return elTorqueDemand_;
            }
            /**
             * <code>required double elTorqueDemand = 19;</code>
             */
            public Builder setElTorqueDemand(double value) {
                bitField0_ |= 0x00040000;
                elTorqueDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elTorqueDemand = 19;</code>
             */
            public Builder clearElTorqueDemand() {
                bitField0_ = (bitField0_ & ~0x00040000);
                elTorqueDemand_ = 0D;
                onChanged();
                return this;
            }

            private int azEncoderPositions_ ;
            /**
             * <code>required int32 azEncoderPositions = 20;</code>
             */
            public boolean hasAzEncoderPositions() {
                return ((bitField0_ & 0x00080000) == 0x00080000);
            }
            /**
             * <code>required int32 azEncoderPositions = 20;</code>
             */
            public int getAzEncoderPositions() {
                return azEncoderPositions_;
            }
            /**
             * <code>required int32 azEncoderPositions = 20;</code>
             */
            public Builder setAzEncoderPositions(int value) {
                bitField0_ |= 0x00080000;
                azEncoderPositions_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 azEncoderPositions = 20;</code>
             */
            public Builder clearAzEncoderPositions() {
                bitField0_ = (bitField0_ & ~0x00080000);
                azEncoderPositions_ = 0;
                onChanged();
                return this;
            }

            private int elEncoderPositions_ ;
            /**
             * <code>required int32 elEncoderPositions = 21;</code>
             */
            public boolean hasElEncoderPositions() {
                return ((bitField0_ & 0x00100000) == 0x00100000);
            }
            /**
             * <code>required int32 elEncoderPositions = 21;</code>
             */
            public int getElEncoderPositions() {
                return elEncoderPositions_;
            }
            /**
             * <code>required int32 elEncoderPositions = 21;</code>
             */
            public Builder setElEncoderPositions(int value) {
                bitField0_ |= 0x00100000;
                elEncoderPositions_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 elEncoderPositions = 21;</code>
             */
            public Builder clearElEncoderPositions() {
                bitField0_ = (bitField0_ & ~0x00100000);
                elEncoderPositions_ = 0;
                onChanged();
                return this;
            }

            private float azDriveCurrents_ ;
            /**
             * <code>required float azDriveCurrents = 22;</code>
             */
            public boolean hasAzDriveCurrents() {
                return ((bitField0_ & 0x00200000) == 0x00200000);
            }
            /**
             * <code>required float azDriveCurrents = 22;</code>
             */
            public float getAzDriveCurrents() {
                return azDriveCurrents_;
            }
            /**
             * <code>required float azDriveCurrents = 22;</code>
             */
            public Builder setAzDriveCurrents(float value) {
                bitField0_ |= 0x00200000;
                azDriveCurrents_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required float azDriveCurrents = 22;</code>
             */
            public Builder clearAzDriveCurrents() {
                bitField0_ = (bitField0_ & ~0x00200000);
                azDriveCurrents_ = 0F;
                onChanged();
                return this;
            }

            private float elDriveCurrents_ ;
            /**
             * <code>required float elDriveCurrents = 23;</code>
             */
            public boolean hasElDriveCurrents() {
                return ((bitField0_ & 0x00400000) == 0x00400000);
            }
            /**
             * <code>required float elDriveCurrents = 23;</code>
             */
            public float getElDriveCurrents() {
                return elDriveCurrents_;
            }
            /**
             * <code>required float elDriveCurrents = 23;</code>
             */
            public Builder setElDriveCurrents(float value) {
                bitField0_ |= 0x00400000;
                elDriveCurrents_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required float elDriveCurrents = 23;</code>
             */
            public Builder clearElDriveCurrents() {
                bitField0_ = (bitField0_ & ~0x00400000);
                elDriveCurrents_ = 0F;
                onChanged();
                return this;
            }

            private double encoderLatchingTime_ ;
            /**
             * <code>required double encoderLatchingTime = 24;</code>
             */
            public boolean hasEncoderLatchingTime() {
                return ((bitField0_ & 0x00800000) == 0x00800000);
            }
            /**
             * <code>required double encoderLatchingTime = 24;</code>
             */
            public double getEncoderLatchingTime() {
                return encoderLatchingTime_;
            }
            /**
             * <code>required double encoderLatchingTime = 24;</code>
             */
            public Builder setEncoderLatchingTime(double value) {
                bitField0_ |= 0x00800000;
                encoderLatchingTime_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double encoderLatchingTime = 24;</code>
             */
            public Builder clearEncoderLatchingTime() {
                bitField0_ = (bitField0_ & ~0x00800000);
                encoderLatchingTime_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapPos_ ;
            /**
             * <code>required double azWrapPos = 25;</code>
             */
            public boolean hasAzWrapPos() {
                return ((bitField0_ & 0x01000000) == 0x01000000);
            }
            /**
             * <code>required double azWrapPos = 25;</code>
             */
            public double getAzWrapPos() {
                return azWrapPos_;
            }
            /**
             * <code>required double azWrapPos = 25;</code>
             */
            public Builder setAzWrapPos(double value) {
                bitField0_ |= 0x01000000;
                azWrapPos_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapPos = 25;</code>
             */
            public Builder clearAzWrapPos() {
                bitField0_ = (bitField0_ & ~0x01000000);
                azWrapPos_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapPosDemand_ ;
            /**
             * <code>required double azWrapPosDemand = 26;</code>
             */
            public boolean hasAzWrapPosDemand() {
                return ((bitField0_ & 0x02000000) == 0x02000000);
            }
            /**
             * <code>required double azWrapPosDemand = 26;</code>
             */
            public double getAzWrapPosDemand() {
                return azWrapPosDemand_;
            }
            /**
             * <code>required double azWrapPosDemand = 26;</code>
             */
            public Builder setAzWrapPosDemand(double value) {
                bitField0_ |= 0x02000000;
                azWrapPosDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapPosDemand = 26;</code>
             */
            public Builder clearAzWrapPosDemand() {
                bitField0_ = (bitField0_ & ~0x02000000);
                azWrapPosDemand_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapPosError_ ;
            /**
             * <code>required double azWrapPosError = 27;</code>
             */
            public boolean hasAzWrapPosError() {
                return ((bitField0_ & 0x04000000) == 0x04000000);
            }
            /**
             * <code>required double azWrapPosError = 27;</code>
             */
            public double getAzWrapPosError() {
                return azWrapPosError_;
            }
            /**
             * <code>required double azWrapPosError = 27;</code>
             */
            public Builder setAzWrapPosError(double value) {
                bitField0_ |= 0x04000000;
                azWrapPosError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapPosError = 27;</code>
             */
            public Builder clearAzWrapPosError() {
                bitField0_ = (bitField0_ & ~0x04000000);
                azWrapPosError_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapVelocity_ ;
            /**
             * <code>required double azWrapVelocity = 28;</code>
             */
            public boolean hasAzWrapVelocity() {
                return ((bitField0_ & 0x08000000) == 0x08000000);
            }
            /**
             * <code>required double azWrapVelocity = 28;</code>
             */
            public double getAzWrapVelocity() {
                return azWrapVelocity_;
            }
            /**
             * <code>required double azWrapVelocity = 28;</code>
             */
            public Builder setAzWrapVelocity(double value) {
                bitField0_ |= 0x08000000;
                azWrapVelocity_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapVelocity = 28;</code>
             */
            public Builder clearAzWrapVelocity() {
                bitField0_ = (bitField0_ & ~0x08000000);
                azWrapVelocity_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapVelocityDemand_ ;
            /**
             * <code>required double azWrapVelocityDemand = 29;</code>
             */
            public boolean hasAzWrapVelocityDemand() {
                return ((bitField0_ & 0x10000000) == 0x10000000);
            }
            /**
             * <code>required double azWrapVelocityDemand = 29;</code>
             */
            public double getAzWrapVelocityDemand() {
                return azWrapVelocityDemand_;
            }
            /**
             * <code>required double azWrapVelocityDemand = 29;</code>
             */
            public Builder setAzWrapVelocityDemand(double value) {
                bitField0_ |= 0x10000000;
                azWrapVelocityDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapVelocityDemand = 29;</code>
             */
            public Builder clearAzWrapVelocityDemand() {
                bitField0_ = (bitField0_ & ~0x10000000);
                azWrapVelocityDemand_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapVelocityError_ ;
            /**
             * <code>required double azWrapVelocityError = 30;</code>
             */
            public boolean hasAzWrapVelocityError() {
                return ((bitField0_ & 0x20000000) == 0x20000000);
            }
            /**
             * <code>required double azWrapVelocityError = 30;</code>
             */
            public double getAzWrapVelocityError() {
                return azWrapVelocityError_;
            }
            /**
             * <code>required double azWrapVelocityError = 30;</code>
             */
            public Builder setAzWrapVelocityError(double value) {
                bitField0_ |= 0x20000000;
                azWrapVelocityError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapVelocityError = 30;</code>
             */
            public Builder clearAzWrapVelocityError() {
                bitField0_ = (bitField0_ & ~0x20000000);
                azWrapVelocityError_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapAcceleration_ ;
            /**
             * <code>required double azWrapAcceleration = 31;</code>
             */
            public boolean hasAzWrapAcceleration() {
                return ((bitField0_ & 0x40000000) == 0x40000000);
            }
            /**
             * <code>required double azWrapAcceleration = 31;</code>
             */
            public double getAzWrapAcceleration() {
                return azWrapAcceleration_;
            }
            /**
             * <code>required double azWrapAcceleration = 31;</code>
             */
            public Builder setAzWrapAcceleration(double value) {
                bitField0_ |= 0x40000000;
                azWrapAcceleration_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapAcceleration = 31;</code>
             */
            public Builder clearAzWrapAcceleration() {
                bitField0_ = (bitField0_ & ~0x40000000);
                azWrapAcceleration_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapTorqueDemand_ ;
            /**
             * <code>required double azWrapTorqueDemand = 32;</code>
             */
            public boolean hasAzWrapTorqueDemand() {
                return ((bitField0_ & 0x80000000) == 0x80000000);
            }
            /**
             * <code>required double azWrapTorqueDemand = 32;</code>
             */
            public double getAzWrapTorqueDemand() {
                return azWrapTorqueDemand_;
            }
            /**
             * <code>required double azWrapTorqueDemand = 32;</code>
             */
            public Builder setAzWrapTorqueDemand(double value) {
                bitField0_ |= 0x80000000;
                azWrapTorqueDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapTorqueDemand = 32;</code>
             */
            public Builder clearAzWrapTorqueDemand() {
                bitField0_ = (bitField0_ & ~0x80000000);
                azWrapTorqueDemand_ = 0D;
                onChanged();
                return this;
            }

            private float azWrapDriveCurrents_ ;
            /**
             * <code>required float azWrapDriveCurrents = 33;</code>
             */
            public boolean hasAzWrapDriveCurrents() {
                return ((bitField1_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required float azWrapDriveCurrents = 33;</code>
             */
            public float getAzWrapDriveCurrents() {
                return azWrapDriveCurrents_;
            }
            /**
             * <code>required float azWrapDriveCurrents = 33;</code>
             */
            public Builder setAzWrapDriveCurrents(float value) {
                bitField1_ |= 0x00000001;
                azWrapDriveCurrents_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required float azWrapDriveCurrents = 33;</code>
             */
            public Builder clearAzWrapDriveCurrents() {
                bitField1_ = (bitField1_ & ~0x00000001);
                azWrapDriveCurrents_ = 0F;
                onChanged();
                return this;
            }

            private double azPosXp_ ;
            /**
             * <code>required double azPosXp = 34;</code>
             */
            public boolean hasAzPosXp() {
                return ((bitField1_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required double azPosXp = 34;</code>
             */
            public double getAzPosXp() {
                return azPosXp_;
            }
            /**
             * <code>required double azPosXp = 34;</code>
             */
            public Builder setAzPosXp(double value) {
                bitField1_ |= 0x00000002;
                azPosXp_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosXp = 34;</code>
             */
            public Builder clearAzPosXp() {
                bitField1_ = (bitField1_ & ~0x00000002);
                azPosXp_ = 0D;
                onChanged();
                return this;
            }

            private double azPosXm_ ;
            /**
             * <code>required double azPosXm = 35;</code>
             */
            public boolean hasAzPosXm() {
                return ((bitField1_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required double azPosXm = 35;</code>
             */
            public double getAzPosXm() {
                return azPosXm_;
            }
            /**
             * <code>required double azPosXm = 35;</code>
             */
            public Builder setAzPosXm(double value) {
                bitField1_ |= 0x00000004;
                azPosXm_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosXm = 35;</code>
             */
            public Builder clearAzPosXm() {
                bitField1_ = (bitField1_ & ~0x00000004);
                azPosXm_ = 0D;
                onChanged();
                return this;
            }

            private double elPosXp_ ;
            /**
             * <code>required double elPosXp = 36;</code>
             */
            public boolean hasElPosXp() {
                return ((bitField1_ & 0x00000008) == 0x00000008);
            }
            /**
             * <code>required double elPosXp = 36;</code>
             */
            public double getElPosXp() {
                return elPosXp_;
            }
            /**
             * <code>required double elPosXp = 36;</code>
             */
            public Builder setElPosXp(double value) {
                bitField1_ |= 0x00000008;
                elPosXp_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosXp = 36;</code>
             */
            public Builder clearElPosXp() {
                bitField1_ = (bitField1_ & ~0x00000008);
                elPosXp_ = 0D;
                onChanged();
                return this;
            }

            private double elPosXm_ ;
            /**
             * <code>required double elPosXm = 37;</code>
             */
            public boolean hasElPosXm() {
                return ((bitField1_ & 0x00000010) == 0x00000010);
            }
            /**
             * <code>required double elPosXm = 37;</code>
             */
            public double getElPosXm() {
                return elPosXm_;
            }
            /**
             * <code>required double elPosXm = 37;</code>
             */
            public Builder setElPosXm(double value) {
                bitField1_ |= 0x00000010;
                elPosXm_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosXm = 37;</code>
             */
            public Builder clearElPosXm() {
                bitField1_ = (bitField1_ & ~0x00000010);
                elPosXm_ = 0D;
                onChanged();
                return this;
            }

            private double azPosByHead_ ;
            /**
             * <code>required double azPosByHead = 38;</code>
             */
            public boolean hasAzPosByHead() {
                return ((bitField1_ & 0x00000020) == 0x00000020);
            }
            /**
             * <code>required double azPosByHead = 38;</code>
             */
            public double getAzPosByHead() {
                return azPosByHead_;
            }
            /**
             * <code>required double azPosByHead = 38;</code>
             */
            public Builder setAzPosByHead(double value) {
                bitField1_ |= 0x00000020;
                azPosByHead_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosByHead = 38;</code>
             */
            public Builder clearAzPosByHead() {
                bitField1_ = (bitField1_ & ~0x00000020);
                azPosByHead_ = 0D;
                onChanged();
                return this;
            }

            private double elPosByHead_ ;
            /**
             * <code>required double elPosByHead = 39;</code>
             */
            public boolean hasElPosByHead() {
                return ((bitField1_ & 0x00000040) == 0x00000040);
            }
            /**
             * <code>required double elPosByHead = 39;</code>
             */
            public double getElPosByHead() {
                return elPosByHead_;
            }
            /**
             * <code>required double elPosByHead = 39;</code>
             */
            public Builder setElPosByHead(double value) {
                bitField1_ |= 0x00000040;
                elPosByHead_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosByHead = 39;</code>
             */
            public Builder clearElPosByHead() {
                bitField1_ = (bitField1_ & ~0x00000040);
                elPosByHead_ = 0D;
                onChanged();
                return this;
            }

            private int azNumOfStoredDemand_ ;
            /**
             * <code>required int32 azNumOfStoredDemand = 40;</code>
             */
            public boolean hasAzNumOfStoredDemand() {
                return ((bitField1_ & 0x00000080) == 0x00000080);
            }
            /**
             * <code>required int32 azNumOfStoredDemand = 40;</code>
             */
            public int getAzNumOfStoredDemand() {
                return azNumOfStoredDemand_;
            }
            /**
             * <code>required int32 azNumOfStoredDemand = 40;</code>
             */
            public Builder setAzNumOfStoredDemand(int value) {
                bitField1_ |= 0x00000080;
                azNumOfStoredDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 azNumOfStoredDemand = 40;</code>
             */
            public Builder clearAzNumOfStoredDemand() {
                bitField1_ = (bitField1_ & ~0x00000080);
                azNumOfStoredDemand_ = 0;
                onChanged();
                return this;
            }

            private int elNumOfStoredDemand_ ;
            /**
             * <code>required int32 elNumOfStoredDemand = 41;</code>
             */
            public boolean hasElNumOfStoredDemand() {
                return ((bitField1_ & 0x00000100) == 0x00000100);
            }
            /**
             * <code>required int32 elNumOfStoredDemand = 41;</code>
             */
            public int getElNumOfStoredDemand() {
                return elNumOfStoredDemand_;
            }
            /**
             * <code>required int32 elNumOfStoredDemand = 41;</code>
             */
            public Builder setElNumOfStoredDemand(int value) {
                bitField1_ |= 0x00000100;
                elNumOfStoredDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 elNumOfStoredDemand = 41;</code>
             */
            public Builder clearElNumOfStoredDemand() {
                bitField1_ = (bitField1_ & ~0x00000100);
                elNumOfStoredDemand_ = 0;
                onChanged();
                return this;
            }

            private int eibTriggerCounter_ ;
            /**
             * <code>required int32 eibTriggerCounter = 42;</code>
             */
            public boolean hasEibTriggerCounter() {
                return ((bitField1_ & 0x00000200) == 0x00000200);
            }
            /**
             * <code>required int32 eibTriggerCounter = 42;</code>
             */
            public int getEibTriggerCounter() {
                return eibTriggerCounter_;
            }
            /**
             * <code>required int32 eibTriggerCounter = 42;</code>
             */
            public Builder setEibTriggerCounter(int value) {
                bitField1_ |= 0x00000200;
                eibTriggerCounter_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 eibTriggerCounter = 42;</code>
             */
            public Builder clearEibTriggerCounter() {
                bitField1_ = (bitField1_ & ~0x00000200);
                eibTriggerCounter_ = 0;
                onChanged();
                return this;
            }

            private int eibStatusWord_ ;
            /**
             * <code>required int32 eibStatusWord = 43;</code>
             */
            public boolean hasEibStatusWord() {
                return ((bitField1_ & 0x00000400) == 0x00000400);
            }
            /**
             * <code>required int32 eibStatusWord = 43;</code>
             */
            public int getEibStatusWord() {
                return eibStatusWord_;
            }
            /**
             * <code>required int32 eibStatusWord = 43;</code>
             */
            public Builder setEibStatusWord(int value) {
                bitField1_ |= 0x00000400;
                eibStatusWord_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 eibStatusWord = 43;</code>
             */
            public Builder clearEibStatusWord() {
                bitField1_ = (bitField1_ & ~0x00000400);
                eibStatusWord_ = 0;
                onChanged();
                return this;
            }

            private int eibTimestamp_ ;
            /**
             * <code>required int32 eibTimestamp = 44;</code>
             */
            public boolean hasEibTimestamp() {
                return ((bitField1_ & 0x00000800) == 0x00000800);
            }
            /**
             * <code>required int32 eibTimestamp = 44;</code>
             */
            public int getEibTimestamp() {
                return eibTimestamp_;
            }
            /**
             * <code>required int32 eibTimestamp = 44;</code>
             */
            public Builder setEibTimestamp(int value) {
                bitField1_ |= 0x00000800;
                eibTimestamp_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 eibTimestamp = 44;</code>
             */
            public Builder clearEibTimestamp() {
                bitField1_ = (bitField1_ & ~0x00000800);
                eibTimestamp_ = 0;
                onChanged();
                return this;
            }

            private long eibReferencePosition1_ ;
            /**
             * <code>required int64 eibReferencePosition1 = 45;</code>
             */
            public boolean hasEibReferencePosition1() {
                return ((bitField1_ & 0x00001000) == 0x00001000);
            }
            /**
             * <code>required int64 eibReferencePosition1 = 45;</code>
             */
            public long getEibReferencePosition1() {
                return eibReferencePosition1_;
            }
            /**
             * <code>required int64 eibReferencePosition1 = 45;</code>
             */
            public Builder setEibReferencePosition1(long value) {
                bitField1_ |= 0x00001000;
                eibReferencePosition1_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 eibReferencePosition1 = 45;</code>
             */
            public Builder clearEibReferencePosition1() {
                bitField1_ = (bitField1_ & ~0x00001000);
                eibReferencePosition1_ = 0L;
                onChanged();
                return this;
            }

            private long eibDCReferencePosition_ ;
            /**
             * <code>required int64 eibDCReferencePosition = 46;</code>
             */
            public boolean hasEibDCReferencePosition() {
                return ((bitField1_ & 0x00002000) == 0x00002000);
            }
            /**
             * <code>required int64 eibDCReferencePosition = 46;</code>
             */
            public long getEibDCReferencePosition() {
                return eibDCReferencePosition_;
            }
            /**
             * <code>required int64 eibDCReferencePosition = 46;</code>
             */
            public Builder setEibDCReferencePosition(long value) {
                bitField1_ |= 0x00002000;
                eibDCReferencePosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 eibDCReferencePosition = 46;</code>
             */
            public Builder clearEibDCReferencePosition() {
                bitField1_ = (bitField1_ & ~0x00002000);
                eibDCReferencePosition_ = 0L;
                onChanged();
                return this;
            }

            private double azPosByAbs_ ;
            /**
             * <code>required double azPosByAbs = 47;</code>
             */
            public boolean hasAzPosByAbs() {
                return ((bitField1_ & 0x00004000) == 0x00004000);
            }
            /**
             * <code>required double azPosByAbs = 47;</code>
             */
            public double getAzPosByAbs() {
                return azPosByAbs_;
            }
            /**
             * <code>required double azPosByAbs = 47;</code>
             */
            public Builder setAzPosByAbs(double value) {
                bitField1_ |= 0x00004000;
                azPosByAbs_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosByAbs = 47;</code>
             */
            public Builder clearAzPosByAbs() {
                bitField1_ = (bitField1_ & ~0x00004000);
                azPosByAbs_ = 0D;
                onChanged();
                return this;
            }

            private double elPosByAbs_ ;
            /**
             * <code>required double elPosByAbs = 48;</code>
             */
            public boolean hasElPosByAbs() {
                return ((bitField1_ & 0x00008000) == 0x00008000);
            }
            /**
             * <code>required double elPosByAbs = 48;</code>
             */
            public double getElPosByAbs() {
                return elPosByAbs_;
            }
            /**
             * <code>required double elPosByAbs = 48;</code>
             */
            public Builder setElPosByAbs(double value) {
                bitField1_ |= 0x00008000;
                elPosByAbs_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosByAbs = 48;</code>
             */
            public Builder clearElPosByAbs() {
                bitField1_ = (bitField1_ & ~0x00008000);
                elPosByAbs_ = 0D;
                onChanged();
                return this;
            }

            private double azPosErrA_ ;
            /**
             * <code>required double azPosErrA = 49;</code>
             */
            public boolean hasAzPosErrA() {
                return ((bitField1_ & 0x00010000) == 0x00010000);
            }
            /**
             * <code>required double azPosErrA = 49;</code>
             */
            public double getAzPosErrA() {
                return azPosErrA_;
            }
            /**
             * <code>required double azPosErrA = 49;</code>
             */
            public Builder setAzPosErrA(double value) {
                bitField1_ |= 0x00010000;
                azPosErrA_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosErrA = 49;</code>
             */
            public Builder clearAzPosErrA() {
                bitField1_ = (bitField1_ & ~0x00010000);
                azPosErrA_ = 0D;
                onChanged();
                return this;
            }

            private double azPosErrB_ ;
            /**
             * <code>required double azPosErrB = 50;</code>
             */
            public boolean hasAzPosErrB() {
                return ((bitField1_ & 0x00020000) == 0x00020000);
            }
            /**
             * <code>required double azPosErrB = 50;</code>
             */
            public double getAzPosErrB() {
                return azPosErrB_;
            }
            /**
             * <code>required double azPosErrB = 50;</code>
             */
            public Builder setAzPosErrB(double value) {
                bitField1_ |= 0x00020000;
                azPosErrB_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosErrB = 50;</code>
             */
            public Builder clearAzPosErrB() {
                bitField1_ = (bitField1_ & ~0x00020000);
                azPosErrB_ = 0D;
                onChanged();
                return this;
            }

            private double elPosErrA_ ;
            /**
             * <code>required double elPosErrA = 51;</code>
             */
            public boolean hasElPosErrA() {
                return ((bitField1_ & 0x00040000) == 0x00040000);
            }
            /**
             * <code>required double elPosErrA = 51;</code>
             */
            public double getElPosErrA() {
                return elPosErrA_;
            }
            /**
             * <code>required double elPosErrA = 51;</code>
             */
            public Builder setElPosErrA(double value) {
                bitField1_ |= 0x00040000;
                elPosErrA_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosErrA = 51;</code>
             */
            public Builder clearElPosErrA() {
                bitField1_ = (bitField1_ & ~0x00040000);
                elPosErrA_ = 0D;
                onChanged();
                return this;
            }

            private double elPosErrB_ ;
            /**
             * <code>required double elPosErrB = 52;</code>
             */
            public boolean hasElPosErrB() {
                return ((bitField1_ & 0x00080000) == 0x00080000);
            }
            /**
             * <code>required double elPosErrB = 52;</code>
             */
            public double getElPosErrB() {
                return elPosErrB_;
            }
            /**
             * <code>required double elPosErrB = 52;</code>
             */
            public Builder setElPosErrB(double value) {
                bitField1_ |= 0x00080000;
                elPosErrB_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosErrB = 52;</code>
             */
            public Builder clearElPosErrB() {
                bitField1_ = (bitField1_ & ~0x00080000);
                elPosErrB_ = 0D;
                onChanged();
                return this;
            }

            private double azPosTestInput_ ;
            /**
             * <code>required double azPosTestInput = 53;</code>
             */
            public boolean hasAzPosTestInput() {
                return ((bitField1_ & 0x00100000) == 0x00100000);
            }
            /**
             * <code>required double azPosTestInput = 53;</code>
             */
            public double getAzPosTestInput() {
                return azPosTestInput_;
            }
            /**
             * <code>required double azPosTestInput = 53;</code>
             */
            public Builder setAzPosTestInput(double value) {
                bitField1_ |= 0x00100000;
                azPosTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosTestInput = 53;</code>
             */
            public Builder clearAzPosTestInput() {
                bitField1_ = (bitField1_ & ~0x00100000);
                azPosTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double elPosTestInput_ ;
            /**
             * <code>required double elPosTestInput = 54;</code>
             */
            public boolean hasElPosTestInput() {
                return ((bitField1_ & 0x00200000) == 0x00200000);
            }
            /**
             * <code>required double elPosTestInput = 54;</code>
             */
            public double getElPosTestInput() {
                return elPosTestInput_;
            }
            /**
             * <code>required double elPosTestInput = 54;</code>
             */
            public Builder setElPosTestInput(double value) {
                bitField1_ |= 0x00200000;
                elPosTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosTestInput = 54;</code>
             */
            public Builder clearElPosTestInput() {
                bitField1_ = (bitField1_ & ~0x00200000);
                elPosTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double azMaxVelTestInput_ ;
            /**
             * <code>required double azMaxVelTestInput = 55;</code>
             */
            public boolean hasAzMaxVelTestInput() {
                return ((bitField1_ & 0x00400000) == 0x00400000);
            }
            /**
             * <code>required double azMaxVelTestInput = 55;</code>
             */
            public double getAzMaxVelTestInput() {
                return azMaxVelTestInput_;
            }
            /**
             * <code>required double azMaxVelTestInput = 55;</code>
             */
            public Builder setAzMaxVelTestInput(double value) {
                bitField1_ |= 0x00400000;
                azMaxVelTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azMaxVelTestInput = 55;</code>
             */
            public Builder clearAzMaxVelTestInput() {
                bitField1_ = (bitField1_ & ~0x00400000);
                azMaxVelTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double elMaxVelTestInput_ ;
            /**
             * <code>required double elMaxVelTestInput = 56;</code>
             */
            public boolean hasElMaxVelTestInput() {
                return ((bitField1_ & 0x00800000) == 0x00800000);
            }
            /**
             * <code>required double elMaxVelTestInput = 56;</code>
             */
            public double getElMaxVelTestInput() {
                return elMaxVelTestInput_;
            }
            /**
             * <code>required double elMaxVelTestInput = 56;</code>
             */
            public Builder setElMaxVelTestInput(double value) {
                bitField1_ |= 0x00800000;
                elMaxVelTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elMaxVelTestInput = 56;</code>
             */
            public Builder clearElMaxVelTestInput() {
                bitField1_ = (bitField1_ & ~0x00800000);
                elMaxVelTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double azMinVelTestInput_ ;
            /**
             * <code>required double azMinVelTestInput = 57;</code>
             */
            public boolean hasAzMinVelTestInput() {
                return ((bitField1_ & 0x01000000) == 0x01000000);
            }
            /**
             * <code>required double azMinVelTestInput = 57;</code>
             */
            public double getAzMinVelTestInput() {
                return azMinVelTestInput_;
            }
            /**
             * <code>required double azMinVelTestInput = 57;</code>
             */
            public Builder setAzMinVelTestInput(double value) {
                bitField1_ |= 0x01000000;
                azMinVelTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azMinVelTestInput = 57;</code>
             */
            public Builder clearAzMinVelTestInput() {
                bitField1_ = (bitField1_ & ~0x01000000);
                azMinVelTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double elMinVelTestInput_ ;
            /**
             * <code>required double elMinVelTestInput = 58;</code>
             */
            public boolean hasElMinVelTestInput() {
                return ((bitField1_ & 0x02000000) == 0x02000000);
            }
            /**
             * <code>required double elMinVelTestInput = 58;</code>
             */
            public double getElMinVelTestInput() {
                return elMinVelTestInput_;
            }
            /**
             * <code>required double elMinVelTestInput = 58;</code>
             */
            public Builder setElMinVelTestInput(double value) {
                bitField1_ |= 0x02000000;
                elMinVelTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elMinVelTestInput = 58;</code>
             */
            public Builder clearElMinVelTestInput() {
                bitField1_ = (bitField1_ & ~0x02000000);
                elMinVelTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double azTrqTestInput_ ;
            /**
             * <code>required double azTrqTestInput = 59;</code>
             */
            public boolean hasAzTrqTestInput() {
                return ((bitField1_ & 0x04000000) == 0x04000000);
            }
            /**
             * <code>required double azTrqTestInput = 59;</code>
             */
            public double getAzTrqTestInput() {
                return azTrqTestInput_;
            }
            /**
             * <code>required double azTrqTestInput = 59;</code>
             */
            public Builder setAzTrqTestInput(double value) {
                bitField1_ |= 0x04000000;
                azTrqTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azTrqTestInput = 59;</code>
             */
            public Builder clearAzTrqTestInput() {
                bitField1_ = (bitField1_ & ~0x04000000);
                azTrqTestInput_ = 0D;
                onChanged();
                return this;
            }

            private double elTrqTestInput_ ;
            /**
             * <code>required double elTrqTestInput = 60;</code>
             */
            public boolean hasElTrqTestInput() {
                return ((bitField1_ & 0x08000000) == 0x08000000);
            }
            /**
             * <code>required double elTrqTestInput = 60;</code>
             */
            public double getElTrqTestInput() {
                return elTrqTestInput_;
            }
            /**
             * <code>required double elTrqTestInput = 60;</code>
             */
            public Builder setElTrqTestInput(double value) {
                bitField1_ |= 0x08000000;
                elTrqTestInput_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elTrqTestInput = 60;</code>
             */
            public Builder clearElTrqTestInput() {
                bitField1_ = (bitField1_ & ~0x08000000);
                elTrqTestInput_ = 0D;
                onChanged();
                return this;
            }

            private long time_ ;
            /**
             * <code>required int64 time = 61;</code>
             */
            public boolean hasTime() {
                return ((bitField1_ & 0x10000000) == 0x10000000);
            }
            /**
             * <code>required int64 time = 61;</code>
             */
            public long getTime() {
                return time_;
            }
            /**
             * <code>required int64 time = 61;</code>
             */
            public Builder setTime(long value) {
                bitField1_ |= 0x10000000;
                time_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 time = 61;</code>
             */
            public Builder clearTime() {
                bitField1_ = (bitField1_ & ~0x10000000);
                time_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.MountControlDiags)
        }

        static {
            defaultInstance = new MountControlDiags(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.MountControlDiags)
    }

    public interface McsCurrentPositionEventOrBuilder extends
            // @@protoc_insertion_point(interface_extends:eventpoc.McsCurrentPositionEvent)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required bool mcsInPosition = 1;</code>
         *
         * <pre>
         * conjunction of azInPosition and elInPosition
         * </pre>
         */
        boolean hasMcsInPosition();
        /**
         * <code>required bool mcsInPosition = 1;</code>
         *
         * <pre>
         * conjunction of azInPosition and elInPosition
         * </pre>
         */
        boolean getMcsInPosition();

        /**
         * <code>required double azPos = 2;</code>
         */
        boolean hasAzPos();
        /**
         * <code>required double azPos = 2;</code>
         */
        double getAzPos();

        /**
         * <code>required double azPosDemand = 3;</code>
         */
        boolean hasAzPosDemand();
        /**
         * <code>required double azPosDemand = 3;</code>
         */
        double getAzPosDemand();

        /**
         * <code>required double azPosError = 4;</code>
         */
        boolean hasAzPosError();
        /**
         * <code>required double azPosError = 4;</code>
         */
        double getAzPosError();

        /**
         * <code>required bool azInPosition = 5;</code>
         */
        boolean hasAzInPosition();
        /**
         * <code>required bool azInPosition = 5;</code>
         */
        boolean getAzInPosition();

        /**
         * <code>required double elPos = 6;</code>
         */
        boolean hasElPos();
        /**
         * <code>required double elPos = 6;</code>
         */
        double getElPos();

        /**
         * <code>required double elPosDemand = 7;</code>
         */
        boolean hasElPosDemand();
        /**
         * <code>required double elPosDemand = 7;</code>
         */
        double getElPosDemand();

        /**
         * <code>required double elPosError = 8;</code>
         */
        boolean hasElPosError();
        /**
         * <code>required double elPosError = 8;</code>
         */
        double getElPosError();

        /**
         * <code>required bool elInPosition = 9;</code>
         */
        boolean hasElInPosition();
        /**
         * <code>required bool elInPosition = 9;</code>
         */
        boolean getElInPosition();

        /**
         * <code>required double encodeLatchingTime = 10;</code>
         */
        boolean hasEncodeLatchingTime();
        /**
         * <code>required double encodeLatchingTime = 10;</code>
         */
        double getEncodeLatchingTime();

        /**
         * <code>required int32 azPosDmdErrCount = 11;</code>
         */
        boolean hasAzPosDmdErrCount();
        /**
         * <code>required int32 azPosDmdErrCount = 11;</code>
         */
        int getAzPosDmdErrCount();

        /**
         * <code>required int32 elPosDmdErrCount = 12;</code>
         */
        boolean hasElPosDmdErrCount();
        /**
         * <code>required int32 elPosDmdErrCount = 12;</code>
         */
        int getElPosDmdErrCount();

        /**
         * <code>required double azWrapPos = 13;</code>
         */
        boolean hasAzWrapPos();
        /**
         * <code>required double azWrapPos = 13;</code>
         */
        double getAzWrapPos();

        /**
         * <code>required double azWrapPosDemand = 14;</code>
         */
        boolean hasAzWrapPosDemand();
        /**
         * <code>required double azWrapPosDemand = 14;</code>
         */
        double getAzWrapPosDemand();

        /**
         * <code>required double azWrapPosError = 15;</code>
         */
        boolean hasAzWrapPosError();
        /**
         * <code>required double azWrapPosError = 15;</code>
         */
        double getAzWrapPosError();

        /**
         * <code>required int64 time = 16;</code>
         */
        boolean hasTime();
        /**
         * <code>required int64 time = 16;</code>
         */
        long getTime();
    }
    /**
     * Protobuf type {@code eventpoc.McsCurrentPositionEvent}
     */
    public static final class McsCurrentPositionEvent extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:eventpoc.McsCurrentPositionEvent)
            McsCurrentPositionEventOrBuilder {
        // Use McsCurrentPositionEvent.newBuilder() to construct.
        private McsCurrentPositionEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private McsCurrentPositionEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final McsCurrentPositionEvent defaultInstance;
        public static McsCurrentPositionEvent getDefaultInstance() {
            return defaultInstance;
        }

        public McsCurrentPositionEvent getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }
        private McsCurrentPositionEvent(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            mcsInPosition_ = input.readBool();
                            break;
                        }
                        case 17: {
                            bitField0_ |= 0x00000002;
                            azPos_ = input.readDouble();
                            break;
                        }
                        case 25: {
                            bitField0_ |= 0x00000004;
                            azPosDemand_ = input.readDouble();
                            break;
                        }
                        case 33: {
                            bitField0_ |= 0x00000008;
                            azPosError_ = input.readDouble();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            azInPosition_ = input.readBool();
                            break;
                        }
                        case 49: {
                            bitField0_ |= 0x00000020;
                            elPos_ = input.readDouble();
                            break;
                        }
                        case 57: {
                            bitField0_ |= 0x00000040;
                            elPosDemand_ = input.readDouble();
                            break;
                        }
                        case 65: {
                            bitField0_ |= 0x00000080;
                            elPosError_ = input.readDouble();
                            break;
                        }
                        case 72: {
                            bitField0_ |= 0x00000100;
                            elInPosition_ = input.readBool();
                            break;
                        }
                        case 81: {
                            bitField0_ |= 0x00000200;
                            encodeLatchingTime_ = input.readDouble();
                            break;
                        }
                        case 88: {
                            bitField0_ |= 0x00000400;
                            azPosDmdErrCount_ = input.readInt32();
                            break;
                        }
                        case 96: {
                            bitField0_ |= 0x00000800;
                            elPosDmdErrCount_ = input.readInt32();
                            break;
                        }
                        case 105: {
                            bitField0_ |= 0x00001000;
                            azWrapPos_ = input.readDouble();
                            break;
                        }
                        case 113: {
                            bitField0_ |= 0x00002000;
                            azWrapPosDemand_ = input.readDouble();
                            break;
                        }
                        case 121: {
                            bitField0_ |= 0x00004000;
                            azWrapPosError_ = input.readDouble();
                            break;
                        }
                        case 128: {
                            bitField0_ |= 0x00008000;
                            time_ = input.readInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsCurrentPositionEvent_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsCurrentPositionEvent_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.Builder.class);
        }

        public static com.google.protobuf.Parser<McsCurrentPositionEvent> PARSER =
                new com.google.protobuf.AbstractParser<McsCurrentPositionEvent>() {
                    public McsCurrentPositionEvent parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new McsCurrentPositionEvent(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<McsCurrentPositionEvent> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int MCSINPOSITION_FIELD_NUMBER = 1;
        private boolean mcsInPosition_;
        /**
         * <code>required bool mcsInPosition = 1;</code>
         *
         * <pre>
         * conjunction of azInPosition and elInPosition
         * </pre>
         */
        public boolean hasMcsInPosition() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required bool mcsInPosition = 1;</code>
         *
         * <pre>
         * conjunction of azInPosition and elInPosition
         * </pre>
         */
        public boolean getMcsInPosition() {
            return mcsInPosition_;
        }

        public static final int AZPOS_FIELD_NUMBER = 2;
        private double azPos_;
        /**
         * <code>required double azPos = 2;</code>
         */
        public boolean hasAzPos() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required double azPos = 2;</code>
         */
        public double getAzPos() {
            return azPos_;
        }

        public static final int AZPOSDEMAND_FIELD_NUMBER = 3;
        private double azPosDemand_;
        /**
         * <code>required double azPosDemand = 3;</code>
         */
        public boolean hasAzPosDemand() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required double azPosDemand = 3;</code>
         */
        public double getAzPosDemand() {
            return azPosDemand_;
        }

        public static final int AZPOSERROR_FIELD_NUMBER = 4;
        private double azPosError_;
        /**
         * <code>required double azPosError = 4;</code>
         */
        public boolean hasAzPosError() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required double azPosError = 4;</code>
         */
        public double getAzPosError() {
            return azPosError_;
        }

        public static final int AZINPOSITION_FIELD_NUMBER = 5;
        private boolean azInPosition_;
        /**
         * <code>required bool azInPosition = 5;</code>
         */
        public boolean hasAzInPosition() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required bool azInPosition = 5;</code>
         */
        public boolean getAzInPosition() {
            return azInPosition_;
        }

        public static final int ELPOS_FIELD_NUMBER = 6;
        private double elPos_;
        /**
         * <code>required double elPos = 6;</code>
         */
        public boolean hasElPos() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required double elPos = 6;</code>
         */
        public double getElPos() {
            return elPos_;
        }

        public static final int ELPOSDEMAND_FIELD_NUMBER = 7;
        private double elPosDemand_;
        /**
         * <code>required double elPosDemand = 7;</code>
         */
        public boolean hasElPosDemand() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required double elPosDemand = 7;</code>
         */
        public double getElPosDemand() {
            return elPosDemand_;
        }

        public static final int ELPOSERROR_FIELD_NUMBER = 8;
        private double elPosError_;
        /**
         * <code>required double elPosError = 8;</code>
         */
        public boolean hasElPosError() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required double elPosError = 8;</code>
         */
        public double getElPosError() {
            return elPosError_;
        }

        public static final int ELINPOSITION_FIELD_NUMBER = 9;
        private boolean elInPosition_;
        /**
         * <code>required bool elInPosition = 9;</code>
         */
        public boolean hasElInPosition() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>required bool elInPosition = 9;</code>
         */
        public boolean getElInPosition() {
            return elInPosition_;
        }

        public static final int ENCODELATCHINGTIME_FIELD_NUMBER = 10;
        private double encodeLatchingTime_;
        /**
         * <code>required double encodeLatchingTime = 10;</code>
         */
        public boolean hasEncodeLatchingTime() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>required double encodeLatchingTime = 10;</code>
         */
        public double getEncodeLatchingTime() {
            return encodeLatchingTime_;
        }

        public static final int AZPOSDMDERRCOUNT_FIELD_NUMBER = 11;
        private int azPosDmdErrCount_;
        /**
         * <code>required int32 azPosDmdErrCount = 11;</code>
         */
        public boolean hasAzPosDmdErrCount() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>required int32 azPosDmdErrCount = 11;</code>
         */
        public int getAzPosDmdErrCount() {
            return azPosDmdErrCount_;
        }

        public static final int ELPOSDMDERRCOUNT_FIELD_NUMBER = 12;
        private int elPosDmdErrCount_;
        /**
         * <code>required int32 elPosDmdErrCount = 12;</code>
         */
        public boolean hasElPosDmdErrCount() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>required int32 elPosDmdErrCount = 12;</code>
         */
        public int getElPosDmdErrCount() {
            return elPosDmdErrCount_;
        }

        public static final int AZWRAPPOS_FIELD_NUMBER = 13;
        private double azWrapPos_;
        /**
         * <code>required double azWrapPos = 13;</code>
         */
        public boolean hasAzWrapPos() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>required double azWrapPos = 13;</code>
         */
        public double getAzWrapPos() {
            return azWrapPos_;
        }

        public static final int AZWRAPPOSDEMAND_FIELD_NUMBER = 14;
        private double azWrapPosDemand_;
        /**
         * <code>required double azWrapPosDemand = 14;</code>
         */
        public boolean hasAzWrapPosDemand() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }
        /**
         * <code>required double azWrapPosDemand = 14;</code>
         */
        public double getAzWrapPosDemand() {
            return azWrapPosDemand_;
        }

        public static final int AZWRAPPOSERROR_FIELD_NUMBER = 15;
        private double azWrapPosError_;
        /**
         * <code>required double azWrapPosError = 15;</code>
         */
        public boolean hasAzWrapPosError() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }
        /**
         * <code>required double azWrapPosError = 15;</code>
         */
        public double getAzWrapPosError() {
            return azWrapPosError_;
        }

        public static final int TIME_FIELD_NUMBER = 16;
        private long time_;
        /**
         * <code>required int64 time = 16;</code>
         */
        public boolean hasTime() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }
        /**
         * <code>required int64 time = 16;</code>
         */
        public long getTime() {
            return time_;
        }

        private void initFields() {
            mcsInPosition_ = false;
            azPos_ = 0D;
            azPosDemand_ = 0D;
            azPosError_ = 0D;
            azInPosition_ = false;
            elPos_ = 0D;
            elPosDemand_ = 0D;
            elPosError_ = 0D;
            elInPosition_ = false;
            encodeLatchingTime_ = 0D;
            azPosDmdErrCount_ = 0;
            elPosDmdErrCount_ = 0;
            azWrapPos_ = 0D;
            azWrapPosDemand_ = 0D;
            azWrapPosError_ = 0D;
            time_ = 0L;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasMcsInPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPos()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzInPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPos()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElInPosition()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasEncodeLatchingTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzPosDmdErrCount()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasElPosDmdErrCount()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapPos()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapPosDemand()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasAzWrapPosError()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTime()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBool(1, mcsInPosition_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeDouble(2, azPos_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeDouble(3, azPosDemand_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeDouble(4, azPosError_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeBool(5, azInPosition_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeDouble(6, elPos_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeDouble(7, elPosDemand_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeDouble(8, elPosError_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeBool(9, elInPosition_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeDouble(10, encodeLatchingTime_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeInt32(11, azPosDmdErrCount_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeInt32(12, elPosDmdErrCount_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeDouble(13, azWrapPos_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeDouble(14, azWrapPosDemand_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeDouble(15, azWrapPosError_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeInt64(16, time_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(1, mcsInPosition_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(2, azPos_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(3, azPosDemand_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(4, azPosError_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(5, azInPosition_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(6, elPos_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(7, elPosDemand_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(8, elPosError_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBoolSize(9, elInPosition_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(10, encodeLatchingTime_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(11, azPosDmdErrCount_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(12, elPosDmdErrCount_);
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(13, azWrapPos_);
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(14, azWrapPosDemand_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeDoubleSize(15, azWrapPosError_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt64Size(16, time_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }
        public static org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent prototype) {
            return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }
        /**
         * Protobuf type {@code eventpoc.McsCurrentPositionEvent}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:eventpoc.McsCurrentPositionEvent)
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEventOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsCurrentPositionEvent_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsCurrentPositionEvent_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.class, org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.Builder.class);
            }

            // Construct using org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }
            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }
            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                mcsInPosition_ = false;
                bitField0_ = (bitField0_ & ~0x00000001);
                azPos_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000002);
                azPosDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000004);
                azPosError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000008);
                azInPosition_ = false;
                bitField0_ = (bitField0_ & ~0x00000010);
                elPos_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000020);
                elPosDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000040);
                elPosError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000080);
                elInPosition_ = false;
                bitField0_ = (bitField0_ & ~0x00000100);
                encodeLatchingTime_ = 0D;
                bitField0_ = (bitField0_ & ~0x00000200);
                azPosDmdErrCount_ = 0;
                bitField0_ = (bitField0_ & ~0x00000400);
                elPosDmdErrCount_ = 0;
                bitField0_ = (bitField0_ & ~0x00000800);
                azWrapPos_ = 0D;
                bitField0_ = (bitField0_ & ~0x00001000);
                azWrapPosDemand_ = 0D;
                bitField0_ = (bitField0_ & ~0x00002000);
                azWrapPosError_ = 0D;
                bitField0_ = (bitField0_ & ~0x00004000);
                time_ = 0L;
                bitField0_ = (bitField0_ & ~0x00008000);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.internal_static_eventpoc_McsCurrentPositionEvent_descriptor;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent getDefaultInstanceForType() {
                return org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.getDefaultInstance();
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent build() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent buildPartial() {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent result = new org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.mcsInPosition_ = mcsInPosition_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.azPos_ = azPos_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.azPosDemand_ = azPosDemand_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.azPosError_ = azPosError_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.azInPosition_ = azInPosition_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.elPos_ = elPos_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.elPosDemand_ = elPosDemand_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.elPosError_ = elPosError_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.elInPosition_ = elInPosition_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.encodeLatchingTime_ = encodeLatchingTime_;
                if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
                    to_bitField0_ |= 0x00000400;
                }
                result.azPosDmdErrCount_ = azPosDmdErrCount_;
                if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.elPosDmdErrCount_ = elPosDmdErrCount_;
                if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.azWrapPos_ = azWrapPos_;
                if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
                    to_bitField0_ |= 0x00002000;
                }
                result.azWrapPosDemand_ = azWrapPosDemand_;
                if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
                    to_bitField0_ |= 0x00004000;
                }
                result.azWrapPosError_ = azWrapPosError_;
                if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
                    to_bitField0_ |= 0x00008000;
                }
                result.time_ = time_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent) {
                    return mergeFrom((org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent other) {
                if (other == org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent.getDefaultInstance()) return this;
                if (other.hasMcsInPosition()) {
                    setMcsInPosition(other.getMcsInPosition());
                }
                if (other.hasAzPos()) {
                    setAzPos(other.getAzPos());
                }
                if (other.hasAzPosDemand()) {
                    setAzPosDemand(other.getAzPosDemand());
                }
                if (other.hasAzPosError()) {
                    setAzPosError(other.getAzPosError());
                }
                if (other.hasAzInPosition()) {
                    setAzInPosition(other.getAzInPosition());
                }
                if (other.hasElPos()) {
                    setElPos(other.getElPos());
                }
                if (other.hasElPosDemand()) {
                    setElPosDemand(other.getElPosDemand());
                }
                if (other.hasElPosError()) {
                    setElPosError(other.getElPosError());
                }
                if (other.hasElInPosition()) {
                    setElInPosition(other.getElInPosition());
                }
                if (other.hasEncodeLatchingTime()) {
                    setEncodeLatchingTime(other.getEncodeLatchingTime());
                }
                if (other.hasAzPosDmdErrCount()) {
                    setAzPosDmdErrCount(other.getAzPosDmdErrCount());
                }
                if (other.hasElPosDmdErrCount()) {
                    setElPosDmdErrCount(other.getElPosDmdErrCount());
                }
                if (other.hasAzWrapPos()) {
                    setAzWrapPos(other.getAzWrapPos());
                }
                if (other.hasAzWrapPosDemand()) {
                    setAzWrapPosDemand(other.getAzWrapPosDemand());
                }
                if (other.hasAzWrapPosError()) {
                    setAzWrapPosError(other.getAzWrapPosError());
                }
                if (other.hasTime()) {
                    setTime(other.getTime());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasMcsInPosition()) {

                    return false;
                }
                if (!hasAzPos()) {

                    return false;
                }
                if (!hasAzPosDemand()) {

                    return false;
                }
                if (!hasAzPosError()) {

                    return false;
                }
                if (!hasAzInPosition()) {

                    return false;
                }
                if (!hasElPos()) {

                    return false;
                }
                if (!hasElPosDemand()) {

                    return false;
                }
                if (!hasElPosError()) {

                    return false;
                }
                if (!hasElInPosition()) {

                    return false;
                }
                if (!hasEncodeLatchingTime()) {

                    return false;
                }
                if (!hasAzPosDmdErrCount()) {

                    return false;
                }
                if (!hasElPosDmdErrCount()) {

                    return false;
                }
                if (!hasAzWrapPos()) {

                    return false;
                }
                if (!hasAzWrapPosDemand()) {

                    return false;
                }
                if (!hasAzWrapPosError()) {

                    return false;
                }
                if (!hasTime()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.tmt.tcs.mcs.MCShcd.msgTransformers.protos.TcsMcsEventsProtos.McsCurrentPositionEvent) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }
            private int bitField0_;

            private boolean mcsInPosition_ ;
            /**
             * <code>required bool mcsInPosition = 1;</code>
             *
             * <pre>
             * conjunction of azInPosition and elInPosition
             * </pre>
             */
            public boolean hasMcsInPosition() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }
            /**
             * <code>required bool mcsInPosition = 1;</code>
             *
             * <pre>
             * conjunction of azInPosition and elInPosition
             * </pre>
             */
            public boolean getMcsInPosition() {
                return mcsInPosition_;
            }
            /**
             * <code>required bool mcsInPosition = 1;</code>
             *
             * <pre>
             * conjunction of azInPosition and elInPosition
             * </pre>
             */
            public Builder setMcsInPosition(boolean value) {
                bitField0_ |= 0x00000001;
                mcsInPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool mcsInPosition = 1;</code>
             *
             * <pre>
             * conjunction of azInPosition and elInPosition
             * </pre>
             */
            public Builder clearMcsInPosition() {
                bitField0_ = (bitField0_ & ~0x00000001);
                mcsInPosition_ = false;
                onChanged();
                return this;
            }

            private double azPos_ ;
            /**
             * <code>required double azPos = 2;</code>
             */
            public boolean hasAzPos() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }
            /**
             * <code>required double azPos = 2;</code>
             */
            public double getAzPos() {
                return azPos_;
            }
            /**
             * <code>required double azPos = 2;</code>
             */
            public Builder setAzPos(double value) {
                bitField0_ |= 0x00000002;
                azPos_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPos = 2;</code>
             */
            public Builder clearAzPos() {
                bitField0_ = (bitField0_ & ~0x00000002);
                azPos_ = 0D;
                onChanged();
                return this;
            }

            private double azPosDemand_ ;
            /**
             * <code>required double azPosDemand = 3;</code>
             */
            public boolean hasAzPosDemand() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }
            /**
             * <code>required double azPosDemand = 3;</code>
             */
            public double getAzPosDemand() {
                return azPosDemand_;
            }
            /**
             * <code>required double azPosDemand = 3;</code>
             */
            public Builder setAzPosDemand(double value) {
                bitField0_ |= 0x00000004;
                azPosDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosDemand = 3;</code>
             */
            public Builder clearAzPosDemand() {
                bitField0_ = (bitField0_ & ~0x00000004);
                azPosDemand_ = 0D;
                onChanged();
                return this;
            }

            private double azPosError_ ;
            /**
             * <code>required double azPosError = 4;</code>
             */
            public boolean hasAzPosError() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }
            /**
             * <code>required double azPosError = 4;</code>
             */
            public double getAzPosError() {
                return azPosError_;
            }
            /**
             * <code>required double azPosError = 4;</code>
             */
            public Builder setAzPosError(double value) {
                bitField0_ |= 0x00000008;
                azPosError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azPosError = 4;</code>
             */
            public Builder clearAzPosError() {
                bitField0_ = (bitField0_ & ~0x00000008);
                azPosError_ = 0D;
                onChanged();
                return this;
            }

            private boolean azInPosition_ ;
            /**
             * <code>required bool azInPosition = 5;</code>
             */
            public boolean hasAzInPosition() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }
            /**
             * <code>required bool azInPosition = 5;</code>
             */
            public boolean getAzInPosition() {
                return azInPosition_;
            }
            /**
             * <code>required bool azInPosition = 5;</code>
             */
            public Builder setAzInPosition(boolean value) {
                bitField0_ |= 0x00000010;
                azInPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool azInPosition = 5;</code>
             */
            public Builder clearAzInPosition() {
                bitField0_ = (bitField0_ & ~0x00000010);
                azInPosition_ = false;
                onChanged();
                return this;
            }

            private double elPos_ ;
            /**
             * <code>required double elPos = 6;</code>
             */
            public boolean hasElPos() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }
            /**
             * <code>required double elPos = 6;</code>
             */
            public double getElPos() {
                return elPos_;
            }
            /**
             * <code>required double elPos = 6;</code>
             */
            public Builder setElPos(double value) {
                bitField0_ |= 0x00000020;
                elPos_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPos = 6;</code>
             */
            public Builder clearElPos() {
                bitField0_ = (bitField0_ & ~0x00000020);
                elPos_ = 0D;
                onChanged();
                return this;
            }

            private double elPosDemand_ ;
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public boolean hasElPosDemand() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public double getElPosDemand() {
                return elPosDemand_;
            }
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public Builder setElPosDemand(double value) {
                bitField0_ |= 0x00000040;
                elPosDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosDemand = 7;</code>
             */
            public Builder clearElPosDemand() {
                bitField0_ = (bitField0_ & ~0x00000040);
                elPosDemand_ = 0D;
                onChanged();
                return this;
            }

            private double elPosError_ ;
            /**
             * <code>required double elPosError = 8;</code>
             */
            public boolean hasElPosError() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }
            /**
             * <code>required double elPosError = 8;</code>
             */
            public double getElPosError() {
                return elPosError_;
            }
            /**
             * <code>required double elPosError = 8;</code>
             */
            public Builder setElPosError(double value) {
                bitField0_ |= 0x00000080;
                elPosError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double elPosError = 8;</code>
             */
            public Builder clearElPosError() {
                bitField0_ = (bitField0_ & ~0x00000080);
                elPosError_ = 0D;
                onChanged();
                return this;
            }

            private boolean elInPosition_ ;
            /**
             * <code>required bool elInPosition = 9;</code>
             */
            public boolean hasElInPosition() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }
            /**
             * <code>required bool elInPosition = 9;</code>
             */
            public boolean getElInPosition() {
                return elInPosition_;
            }
            /**
             * <code>required bool elInPosition = 9;</code>
             */
            public Builder setElInPosition(boolean value) {
                bitField0_ |= 0x00000100;
                elInPosition_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required bool elInPosition = 9;</code>
             */
            public Builder clearElInPosition() {
                bitField0_ = (bitField0_ & ~0x00000100);
                elInPosition_ = false;
                onChanged();
                return this;
            }

            private double encodeLatchingTime_ ;
            /**
             * <code>required double encodeLatchingTime = 10;</code>
             */
            public boolean hasEncodeLatchingTime() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }
            /**
             * <code>required double encodeLatchingTime = 10;</code>
             */
            public double getEncodeLatchingTime() {
                return encodeLatchingTime_;
            }
            /**
             * <code>required double encodeLatchingTime = 10;</code>
             */
            public Builder setEncodeLatchingTime(double value) {
                bitField0_ |= 0x00000200;
                encodeLatchingTime_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double encodeLatchingTime = 10;</code>
             */
            public Builder clearEncodeLatchingTime() {
                bitField0_ = (bitField0_ & ~0x00000200);
                encodeLatchingTime_ = 0D;
                onChanged();
                return this;
            }

            private int azPosDmdErrCount_ ;
            /**
             * <code>required int32 azPosDmdErrCount = 11;</code>
             */
            public boolean hasAzPosDmdErrCount() {
                return ((bitField0_ & 0x00000400) == 0x00000400);
            }
            /**
             * <code>required int32 azPosDmdErrCount = 11;</code>
             */
            public int getAzPosDmdErrCount() {
                return azPosDmdErrCount_;
            }
            /**
             * <code>required int32 azPosDmdErrCount = 11;</code>
             */
            public Builder setAzPosDmdErrCount(int value) {
                bitField0_ |= 0x00000400;
                azPosDmdErrCount_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 azPosDmdErrCount = 11;</code>
             */
            public Builder clearAzPosDmdErrCount() {
                bitField0_ = (bitField0_ & ~0x00000400);
                azPosDmdErrCount_ = 0;
                onChanged();
                return this;
            }

            private int elPosDmdErrCount_ ;
            /**
             * <code>required int32 elPosDmdErrCount = 12;</code>
             */
            public boolean hasElPosDmdErrCount() {
                return ((bitField0_ & 0x00000800) == 0x00000800);
            }
            /**
             * <code>required int32 elPosDmdErrCount = 12;</code>
             */
            public int getElPosDmdErrCount() {
                return elPosDmdErrCount_;
            }
            /**
             * <code>required int32 elPosDmdErrCount = 12;</code>
             */
            public Builder setElPosDmdErrCount(int value) {
                bitField0_ |= 0x00000800;
                elPosDmdErrCount_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int32 elPosDmdErrCount = 12;</code>
             */
            public Builder clearElPosDmdErrCount() {
                bitField0_ = (bitField0_ & ~0x00000800);
                elPosDmdErrCount_ = 0;
                onChanged();
                return this;
            }

            private double azWrapPos_ ;
            /**
             * <code>required double azWrapPos = 13;</code>
             */
            public boolean hasAzWrapPos() {
                return ((bitField0_ & 0x00001000) == 0x00001000);
            }
            /**
             * <code>required double azWrapPos = 13;</code>
             */
            public double getAzWrapPos() {
                return azWrapPos_;
            }
            /**
             * <code>required double azWrapPos = 13;</code>
             */
            public Builder setAzWrapPos(double value) {
                bitField0_ |= 0x00001000;
                azWrapPos_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapPos = 13;</code>
             */
            public Builder clearAzWrapPos() {
                bitField0_ = (bitField0_ & ~0x00001000);
                azWrapPos_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapPosDemand_ ;
            /**
             * <code>required double azWrapPosDemand = 14;</code>
             */
            public boolean hasAzWrapPosDemand() {
                return ((bitField0_ & 0x00002000) == 0x00002000);
            }
            /**
             * <code>required double azWrapPosDemand = 14;</code>
             */
            public double getAzWrapPosDemand() {
                return azWrapPosDemand_;
            }
            /**
             * <code>required double azWrapPosDemand = 14;</code>
             */
            public Builder setAzWrapPosDemand(double value) {
                bitField0_ |= 0x00002000;
                azWrapPosDemand_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapPosDemand = 14;</code>
             */
            public Builder clearAzWrapPosDemand() {
                bitField0_ = (bitField0_ & ~0x00002000);
                azWrapPosDemand_ = 0D;
                onChanged();
                return this;
            }

            private double azWrapPosError_ ;
            /**
             * <code>required double azWrapPosError = 15;</code>
             */
            public boolean hasAzWrapPosError() {
                return ((bitField0_ & 0x00004000) == 0x00004000);
            }
            /**
             * <code>required double azWrapPosError = 15;</code>
             */
            public double getAzWrapPosError() {
                return azWrapPosError_;
            }
            /**
             * <code>required double azWrapPosError = 15;</code>
             */
            public Builder setAzWrapPosError(double value) {
                bitField0_ |= 0x00004000;
                azWrapPosError_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required double azWrapPosError = 15;</code>
             */
            public Builder clearAzWrapPosError() {
                bitField0_ = (bitField0_ & ~0x00004000);
                azWrapPosError_ = 0D;
                onChanged();
                return this;
            }

            private long time_ ;
            /**
             * <code>required int64 time = 16;</code>
             */
            public boolean hasTime() {
                return ((bitField0_ & 0x00008000) == 0x00008000);
            }
            /**
             * <code>required int64 time = 16;</code>
             */
            public long getTime() {
                return time_;
            }
            /**
             * <code>required int64 time = 16;</code>
             */
            public Builder setTime(long value) {
                bitField0_ |= 0x00008000;
                time_ = value;
                onChanged();
                return this;
            }
            /**
             * <code>required int64 time = 16;</code>
             */
            public Builder clearTime() {
                bitField0_ = (bitField0_ & ~0x00008000);
                time_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:eventpoc.McsCurrentPositionEvent)
        }

        static {
            defaultInstance = new McsCurrentPositionEvent(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:eventpoc.McsCurrentPositionEvent)
    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_TcsPositionDemandEvent_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_TcsPositionDemandEvent_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_TcsHeartbeat_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_TcsHeartbeat_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_McsHealth_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_McsHealth_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_McsAlarm_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_McsAlarm_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_McsDriveStatus_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_McsDriveStatus_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_MountControlDiags_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_MountControlDiags_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_eventpoc_McsCurrentPositionEvent_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_eventpoc_McsCurrentPositionEvent_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }
    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;
    static {
        java.lang.String[] descriptorData = {
                "\n\024tcs_mcs_events.proto\022\010eventpoc\"J\n\026TcsP" +
                        "ositionDemandEvent\022\017\n\007azimuth\030\001 \002(\001\022\021\n\te" +
                        "levation\030\002 \002(\001\022\014\n\004time\030\003 \002(\003\" \n\014TcsHeart" +
                        "beat\022\020\n\010sequence\030\001 \002(\005\"\237\001\n\tMcsHealth\0220\n\006" +
                        "health\030\001 \002(\0162\032.eventpoc.McsHealth.Health" +
                        ":\004Good\022\016\n\006reason\030\002 \002(\t\022\014\n\004time\030\003 \002(\003\"B\n\006" +
                        "Health\022\010\n\004Good\020\000\022\007\n\003Ill\020\001\022\007\n\003Bad\020\002\022\017\n\013in" +
                        "terlocked\020\003\022\013\n\007unknown\020\004\"\240\002\n\010McsAlarm\022\016\n" +
                        "\006source\030\001 \002(\t\0224\n\010category\030\002 \002(\0162\033.eventp" +
                        "oc.McsAlarm.Category:\005emerg\0224\n\010severity\030",
                "\003 \002(\0162\033.eventpoc.McsAlarm.Severity:\005majo" +
                        "r\022\016\n\006reason\030\004 \002(\t\022\014\n\004time\030\005 \002(\003\"L\n\010Categ" +
                        "ory\022\t\n\005emerg\020\000\022\t\n\005alert\020\001\022\010\n\004crit\020\002\022\007\n\003e" +
                        "rr\020\003\022\013\n\007warning\020\004\022\n\n\006notice\020\005\",\n\010Severit" +
                        "y\022\t\n\005major\020\000\022\t\n\005minor\020\001\022\n\n\006normal\020\002\"\252\025\n\016" +
                        "McsDriveStatus\022\022\n\nprocessing\030\001 \002(\010\022<\n\tli" +
                        "fecycle\030\002 \002(\0162\".eventpoc.McsDriveStatus." +
                        "Lifecycle:\005ready\022E\n\007azstate\030\003 \002(\0162 .even" +
                        "tpoc.McsDriveStatus.Azstate:\022az_drive_po" +
                        "wer_off\022E\n\007elstate\030\004 \002(\0162 .eventpoc.McsD",
                "riveStatus.Elstate:\022el_drive_power_off\022\024" +
                        "\n\014azMotorTemps\030\005 \002(\010\022\024\n\014elMotorTemps\030\006 \002" +
                        "(\010\022\023\n\013azAmplTemps\030\007 \002(\010\022\023\n\013elAmplTemps\030\010" +
                        " \002(\010\022\020\n\010azLimits\030\t \002(\010\022\020\n\010elLimits\030\n \002(\010" +
                        "\022\026\n\016mcsDiagEnabled\030\013 \002(\010\022A\n\014servoTestMon" +
                        "\030\014 \002(\0162%.eventpoc.McsDriveStatus.ServoTe" +
                        "stMon:\004None\0229\n\nlocal_Enum\030\r \002(\0162\036.eventp" +
                        "oc.McsDriveStatus.Local:\005local\022@\n\014contro" +
                        "lRight\030\016 \002(\0162%.eventpoc.McsDriveStatus.C" +
                        "ontrolRight:\003MCU\022E\n\013azDriveMode\030\017 \002(\0162$.",
                "eventpoc.McsDriveStatus.AzDriveMode:\naz_" +
                        "standby\022E\n\013elDriveMode\030\020 \002(\0162$.eventpoc." +
                        "McsDriveStatus.ElDriveMode:\nel_standby\022\027" +
                        "\n\017azBrakeReleased\030\021 \002(\010\022\027\n\017elBrakeReleas" +
                        "ed\030\022 \002(\010\022\033\n\023azWrapBrakeReleased\030\023 \002(\010\022\024\n" +
                        "\014azServoOnOpn\030\024 \002(\010\022\024\n\014azServoOnRdy\030\025 \002(" +
                        "\010\022\024\n\014elServoOnOpn\030\026 \002(\010\022\024\n\014elServoOnRdy\030" +
                        "\027 \002(\010\022\032\n\022azLimitRecoveryOpn\030\030 \002(\010\022\032\n\022azL" +
                        "imitRecoveryRdy\030\031 \002(\010\022\032\n\022elLimitRecovery" +
                        "Opn\030\032 \002(\010\022\032\n\022elLimitRecoveryRdy\030\033 \002(\010\022\030\n",
                "\020azWrapServoOnOpn\030\034 \002(\010\022\026\n\016wrapServoOnRd" +
                        "y\030\035 \002(\010\022\034\n\024wrapLimitRecoveryOpn\030\036 \002(\010\022\034\n" +
                        "\024wrapLimitRecoveryRdy\030\037 \002(\010\022\021\n\tazOverlap" +
                        "\030  \002(\010\022\036\n\026azAbsIncDeviationLimit\030! \002(\010\022\036" +
                        "\n\026elAbsIncDeviationLimit\030\" \002(\010\022\032\n\022azEncd" +
                        "rUnitInitFin\030# \002(\010\022\032\n\022elEncdrUnitInitFin" +
                        "\030$ \002(\010\022\033\n\023absEncdrUnitInitFin\030% \002(\010\022\022\n\na" +
                        "zDatumOpn\030& \002(\010\022\022\n\nelDatumOpn\030\' \002(\010\022\022\n\na" +
                        "zDatumRun\030( \002(\010\022\022\n\nelDatumRun\030) \002(\010\022\022\n\na" +
                        "zDatumRdy\030* \002(\010\022\022\n\nelDatumRdy\030+ \002(\010\022\026\n\016a",
                "zEncdrDatumed\030, \002(\010\022\026\n\016elEncdrDatumed\030- " +
                        "\002(\010\022\032\n\022azEncdrHeadNotUsed\030. \002(\010\022\032\n\022elEnc" +
                        "drHeadNotUsed\030/ \002(\010\022\031\n\021azAbsEncdrNotUsed" +
                        "\0300 \002(\010\022\031\n\021elAbsEncdrNotUsed\0301 \002(\010\022\025\n\razA" +
                        "mplNotUsed\0302 \002(\010\022\025\n\relAmplNotUsed\0303 \002(\010\022" +
                        "\023\n\013stowPosnOpn\0304 \002(\010\022\023\n\013stowPosnRun\0305 \002(" +
                        "\010\022\023\n\013stowPosnRdy\0306 \002(\010\022\023\n\013stowInsrOpn\0307 " +
                        "\002(\010\022\023\n\013stowInsrRun\0308 \002(\010\022\023\n\013stowInsrRdy\030" +
                        "9 \002(\010\022\023\n\013stowRetrOpn\030: \002(\010\022\023\n\013stowRetrRu" +
                        "n\030; \002(\010\022\023\n\013stowRetrRdy\030< \002(\010\022\036\n\026azTapeEn",
                "cdrDataLeapDet\030= \002(\010\022\036\n\026elTapeEncdrDataL" +
                        "eapDet\030> \002(\010\022\035\n\025azAbsEncdrDataLeapDet\030? " +
                        "\002(\010\022\014\n\004time\030@ \002(\003\"@\n\tLifecycle\022\t\n\005ready\020" +
                        "\000\022\n\n\006loaded\020\001\022\017\n\013initialized\020\002\022\013\n\007runnin" +
                        "g\020\003\"\233\001\n\007Azstate\022\026\n\022az_drive_power_off\020\000\022" +
                        "\020\n\014az_servo_off\020\001\022\017\n\013az_pointing\020\002\022\031\n\025az" +
                        "_servo_off_datumned\020\003\022\030\n\024az_pointing_dat" +
                        "umned\020\004\022\020\n\014az_following\020\005\022\016\n\naz_faulted\020" +
                        "\006\"\233\001\n\007Elstate\022\026\n\022el_drive_power_off\020\000\022\020\n" +
                        "\014el_servo_off\020\001\022\017\n\013el_pointing\020\002\022\031\n\025el_s",
                "ervo_off_datumned\020\003\022\030\n\024el_pointing_datum" +
                        "ned\020\004\022\020\n\014el_following\020\005\022\016\n\nel_faulted\020\006\"" +
                        "h\n\014ServoTestMon\022\010\n\004None\020\000\022\n\n\006AzPosn\020\001\022\014\n" +
                        "\010AzMaxVal\020\002\022\014\n\010AzMinVal\020\003\022\n\n\006ElPosn\020\004\022\014\n" +
                        "\010ElMaxVal\020\005\022\014\n\010ElMinVal\020\006\"\036\n\005Local\022\t\n\005lo" +
                        "cal\020\000\022\n\n\006remote\020\001\"}\n\014ControlRight\022\007\n\003MCU" +
                        "\020\000\022\013\n\007AZ_Drv1\020\001\022\013\n\007az_drv2\020\002\022\013\n\007el_drv1\020" +
                        "\003\022\013\n\007el_drv2\020\004\022\010\n\004eui1\020\005\022\010\n\004eui2\020\006\022\010\n\004eu" +
                        "i3\020\007\022\010\n\004eui4\020\010\022\010\n\004eui5\020\t\"Z\n\013AzDriveMode\022" +
                        "\016\n\naz_standby\020\000\022\024\n\020az_pointing_mode\020\001\022\016\n",
                "\naz_slewing\020\002\022\025\n\021az_following_mode\020\003\"Z\n\013" +
                        "ElDriveMode\022\016\n\nel_standby\020\000\022\024\n\020el_pointi" +
                        "ng_mode\020\001\022\016\n\nel_slewing\020\002\022\025\n\021el_followin" +
                        "g_mode\020\003\"\256\013\n\021MountControlDiags\022\025\n\rmcsInP" +
                        "osition\030\001 \002(\010\022\024\n\014azInPosition\030\002 \002(\010\022\024\n\014e" +
                        "lInPosition\030\003 \002(\010\022\022\n\nazPosition\030\004 \002(\001\022\022\n" +
                        "\nelPosition\030\005 \002(\001\022\023\n\013azPosDemand\030\006 \002(\001\022\023" +
                        "\n\013elPosDemand\030\007 \002(\001\022\022\n\nazPosError\030\010 \002(\001\022" +
                        "\022\n\nelPosError\030\t \002(\001\022\022\n\nazVelocity\030\n \002(\001\022" +
                        "\022\n\nelVelocity\030\013 \002(\001\022\030\n\020azVelocityDemand\030",
                "\014 \002(\001\022\030\n\020elVelocityDemand\030\r \002(\001\022\027\n\017azVel" +
                        "ocityError\030\016 \002(\001\022\027\n\017elVelocityError\030\017 \002(" +
                        "\001\022\026\n\016azAcceleration\030\020 \002(\001\022\026\n\016elAccelerat" +
                        "ion\030\021 \002(\001\022\026\n\016azTorqueDemand\030\022 \002(\001\022\026\n\016elT" +
                        "orqueDemand\030\023 \002(\001\022\032\n\022azEncoderPositions\030" +
                        "\024 \002(\005\022\032\n\022elEncoderPositions\030\025 \002(\005\022\027\n\017azD" +
                        "riveCurrents\030\026 \002(\002\022\027\n\017elDriveCurrents\030\027 " +
                        "\002(\002\022\033\n\023encoderLatchingTime\030\030 \002(\001\022\021\n\tazWr" +
                        "apPos\030\031 \002(\001\022\027\n\017azWrapPosDemand\030\032 \002(\001\022\026\n\016" +
                        "azWrapPosError\030\033 \002(\001\022\026\n\016azWrapVelocity\030\034",
                " \002(\001\022\034\n\024azWrapVelocityDemand\030\035 \002(\001\022\033\n\023az" +
                        "WrapVelocityError\030\036 \002(\001\022\032\n\022azWrapAcceler" +
                        "ation\030\037 \002(\001\022\032\n\022azWrapTorqueDemand\030  \002(\001\022" +
                        "\033\n\023azWrapDriveCurrents\030! \002(\002\022\017\n\007azPosXp\030" +
                        "\" \002(\001\022\017\n\007azPosXm\030# \002(\001\022\017\n\007elPosXp\030$ \002(\001\022" +
                        "\017\n\007elPosXm\030% \002(\001\022\023\n\013azPosByHead\030& \002(\001\022\023\n" +
                        "\013elPosByHead\030\' \002(\001\022\033\n\023azNumOfStoredDeman" +
                        "d\030( \002(\005\022\033\n\023elNumOfStoredDemand\030) \002(\005\022\031\n\021" +
                        "eibTriggerCounter\030* \002(\005\022\025\n\reibStatusWord" +
                        "\030+ \002(\005\022\024\n\014eibTimestamp\030, \002(\005\022\035\n\025eibRefer",
                "encePosition1\030- \002(\003\022\036\n\026eibDCReferencePos" +
                        "ition\030. \002(\003\022\022\n\nazPosByAbs\030/ \002(\001\022\022\n\nelPos" +
                        "ByAbs\0300 \002(\001\022\021\n\tazPosErrA\0301 \002(\001\022\021\n\tazPosE" +
                        "rrB\0302 \002(\001\022\021\n\telPosErrA\0303 \002(\001\022\021\n\telPosErr" +
                        "B\0304 \002(\001\022\026\n\016azPosTestInput\0305 \002(\001\022\026\n\016elPos" +
                        "TestInput\0306 \002(\001\022\031\n\021azMaxVelTestInput\0307 \002" +
                        "(\001\022\031\n\021elMaxVelTestInput\0308 \002(\001\022\031\n\021azMinVe" +
                        "lTestInput\0309 \002(\001\022\031\n\021elMinVelTestInput\030: " +
                        "\002(\001\022\026\n\016azTrqTestInput\030; \002(\001\022\026\n\016elTrqTest" +
                        "Input\030< \002(\001\022\014\n\004time\030= \002(\003\"\356\002\n\027McsCurrent",
                "PositionEvent\022\025\n\rmcsInPosition\030\001 \002(\010\022\r\n\005" +
                        "azPos\030\002 \002(\001\022\023\n\013azPosDemand\030\003 \002(\001\022\022\n\nazPo" +
                        "sError\030\004 \002(\001\022\024\n\014azInPosition\030\005 \002(\010\022\r\n\005el" +
                        "Pos\030\006 \002(\001\022\023\n\013elPosDemand\030\007 \002(\001\022\022\n\nelPosE" +
                        "rror\030\010 \002(\001\022\024\n\014elInPosition\030\t \002(\010\022\032\n\022enco" +
                        "deLatchingTime\030\n \002(\001\022\030\n\020azPosDmdErrCount" +
                        "\030\013 \002(\005\022\030\n\020elPosDmdErrCount\030\014 \002(\005\022\021\n\tazWr" +
                        "apPos\030\r \002(\001\022\027\n\017azWrapPosDemand\030\016 \002(\001\022\026\n\016" +
                        "azWrapPosError\030\017 \002(\001\022\014\n\004time\030\020 \002(\003BC\n-or" +
                        "g.tmt.tcs.mcs.MCShcd.msgTransformers.pro",
                "tosB\022TcsMcsEventsProtos"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[] {
                        }, assigner);
        internal_static_eventpoc_TcsPositionDemandEvent_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_eventpoc_TcsPositionDemandEvent_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_TcsPositionDemandEvent_descriptor,
                new java.lang.String[] { "Azimuth", "Elevation", "Time", });
        internal_static_eventpoc_TcsHeartbeat_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_eventpoc_TcsHeartbeat_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_TcsHeartbeat_descriptor,
                new java.lang.String[] { "Sequence", });
        internal_static_eventpoc_McsHealth_descriptor =
                getDescriptor().getMessageTypes().get(2);
        internal_static_eventpoc_McsHealth_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_McsHealth_descriptor,
                new java.lang.String[] { "Health", "Reason", "Time", });
        internal_static_eventpoc_McsAlarm_descriptor =
                getDescriptor().getMessageTypes().get(3);
        internal_static_eventpoc_McsAlarm_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_McsAlarm_descriptor,
                new java.lang.String[] { "Source", "Category", "Severity", "Reason", "Time", });
        internal_static_eventpoc_McsDriveStatus_descriptor =
                getDescriptor().getMessageTypes().get(4);
        internal_static_eventpoc_McsDriveStatus_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_McsDriveStatus_descriptor,
                new java.lang.String[] { "Processing", "Lifecycle", "Azstate", "Elstate", "AzMotorTemps", "ElMotorTemps", "AzAmplTemps", "ElAmplTemps", "AzLimits", "ElLimits", "McsDiagEnabled", "ServoTestMon", "LocalEnum", "ControlRight", "AzDriveMode", "ElDriveMode", "AzBrakeReleased", "ElBrakeReleased", "AzWrapBrakeReleased", "AzServoOnOpn", "AzServoOnRdy", "ElServoOnOpn", "ElServoOnRdy", "AzLimitRecoveryOpn", "AzLimitRecoveryRdy", "ElLimitRecoveryOpn", "ElLimitRecoveryRdy", "AzWrapServoOnOpn", "WrapServoOnRdy", "WrapLimitRecoveryOpn", "WrapLimitRecoveryRdy", "AzOverlap", "AzAbsIncDeviationLimit", "ElAbsIncDeviationLimit", "AzEncdrUnitInitFin", "ElEncdrUnitInitFin", "AbsEncdrUnitInitFin", "AzDatumOpn", "ElDatumOpn", "AzDatumRun", "ElDatumRun", "AzDatumRdy", "ElDatumRdy", "AzEncdrDatumed", "ElEncdrDatumed", "AzEncdrHeadNotUsed", "ElEncdrHeadNotUsed", "AzAbsEncdrNotUsed", "ElAbsEncdrNotUsed", "AzAmplNotUsed", "ElAmplNotUsed", "StowPosnOpn", "StowPosnRun", "StowPosnRdy", "StowInsrOpn", "StowInsrRun", "StowInsrRdy", "StowRetrOpn", "StowRetrRun", "StowRetrRdy", "AzTapeEncdrDataLeapDet", "ElTapeEncdrDataLeapDet", "AzAbsEncdrDataLeapDet", "Time", });
        internal_static_eventpoc_MountControlDiags_descriptor =
                getDescriptor().getMessageTypes().get(5);
        internal_static_eventpoc_MountControlDiags_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_MountControlDiags_descriptor,
                new java.lang.String[] { "McsInPosition", "AzInPosition", "ElInPosition", "AzPosition", "ElPosition", "AzPosDemand", "ElPosDemand", "AzPosError", "ElPosError", "AzVelocity", "ElVelocity", "AzVelocityDemand", "ElVelocityDemand", "AzVelocityError", "ElVelocityError", "AzAcceleration", "ElAcceleration", "AzTorqueDemand", "ElTorqueDemand", "AzEncoderPositions", "ElEncoderPositions", "AzDriveCurrents", "ElDriveCurrents", "EncoderLatchingTime", "AzWrapPos", "AzWrapPosDemand", "AzWrapPosError", "AzWrapVelocity", "AzWrapVelocityDemand", "AzWrapVelocityError", "AzWrapAcceleration", "AzWrapTorqueDemand", "AzWrapDriveCurrents", "AzPosXp", "AzPosXm", "ElPosXp", "ElPosXm", "AzPosByHead", "ElPosByHead", "AzNumOfStoredDemand", "ElNumOfStoredDemand", "EibTriggerCounter", "EibStatusWord", "EibTimestamp", "EibReferencePosition1", "EibDCReferencePosition", "AzPosByAbs", "ElPosByAbs", "AzPosErrA", "AzPosErrB", "ElPosErrA", "ElPosErrB", "AzPosTestInput", "ElPosTestInput", "AzMaxVelTestInput", "ElMaxVelTestInput", "AzMinVelTestInput", "ElMinVelTestInput", "AzTrqTestInput", "ElTrqTestInput", "Time", });
        internal_static_eventpoc_McsCurrentPositionEvent_descriptor =
                getDescriptor().getMessageTypes().get(6);
        internal_static_eventpoc_McsCurrentPositionEvent_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_eventpoc_McsCurrentPositionEvent_descriptor,
                new java.lang.String[] { "McsInPosition", "AzPos", "AzPosDemand", "AzPosError", "AzInPosition", "ElPos", "ElPosDemand", "ElPosError", "ElInPosition", "EncodeLatchingTime", "AzPosDmdErrCount", "ElPosDmdErrCount", "AzWrapPos", "AzWrapPosDemand", "AzWrapPosError", "Time", });
    }

    // @@protoc_insertion_point(outer_class_scope)
}